import pathlib
from typing import Union, Any, Optional, List, TYPE_CHECKING # NOQA
import ctypes as _ctypes
import os
import sys
import inspect  # NOQA
import weakref  # NOQA
from collections.abc import Callable  # NOQA

base_path = os.path.dirname(__file__)

if sys.platform.startswith('win'):
    lib_path = os.path.join(base_path, '_lib_lvgl.dll')
elif sys.platform.startswith('darwin'):
    lib_path = os.path.join(base_path, '_lib_lvgl.dynlib')
else:
    lib_path = os.path.join(base_path, '_lib_lvgl.so')

_lib_lvgl = _ctypes.CDLL(lib_path)

del os
del base_path
del lib_path

__version__ = "0.1.1b"


def binding_version():
    return __version__


INT32_MAX = 0x7FFFFFFF
ANIM_REPEAT_INFINITE = 0xFFFF
ANIM_PLAYTIME_INFINITE = 0xFFFFFFFF

BTNMATRIX_BTN_NONE = 0xFFFF

_COORD_TYPE_SHIFT = 29
_COORD_TYPE_SPEC = 1 << _COORD_TYPE_SHIFT


def COORD_SET_SPEC(x):
    return x | _COORD_TYPE_SPEC


SIZE_CONTENT = COORD_SET_SPEC(2001)
COORD_MAX = (1 << _COORD_TYPE_SHIFT) - 1
COORD_MIN = -COORD_MAX


class _DefaultArg:
    pass


DPI_DEF = 130
DRAW_LABEL_NO_TXT_SEL = 0xFFFF

LABEL_WAIT_CHAR_COUNT = 3
LABEL_DOT_NUM = 3
LABEL_POS_LAST = 0xFFFF
LABEL_TEXT_SELECTION_OFF = DRAW_LABEL_NO_TXT_SEL

TEXTAREA_CURSOR_LAST = 0x7FFF

TABLE_CELL_NONE = 0xFFFF

DROPDOWN_POS_LAST = 0xFFFF

CHART_POINT_NONE = INT32_MAX

ZOOM_NONE = 256

STYLE_PROP_FLAG_NONE = 0
STYLE_PROP_FLAG_INHERITABLE = 1 << 0
STYLE_PROP_FLAG_EXT_DRAW_UPDATE = 1 << 1
STYLE_PROP_FLAG_LAYOUT_UPDATE = 1 << 2
STYLE_PROP_FLAG_PARENT_LAYOUT_UPDATE = 1 << 3
STYLE_PROP_FLAG_LAYER_UPDATE = 1 << 4
STYLE_PROP_FLAG_TRANSFORM = 1 << 5
STYLE_PROP_FLAG_ALL = 0x3F
STYLE_SENTINEL_VALUE = 0xAABBCCDD

COLOR_DEPTH = 32
_COLOR_NATIVE_WITH_ALPHA_SIZE = 4

OPA_MIN = 2
OPA_MAX = 253

RADIUS_CIRCLE = 0x7FFF
GRID_CONTENT = COORD_MAX - 101
GRID_TEMPLATE_LAST = COORD_MAX

_PyCPointerType = type(_ctypes.POINTER(_ctypes.c_uint8))
_CArgObject = type(_ctypes.byref(_ctypes.c_uint8()))
_PyCArrayType = type((_ctypes.c_uint8 * 1))
_PyCSimpleType = type(_ctypes.c_uint8)
_PyCFuncPtrType = type(_ctypes.CFUNCTYPE(None))
_PyCStructType = type(_ctypes.Structure)


class __PyObjectStore(object):
    __objects__ = {}

    @property
    def __address__(self):
        return _ctypes.addressof(self)

    @classmethod
    def __weakref_remove__(cls, ref):
        for key, value in list(cls.__objects__[cls].items()):
            if value == ref:
                del cls.__objects__[cls][key]
                return

    @classmethod
    def __new__(cls, *args, **kwargs):
        if cls not in cls.__objects__:
            cls.__objects__[cls] = {}

        if '__object__' in kwargs:
            obj = kwargs.pop('__object__')
            address = obj.__address__

            if address not in cls.__objects__[cls]:
                cls.__objects__[cls][address] = (
                    weakref.ref(obj, cls.__weakref_remove__)
                )

            return cls.__objects__[cls][address]()

        obj = super().__new__(cls, *args, **kwargs)
        address = obj.__address__
        cls.__objects__[cls][address] = weakref.ref(obj, cls.__weakref_remove__)
        return obj


class void_t(_ctypes.c_void_p, __PyObjectStore):
    pass


class float_t(_ctypes.c_float, __PyObjectStore):
    pass


class string_t(_ctypes.c_wchar_p, __PyObjectStore):
    pass


class bool_t(_ctypes.c_bool, __PyObjectStore):
    pass


class char_t(_ctypes.c_char, __PyObjectStore):
    pass


class mem_pool_t(void_t):
    pass


class _Structure(_ctypes.Structure, __PyObjectStore):
    __c_objects__ = {}
    __py_objects__ = {}

    def __init__(self, *args, **kwargs):
        _ctypes.Structure.__setattr__(self, '__c_objects__', {})
        _ctypes.Structure.__setattr__(self, '__py_objects__', {})

        super().__init__(*args, **kwargs)

    def __setattr__(self, key, value):
        fields = _ctypes.Structure.__getattribute__(self, '_fields_')
        if value in self.__c_objects__:
            value = self.__c_objects__[value]
        else:
            tmp_value = value

            for field in fields:
                if len(field) == 2:
                    field_name, field_type = field
                else:
                    field_name, field_type = field[:-1]

                if field_name != key:
                    continue

                if inspect.isfunction(value) or inspect.ismethod(value):
                    value = field_type(value)
                elif (
                    isinstance(field_type, _PyCPointerType) and
                    isinstance(type(value), (_PyCStructType, _PyCSimpleType))
                ):
                    value = _ctypes.pointer(value)

                elif isinstance(value, str):
                    value = value.encode('utf-8')
                    if not value.endswith(b'\x00'):
                        value += b'\x00'

                    type_ = field_type._type_ * len(value)
                    value = type_(*value)

                elif isinstance(value, bytes):
                    type_ = field_type._type_ * len(value)
                    value = type_.from_buffer(value)

                    # array = type_(*value)
                    # value = _ctypes.cast(array, field_type)
                    print(value)
                    self.__py_objects__[_ctypes.addressof(value)] = tmp_value

                elif isinstance(value, bytearray):
                    type_ = field_type._type_ * len(value)
                    value = type_.from_buffer(value)

                else:
                    if type(field_type) == _PyCPointerType:
                        type_ = field_type._type_
                    else:
                        type_ = field_type

                    if not isinstance(value, type_):
                        value = type_(value)

                break

            print(self, value)
            self.__c_objects__[tmp_value] = value
            self.__py_objects__[_ctypes.addressof(value)] = tmp_value

            _ctypes.Structure.__setattr__(self, key, value)

    def __getattribute__(self, item):
        obj = _ctypes.Structure.__getattribute__(self, item)
        if item.startswith('__') and item.endswith('__'):
            return obj

        address = _ctypes.addressof(obj)
        print(obj, self.__py_objects__)

        if address in self.__py_objects__:
            return self.__py_objects__[address]

        fields = _ctypes.Structure.__getattribute__(self, '_fields_')

        for field in fields:
            if len(field) == 2:
                field_name, field_type = field
            else:
                field_name, field_type = field[:-1]

            if item != field_name:
                continue

            val_len = None

            return _convert_to_py_type(obj, field_type, val_len)

        return obj


class _Union(_ctypes.Union, __PyObjectStore):

    def _weakref_callback(self, ref):
        storage = _ctypes.Union.__getattribute__(self, '_callback_storage')
        if ref in storage:
            del storage[ref]

    def _set_callback(self, field_type, func):
        weakref_callback = _ctypes.Union.__getattribute__(
            self,
            '_weakref_callback'
        )
        if inspect.ismethod(func):
            # This has to be done this way because WeakMethod is not hashable so
            # it cannot be stored in a dictionary and the __hash__ method is
            # read only so it can only be added upon class creation. So we
            # dynamically construct the class pointing __hash__ to the
            # methods __hash__
            weakmethod = type(
                'weakmethod', (weakref.WeakMethod,), {'__hash__': func.__hash__}
            )
            ref = weakmethod(func, weakref_callback)
        elif inspect.isfunction(func):
            ref = weakref.ref(func, weakref_callback)
        else:
            raise TypeError

        if not hasattr(self, '_callback_storage'):
            _ctypes.Union.__setattr__(self, '_callback_storage', {})

        storage = _ctypes.Union.__getattribute__(self, '_callback_storage')

        if ref not in storage:
            func = field_type(func)
            storage[ref] = func
        else:
            func = storage[ref]

        return func

    def __setattr__(self, key, value):
        fields = _ctypes.Union.__getattribute__(self, '_fields_')
        for field_name, field_type in fields:
            if field_name == key:
                if inspect.isfunction(value) or inspect.ismethod(value):
                    set_callback = _ctypes.Union.__getattribute__(
                        self,
                        'set_callback'
                    )
                    value = set_callback(field_type, value)
                elif isinstance(field_type, _PyCPointerType) and isinstance(
                        type(value),
                        (_PyCStructType, _PyCSimpleType)
                ):
                    value = _ctypes.pointer(value)
                else:
                    value = _convert_to_ctype(value, field_type)
                break

        _ctypes.Union.__setattr__(self, key, value)

    def __getattribute__(self, item):
        obj = _ctypes.Union.__getattribute__(self, item)

        if item in ('_special_types_', '__dict__'):
            return obj

        if item in self._special_types_:
            return _convert_to_py_type(obj, self._special_types_[item])

        return _convert_to_py_type(obj)


# This is here for the purposes of type hinting. Any returned values from
# a function or from a structure field that is of an "int" type or a "float"
# type will be returned as a python int or float. the typed return values are
# simply to know exactly what kind of an int is being returned so a user is
# able to act accordingly and no go out of bounds if modifying it and passing
# it to a function that takes the same type. If that does get done it would
# cause undefined behavior.

def __neg__(self):
    value = self.value
    self.value = -value
    return self


def __add__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 + x

    val2 = x.value

    return val1 + val2


def __sub__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 - x

    val2 = x.value

    return val1 - val2


def __mul__(self, x):
    val1 = self.value

    if isinstance(x, int) and self._c_obj is not None:
        array = _ctypes.cast(
            self._c_obj,
            _ctypes.POINTER(self.__class__ * x)
        ).contents

        res = []

        for i in range(x):
            res.append(array[i]())

        return res

    if isinstance(x, (int, float)):
        return val1 * x

    val2 = x.value

    return val1 * val2


def __floordiv__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 // x

    val2 = x.value

    return val1 // val2


def __truediv__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 / x

    val2 = x.value

    return val1 / val2


def __mod__(self, x):
    val1 = self.value

    if isinstance(x, int):
        return val1 % x

    val2 = x.value

    return val1 % val2


def __divmod__(self, x: int) -> tuple[int, int]:
    pass


def __radd__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        x += val1
        return x

    val2 = x.value
    val2 += val1

    x.value = val1
    return x


def __rsub__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        x -= val1
        return x

    val2 = x.value
    val2 -= val1

    x.value = val1
    return x


def __rmul__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        x *= val1
        return x

    val2 = x.value
    val2 *= val1

    x.value = val1
    return x


def __rfloordiv__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        x //= val1
        return x

    val2 = x.value
    val2 //= val1

    x.value = val1
    return x


def __rtruediv__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        x /= val1
        return x

    val2 = x.value
    val2 /= val1

    x.value = val1
    return x


def __rmod__(self, x):
    val1 = self.value

    if isinstance(x, int):
        x %= val1
        return x

    val2 = x.value
    val2 %= val1

    x.value = val1
    return x


def __pow__(self, x):
    import math

    val1 = self.value

    if isinstance(x, (int, float)):
        return math.pow(val1, x)

    val2 = x.value
    return math.pow(val1, val2)


def __and__(self, n):
    val1 = self.value

    if isinstance(n, int):
        return val1 & n

    val2 = n.value
    return val1 & val2


def __or__(self, n):
    val1 = self.value

    if isinstance(n, int):
        return val1 | n

    val2 = n.value
    return val1 | val2


def __xor__(self, n):
    val1 = self.value

    if isinstance(n, int):
        return val1 ^ n

    val2 = n.value
    return val1 ^ val2


def __lshift__(self, n):
    val1 = self.value

    if isinstance(n, int):
        return val1 << n

    val2 = n.value
    return val1 << val2


def __rshift__(self, n):
    val1 = self.value

    if isinstance(n, int):
        return val1 >> n

    val2 = n.value
    return val1 >> val2


def __rand__(self, n):
    val1 = self.value

    if isinstance(n, int):
        n &= val1
        return n

    val2 = n.value
    val2 &= val1
    n.value = val2
    return n


def __ror__(self, n):
    val1 = self.value

    if isinstance(n, int):
        n |= val1
        return n

    val2 = n.value
    val2 |= val1

    n.value = val2
    return n


def __rxor__(self, n):
    val1 = self.value

    if isinstance(n, int):
        n ^= val1
        return n

    val2 = n.value
    val2 ^= val1
    n.value = val2
    return n


def __rlshift__(self, n):
    val1 = self.value

    if isinstance(n, int):
        n <<= val1
        return n

    val2 = n.value
    val2 <<= val1
    n.value = val2
    return n


def __rrshift__(self, n):
    val1 = self.value

    if isinstance(n, int):
        n >>= val1
        return n

    val2 = n.value
    val2 >>= val1
    n.value = val2
    return n


def __eq__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return x == val1

    val2 = x.value
    return val2 == val1


def __ne__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return x != val1

    val2 = x.value
    return val2 != val1


def __lt__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 < x

    val2 = x.value
    return val1 < val2


def __le__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 <= x

    val2 = x.value
    return val1 <= val2


def __gt__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 > x

    val2 = x.value
    return val1 > val2


def __ge__(self, x):
    val1 = self.value

    if isinstance(x, (int, float)):
        return val1 >= x

    val2 = x.value
    return val1 >= val2


def __float__(self):
    val1 = self.value

    return float(val1)


def __int__(self) -> int:
    return self.value


def __bool__(self) -> bool:
    return bool(self.value)


def __format__(self, format_spec):
    return int.__fordef __format__(self, format_spec):
    return int.__format__(self.value, format_spec)mat__(self.value, format_spec)


class uint8_t(_ctypes.c_uint8, __PyObjectStore):
    _c_obj = None


class uint16_t(_ctypes.c_uint16, __PyObjectStore):
    _c_obj = None


class uint32_t(_ctypes.c_uint32, __PyObjectStore):
    _c_obj = None


class uint64_t(_ctypes.c_uint64, __PyObjectStore):
    _c_obj = None


class int8_t(_ctypes.c_int8, __PyObjectStore):
    _c_obj = None


class int16_t(_ctypes.c_int16, __PyObjectStore):
    _c_obj = None


class int32_t(_ctypes.c_int32, __PyObjectStore):
    _c_obj = None


class int64_t(_ctypes.c_int64, __PyObjectStore):
    _c_obj = None


class int_t(_ctypes.c_int, __PyObjectStore):
    _c_obj = None


class size_t(_ctypes.c_size_t, __PyObjectStore):
    _c_obj = None


if sys.maxsize > 2 ** 32:
    class uintptr_t(_ctypes.c_uint64, __PyObjectStore):
        _c_obj = None


    class intptr_t(_ctypes.c_int64, __PyObjectStore):
        _c_obj = None

else:
    class uintptr_t(_ctypes.c_uint32, __PyObjectStore):
        _c_obj = None


    class intptr_t(_ctypes.c_int32, __PyObjectStore):
        _c_obj = None
    

setattr(uint8_t, '__neg__', __neg__)
setattr(uint8_t, '__add__', __add__)
setattr(uint8_t, '__sub__', __sub__)
setattr(uint8_t, '__mul__', __mul__)
setattr(uint8_t, '__floordiv__', __floordiv__)
setattr(uint8_t, '__truediv__', __truediv__)
setattr(uint8_t, '__mod__', __mod__)
setattr(uint8_t, '__divmod__', __divmod__)
setattr(uint8_t, '__radd__', __radd__)
setattr(uint8_t, '__rsub__', __rsub__)
setattr(uint8_t, '__rmul__', __rmul__)
setattr(uint8_t, '__rfloordiv__', __rfloordiv__)
setattr(uint8_t, '__rtruediv__', __rtruediv__)
setattr(uint8_t, '__rmod__', __rmod__)
setattr(uint8_t, '__pow__', __pow__)
setattr(uint8_t, '__and__', __and__)
setattr(uint8_t, '__or__', __or__)
setattr(uint8_t, '__xor__', __xor__)
setattr(uint8_t, '__lshift__', __lshift__)
setattr(uint8_t, '__rshift__', __rshift__)
setattr(uint8_t, '__rand__', __rand__)
setattr(uint8_t, '__ror__', __ror__)
setattr(uint8_t, '__rxor__', __rxor__)
setattr(uint8_t, '__rlshift__', __rlshift__)
setattr(uint8_t, '__rrshift__', __rrshift__)
setattr(uint8_t, '__eq__', __eq__)
setattr(uint8_t, '__ne__', __ne__)
setattr(uint8_t, '__lt__', __lt__)
setattr(uint8_t, '__le__', __le__)
setattr(uint8_t, '__gt__', __gt__)
setattr(uint8_t, '__ge__', __ge__)
setattr(uint8_t, '__float__', __float__)
setattr(uint8_t, '__int__', __int__)
setattr(uint8_t, '__bool__', __bool__)
setattr(uint8_t, '__format__', __format__)

setattr(uint16_t, '__neg__', __neg__)
setattr(uint16_t, '__add__', __add__)
setattr(uint16_t, '__sub__', __sub__)
setattr(uint16_t, '__mul__', __mul__)
setattr(uint16_t, '__floordiv__', __floordiv__)
setattr(uint16_t, '__truediv__', __truediv__)
setattr(uint16_t, '__mod__', __mod__)
setattr(uint16_t, '__divmod__', __divmod__)
setattr(uint16_t, '__radd__', __radd__)
setattr(uint16_t, '__rsub__', __rsub__)
setattr(uint16_t, '__rmul__', __rmul__)
setattr(uint16_t, '__rfloordiv__', __rfloordiv__)
setattr(uint16_t, '__rtruediv__', __rtruediv__)
setattr(uint16_t, '__rmod__', __rmod__)
setattr(uint16_t, '__pow__', __pow__)
setattr(uint16_t, '__and__', __and__)
setattr(uint16_t, '__or__', __or__)
setattr(uint16_t, '__xor__', __xor__)
setattr(uint16_t, '__lshift__', __lshift__)
setattr(uint16_t, '__rshift__', __rshift__)
setattr(uint16_t, '__rand__', __rand__)
setattr(uint16_t, '__ror__', __ror__)
setattr(uint16_t, '__rxor__', __rxor__)
setattr(uint16_t, '__rlshift__', __rlshift__)
setattr(uint16_t, '__rrshift__', __rrshift__)
setattr(uint16_t, '__eq__', __eq__)
setattr(uint16_t, '__ne__', __ne__)
setattr(uint16_t, '__lt__', __lt__)
setattr(uint16_t, '__le__', __le__)
setattr(uint16_t, '__gt__', __gt__)
setattr(uint16_t, '__ge__', __ge__)
setattr(uint16_t, '__float__', __float__)
setattr(uint16_t, '__int__', __int__)
setattr(uint16_t, '__bool__', __bool__)
setattr(uint16_t, '__format__', __format__)

setattr(uint32_t, '__neg__', __neg__)
setattr(uint32_t, '__add__', __add__)
setattr(uint32_t, '__sub__', __sub__)
setattr(uint32_t, '__mul__', __mul__)
setattr(uint32_t, '__floordiv__', __floordiv__)
setattr(uint32_t, '__truediv__', __truediv__)
setattr(uint32_t, '__mod__', __mod__)
setattr(uint32_t, '__divmod__', __divmod__)
setattr(uint32_t, '__radd__', __radd__)
setattr(uint32_t, '__rsub__', __rsub__)
setattr(uint32_t, '__rmul__', __rmul__)
setattr(uint32_t, '__rfloordiv__', __rfloordiv__)
setattr(uint32_t, '__rtruediv__', __rtruediv__)
setattr(uint32_t, '__rmod__', __rmod__)
setattr(uint32_t, '__pow__', __pow__)
setattr(uint32_t, '__and__', __and__)
setattr(uint32_t, '__or__', __or__)
setattr(uint32_t, '__xor__', __xor__)
setattr(uint32_t, '__lshift__', __lshift__)
setattr(uint32_t, '__rshift__', __rshift__)
setattr(uint32_t, '__rand__', __rand__)
setattr(uint32_t, '__ror__', __ror__)
setattr(uint32_t, '__rxor__', __rxor__)
setattr(uint32_t, '__rlshift__', __rlshift__)
setattr(uint32_t, '__rrshift__', __rrshift__)
setattr(uint32_t, '__eq__', __eq__)
setattr(uint32_t, '__ne__', __ne__)
setattr(uint32_t, '__lt__', __lt__)
setattr(uint32_t, '__le__', __le__)
setattr(uint32_t, '__gt__', __gt__)
setattr(uint32_t, '__ge__', __ge__)
setattr(uint32_t, '__float__', __float__)
setattr(uint32_t, '__int__', __int__)
setattr(uint32_t, '__bool__', __bool__)
setattr(uint32_t, '__format__', __format__)

setattr(uint64_t, '__neg__', __neg__)
setattr(uint64_t, '__add__', __add__)
setattr(uint64_t, '__sub__', __sub__)
setattr(uint64_t, '__mul__', __mul__)
setattr(uint64_t, '__floordiv__', __floordiv__)
setattr(uint64_t, '__truediv__', __truediv__)
setattr(uint64_t, '__mod__', __mod__)
setattr(uint64_t, '__divmod__', __divmod__)
setattr(uint64_t, '__radd__', __radd__)
setattr(uint64_t, '__rsub__', __rsub__)
setattr(uint64_t, '__rmul__', __rmul__)
setattr(uint64_t, '__rfloordiv__', __rfloordiv__)
setattr(uint64_t, '__rtruediv__', __rtruediv__)
setattr(uint64_t, '__rmod__', __rmod__)
setattr(uint64_t, '__pow__', __pow__)
setattr(uint64_t, '__and__', __and__)
setattr(uint64_t, '__or__', __or__)
setattr(uint64_t, '__xor__', __xor__)
setattr(uint64_t, '__lshift__', __lshift__)
setattr(uint64_t, '__rshift__', __rshift__)
setattr(uint64_t, '__rand__', __rand__)
setattr(uint64_t, '__ror__', __ror__)
setattr(uint64_t, '__rxor__', __rxor__)
setattr(uint64_t, '__rlshift__', __rlshift__)
setattr(uint64_t, '__rrshift__', __rrshift__)
setattr(uint64_t, '__eq__', __eq__)
setattr(uint64_t, '__ne__', __ne__)
setattr(uint64_t, '__lt__', __lt__)
setattr(uint64_t, '__le__', __le__)
setattr(uint64_t, '__gt__', __gt__)
setattr(uint64_t, '__ge__', __ge__)
setattr(uint64_t, '__float__', __float__)
setattr(uint64_t, '__int__', __int__)
setattr(uint64_t, '__bool__', __bool__)
setattr(uint64_t, '__format__', __format__)

setattr(int8_t, '__neg__', __neg__)
setattr(int8_t, '__add__', __add__)
setattr(int8_t, '__sub__', __sub__)
setattr(int8_t, '__mul__', __mul__)
setattr(int8_t, '__floordiv__', __floordiv__)
setattr(int8_t, '__truediv__', __truediv__)
setattr(int8_t, '__mod__', __mod__)
setattr(int8_t, '__divmod__', __divmod__)
setattr(int8_t, '__radd__', __radd__)
setattr(int8_t, '__rsub__', __rsub__)
setattr(int8_t, '__rmul__', __rmul__)
setattr(int8_t, '__rfloordiv__', __rfloordiv__)
setattr(int8_t, '__rtruediv__', __rtruediv__)
setattr(int8_t, '__rmod__', __rmod__)
setattr(int8_t, '__pow__', __pow__)
setattr(int8_t, '__and__', __and__)
setattr(int8_t, '__or__', __or__)
setattr(int8_t, '__xor__', __xor__)
setattr(int8_t, '__lshift__', __lshift__)
setattr(int8_t, '__rshift__', __rshift__)
setattr(int8_t, '__rand__', __rand__)
setattr(int8_t, '__ror__', __ror__)
setattr(int8_t, '__rxor__', __rxor__)
setattr(int8_t, '__rlshift__', __rlshift__)
setattr(int8_t, '__rrshift__', __rrshift__)
setattr(int8_t, '__eq__', __eq__)
setattr(int8_t, '__ne__', __ne__)
setattr(int8_t, '__lt__', __lt__)
setattr(int8_t, '__le__', __le__)
setattr(int8_t, '__gt__', __gt__)
setattr(int8_t, '__ge__', __ge__)
setattr(int8_t, '__float__', __float__)
setattr(int8_t, '__int__', __int__)
setattr(int8_t, '__bool__', __bool__)
setattr(int8_t, '__format__', __format__)

setattr(int16_t, '__neg__', __neg__)
setattr(int16_t, '__add__', __add__)
setattr(int16_t, '__sub__', __sub__)
setattr(int16_t, '__mul__', __mul__)
setattr(int16_t, '__floordiv__', __floordiv__)
setattr(int16_t, '__truediv__', __truediv__)
setattr(int16_t, '__mod__', __mod__)
setattr(int16_t, '__divmod__', __divmod__)
setattr(int16_t, '__radd__', __radd__)
setattr(int16_t, '__rsub__', __rsub__)
setattr(int16_t, '__rmul__', __rmul__)
setattr(int16_t, '__rfloordiv__', __rfloordiv__)
setattr(int16_t, '__rtruediv__', __rtruediv__)
setattr(int16_t, '__rmod__', __rmod__)
setattr(int16_t, '__pow__', __pow__)
setattr(int16_t, '__and__', __and__)
setattr(int16_t, '__or__', __or__)
setattr(int16_t, '__xor__', __xor__)
setattr(int16_t, '__lshift__', __lshift__)
setattr(int16_t, '__rshift__', __rshift__)
setattr(int16_t, '__rand__', __rand__)
setattr(int16_t, '__ror__', __ror__)
setattr(int16_t, '__rxor__', __rxor__)
setattr(int16_t, '__rlshift__', __rlshift__)
setattr(int16_t, '__rrshift__', __rrshift__)
setattr(int16_t, '__eq__', __eq__)
setattr(int16_t, '__ne__', __ne__)
setattr(int16_t, '__lt__', __lt__)
setattr(int16_t, '__le__', __le__)
setattr(int16_t, '__gt__', __gt__)
setattr(int16_t, '__ge__', __ge__)
setattr(int16_t, '__float__', __float__)
setattr(int16_t, '__int__', __int__)
setattr(int16_t, '__bool__', __bool__)
setattr(int16_t, '__format__', __format__)

setattr(int32_t, '__neg__', __neg__)
setattr(int32_t, '__add__', __add__)
setattr(int32_t, '__sub__', __sub__)
setattr(int32_t, '__mul__', __mul__)
setattr(int32_t, '__floordiv__', __floordiv__)
setattr(int32_t, '__truediv__', __truediv__)
setattr(int32_t, '__mod__', __mod__)
setattr(int32_t, '__divmod__', __divmod__)
setattr(int32_t, '__radd__', __radd__)
setattr(int32_t, '__rsub__', __rsub__)
setattr(int32_t, '__rmul__', __rmul__)
setattr(int32_t, '__rfloordiv__', __rfloordiv__)
setattr(int32_t, '__rtruediv__', __rtruediv__)
setattr(int32_t, '__rmod__', __rmod__)
setattr(int32_t, '__pow__', __pow__)
setattr(int32_t, '__and__', __and__)
setattr(int32_t, '__or__', __or__)
setattr(int32_t, '__xor__', __xor__)
setattr(int32_t, '__lshift__', __lshift__)
setattr(int32_t, '__rshift__', __rshift__)
setattr(int32_t, '__rand__', __rand__)
setattr(int32_t, '__ror__', __ror__)
setattr(int32_t, '__rxor__', __rxor__)
setattr(int32_t, '__rlshift__', __rlshift__)
setattr(int32_t, '__rrshift__', __rrshift__)
setattr(int32_t, '__eq__', __eq__)
setattr(int32_t, '__ne__', __ne__)
setattr(int32_t, '__lt__', __lt__)
setattr(int32_t, '__le__', __le__)
setattr(int32_t, '__gt__', __gt__)
setattr(int32_t, '__ge__', __ge__)
setattr(int32_t, '__float__', __float__)
setattr(int32_t, '__int__', __int__)
setattr(int32_t, '__bool__', __bool__)
setattr(int32_t, '__format__', __format__)

setattr(int64_t, '__neg__', __neg__)
setattr(int64_t, '__add__', __add__)
setattr(int64_t, '__sub__', __sub__)
setattr(int64_t, '__mul__', __mul__)
setattr(int64_t, '__floordiv__', __floordiv__)
setattr(int64_t, '__truediv__', __truediv__)
setattr(int64_t, '__mod__', __mod__)
setattr(int64_t, '__divmod__', __divmod__)
setattr(int64_t, '__radd__', __radd__)
setattr(int64_t, '__rsub__', __rsub__)
setattr(int64_t, '__rmul__', __rmul__)
setattr(int64_t, '__rfloordiv__', __rfloordiv__)
setattr(int64_t, '__rtruediv__', __rtruediv__)
setattr(int64_t, '__rmod__', __rmod__)
setattr(int64_t, '__pow__', __pow__)
setattr(int64_t, '__and__', __and__)
setattr(int64_t, '__or__', __or__)
setattr(int64_t, '__xor__', __xor__)
setattr(int64_t, '__lshift__', __lshift__)
setattr(int64_t, '__rshift__', __rshift__)
setattr(int64_t, '__rand__', __rand__)
setattr(int64_t, '__ror__', __ror__)
setattr(int64_t, '__rxor__', __rxor__)
setattr(int64_t, '__rlshift__', __rlshift__)
setattr(int64_t, '__rrshift__', __rrshift__)
setattr(int64_t, '__eq__', __eq__)
setattr(int64_t, '__ne__', __ne__)
setattr(int64_t, '__lt__', __lt__)
setattr(int64_t, '__le__', __le__)
setattr(int64_t, '__gt__', __gt__)
setattr(int64_t, '__ge__', __ge__)
setattr(int64_t, '__float__', __float__)
setattr(int64_t, '__int__', __int__)
setattr(int64_t, '__bool__', __bool__)
setattr(int64_t, '__format__', __format__)

setattr(int_t, '__neg__', __neg__)
setattr(int_t, '__add__', __add__)
setattr(int_t, '__sub__', __sub__)
setattr(int_t, '__mul__', __mul__)
setattr(int_t, '__floordiv__', __floordiv__)
setattr(int_t, '__truediv__', __truediv__)
setattr(int_t, '__mod__', __mod__)
setattr(int_t, '__divmod__', __divmod__)
setattr(int_t, '__radd__', __radd__)
setattr(int_t, '__rsub__', __rsub__)
setattr(int_t, '__rmul__', __rmul__)
setattr(int_t, '__rfloordiv__', __rfloordiv__)
setattr(int_t, '__rtruediv__', __rtruediv__)
setattr(int_t, '__rmod__', __rmod__)
setattr(int_t, '__pow__', __pow__)
setattr(int_t, '__and__', __and__)
setattr(int_t, '__or__', __or__)
setattr(int_t, '__xor__', __xor__)
setattr(int_t, '__lshift__', __lshift__)
setattr(int_t, '__rshift__', __rshift__)
setattr(int_t, '__rand__', __rand__)
setattr(int_t, '__ror__', __ror__)
setattr(int_t, '__rxor__', __rxor__)
setattr(int_t, '__rlshift__', __rlshift__)
setattr(int_t, '__rrshift__', __rrshift__)
setattr(int_t, '__eq__', __eq__)
setattr(int_t, '__ne__', __ne__)
setattr(int_t, '__lt__', __lt__)
setattr(int_t, '__le__', __le__)
setattr(int_t, '__gt__', __gt__)
setattr(int_t, '__ge__', __ge__)
setattr(int_t, '__float__', __float__)
setattr(int_t, '__int__', __int__)
setattr(int_t, '__bool__', __bool__)
setattr(int_t, '__format__', __format__)

setattr(size_t, '__neg__', __neg__)
setattr(size_t, '__add__', __add__)
setattr(size_t, '__sub__', __sub__)
setattr(size_t, '__mul__', __mul__)
setattr(size_t, '__floordiv__', __floordiv__)
setattr(size_t, '__truediv__', __truediv__)
setattr(size_t, '__mod__', __mod__)
setattr(size_t, '__divmod__', __divmod__)
setattr(size_t, '__radd__', __radd__)
setattr(size_t, '__rsub__', __rsub__)
setattr(size_t, '__rmul__', __rmul__)
setattr(size_t, '__rfloordiv__', __rfloordiv__)
setattr(size_t, '__rtruediv__', __rtruediv__)
setattr(size_t, '__rmod__', __rmod__)
setattr(size_t, '__pow__', __pow__)
setattr(size_t, '__and__', __and__)
setattr(size_t, '__or__', __or__)
setattr(size_t, '__xor__', __xor__)
setattr(size_t, '__lshift__', __lshift__)
setattr(size_t, '__rshift__', __rshift__)
setattr(size_t, '__rand__', __rand__)
setattr(size_t, '__ror__', __ror__)
setattr(size_t, '__rxor__', __rxor__)
setattr(size_t, '__rlshift__', __rlshift__)
setattr(size_t, '__rrshift__', __rrshift__)
setattr(size_t, '__eq__', __eq__)
setattr(size_t, '__ne__', __ne__)
setattr(size_t, '__lt__', __lt__)
setattr(size_t, '__le__', __le__)
setattr(size_t, '__gt__', __gt__)
setattr(size_t, '__ge__', __ge__)
setattr(size_t, '__float__', __float__)
setattr(size_t, '__int__', __int__)
setattr(size_t, '__bool__', __bool__)
setattr(size_t, '__format__', __format__)

setattr(uintptr_t, '__neg__', __neg__)
setattr(uintptr_t, '__add__', __add__)
setattr(uintptr_t, '__sub__', __sub__)
setattr(uintptr_t, '__mul__', __mul__)
setattr(uintptr_t, '__floordiv__', __floordiv__)
setattr(uintptr_t, '__truediv__', __truediv__)
setattr(uintptr_t, '__mod__', __mod__)
setattr(uintptr_t, '__divmod__', __divmod__)
setattr(uintptr_t, '__radd__', __radd__)
setattr(uintptr_t, '__rsub__', __rsub__)
setattr(uintptr_t, '__rmul__', __rmul__)
setattr(uintptr_t, '__rfloordiv__', __rfloordiv__)
setattr(uintptr_t, '__rtruediv__', __rtruediv__)
setattr(uintptr_t, '__rmod__', __rmod__)
setattr(uintptr_t, '__pow__', __pow__)
setattr(uintptr_t, '__and__', __and__)
setattr(uintptr_t, '__or__', __or__)
setattr(uintptr_t, '__xor__', __xor__)
setattr(uintptr_t, '__lshift__', __lshift__)
setattr(uintptr_t, '__rshift__', __rshift__)
setattr(uintptr_t, '__rand__', __rand__)
setattr(uintptr_t, '__ror__', __ror__)
setattr(uintptr_t, '__rxor__', __rxor__)
setattr(uintptr_t, '__rlshift__', __rlshift__)
setattr(uintptr_t, '__rrshift__', __rrshift__)
setattr(uintptr_t, '__eq__', __eq__)
setattr(uintptr_t, '__ne__', __ne__)
setattr(uintptr_t, '__lt__', __lt__)
setattr(uintptr_t, '__le__', __le__)
setattr(uintptr_t, '__gt__', __gt__)
setattr(uintptr_t, '__ge__', __ge__)
setattr(uintptr_t, '__float__', __float__)
setattr(uintptr_t, '__int__', __int__)
setattr(uintptr_t, '__bool__', __bool__)
setattr(uintptr_t, '__format__', __format__)

setattr(intptr_t, '__neg__', __neg__)
setattr(intptr_t, '__add__', __add__)
setattr(intptr_t, '__sub__', __sub__)
setattr(intptr_t, '__mul__', __mul__)
setattr(intptr_t, '__floordiv__', __floordiv__)
setattr(intptr_t, '__truediv__', __truediv__)
setattr(intptr_t, '__mod__', __mod__)
setattr(intptr_t, '__divmod__', __divmod__)
setattr(intptr_t, '__radd__', __radd__)
setattr(intptr_t, '__rsub__', __rsub__)
setattr(intptr_t, '__rmul__', __rmul__)
setattr(intptr_t, '__rfloordiv__', __rfloordiv__)
setattr(intptr_t, '__rtruediv__', __rtruediv__)
setattr(intptr_t, '__rmod__', __rmod__)
setattr(intptr_t, '__pow__', __pow__)
setattr(intptr_t, '__and__', __and__)
setattr(intptr_t, '__or__', __or__)
setattr(intptr_t, '__xor__', __xor__)
setattr(intptr_t, '__lshift__', __lshift__)
setattr(intptr_t, '__rshift__', __rshift__)
setattr(intptr_t, '__rand__', __rand__)
setattr(intptr_t, '__ror__', __ror__)
setattr(intptr_t, '__rxor__', __rxor__)
setattr(intptr_t, '__rlshift__', __rlshift__)
setattr(intptr_t, '__rrshift__', __rrshift__)
setattr(intptr_t, '__eq__', __eq__)
setattr(intptr_t, '__ne__', __ne__)
setattr(intptr_t, '__lt__', __lt__)
setattr(intptr_t, '__le__', __le__)
setattr(intptr_t, '__gt__', __gt__)
setattr(intptr_t, '__ge__', __ge__)
setattr(intptr_t, '__float__', __float__)
setattr(intptr_t, '__int__', __int__)
setattr(intptr_t, '__bool__', __bool__)
setattr(intptr_t, '__format__', __format__)


del __neg__ 
del __add__ 
del __sub__ 
del __mul__ 
del __floordiv__ 
del __truediv__ 
del __mod__ 
del __divmod__ 
del __radd__ 
del __rsub__ 
del __rmul__ 
del __rfloordiv__ 
del __rtruediv__ 
del __rmod__ 
del __pow__ 
del __and__ 
del __or__ 
del __xor__ 
del __lshift__ 
del __rshift__ 
del __rand__ 
del __ror__ 
del __rxor__ 
del __rlshift__ 
del __rrshift__ 
del __eq__ 
del __ne__ 
del __lt__ 
del __le__ 
del __gt__ 
del __ge__ 
del __float__ 
del __int__ 
del __bool__ 
del __format__ 

_type_float_t = Union[float_t, float]
_type_string_t = Union[string_t, str]
_type_bool_t = Union[bool_t, bool]
_type_uint8_t = Union[uint8_t, int]
_type_uint16_t = Union[uint16_t, int]
_type_uint32_t = Union[uint32_t, int]
_type_uint64_t = Union[uint64_t, int]
_type_int8_t = Union[int8_t, int]
_type_int16_t = Union[int16_t, int]
_type_int32_t = Union[int32_t, int]
_type_int64_t = Union[int64_t, int]
_type_int_t = Union[int_t, int]
_type_char_t = Union[char_t, bytes, int]
_type_uintptr_t = Union[uintptr_t, int]
_type_intptr_t = Union[intptr_t, int]
_type_size_t = Union[size_t, int]


# this is kind of a goofy wrapper.
# when setting the types for the functions in the dynamic library this
# gets done using a list. There is a choice to be made where I would place all
# of the python function parameters and iterate over an enumeration of the
# parameters aand use the index to be able to access the type that gets set to
# the c function. The issue there is performance. list iteraation is not the
# fastest thing in the world to do.
#
# second choice since I know the function parameter names is to add those names
# and their associated ctype to the list as attributes. This way I do not have
# to iterate over a list and I am able to collect the type using the parameter
# name
# Here is an example.

# this is where the types get set to the C function
# _lib_lvgl.lv_switch_create.argtypes = CArgList(parent=_ctypes.POINTER(_obj_t))
# _lib_lvgl.lv_switch_create.restype = _ctypes.POINTER(_obj_t)

# and here is the python function
# def switch_create(parent: obj_t) -> obj_t:
#     parent_type = _lib_lvgl.lv_switch_create.argtypes.parent
#
#     if isinstance(parent_type, _PyCPointerType):
#         if not isinstance(parent, _CArgObject):
#             parent = _ctypes.byref(parent)
#
#     res = _lib_lvgl.lv_switch_create(parent)
#
#     while isinstance(type(res), _PyCPointerType):
#         res = res.contents
#
#     try:
#         res = res.value
#     except AttributeError:
#         pass
#
#     return res

# there is additional code but as a truncated version that gives the basic idea
# of what is happening.

class __CArgList(object):

    @classmethod
    def __new__(cls, *args, **kwargs):
        param_names = []
        param_types = []

        for key, value in kwargs.items():
            param_names.append(key)
            param_types.append(value)

        new_cls = type('CArgList', (list,), kwargs)
        return new_cls(param_types)


def _strip_pointer(obj):
    new_obj = obj

    while type(new_obj) == _PyCPointerType:
        if type(new_obj._type_) == _PyCStructType:  # NOQA
            return new_obj._type_  # NOQA

        new_obj = new_obj._type_  # NOQA

    return new_obj


def _pointer_count(obj):
    count = 0
    while type(obj) == _PyCPointerType:
        count += 1
        if type(obj._type_) == _PyCStructType:  # NOQA
            return count

        obj = obj._type_  # NOQA
    return count


def _convert_to_py_type(obj, type_=None, pointer_count=None):
    while True:
        try:
            obj = obj.contents
        except:
            break

    try:
        return obj.value
    except:  # NOQA
        pass

    return obj


def _convert_to_ctype(obj, type_):
    if obj is None:
        return None

    p_count = _pointer_count(type_)
    type_ = _strip_pointer(type_)

    if isinstance(obj, bytearray):
        type_ = type_ * len(obj)
        return type_.from_buffer(obj)

    if isinstance(obj, str):
        obj = obj.encode('utf-8')

        if not obj.endswith(b'\x00'):
            obj += b'\x00'

        type_ = type_ * len(obj)
        return type_(*obj)

    if isinstance(obj, bytes):
        type_ = type_ * len(obj)
        return type_(*obj)

    if isinstance(obj, (list, tuple)):
        type_ = type_ * len(obj)
        return type_(*obj)

    if not isinstance(obj, type_):
        if isinstance(obj, (_Structure, _Union)):
            if p_count:
                return _ctypes.byref(obj)

            return _ctypes.cast(
                _ctypes.pointer(obj),
                _ctypes.POINTER(type_)
            ).contents

        if type(type(obj)) == _PyCSimpleType:
            return _ctypes.cast(_ctypes.pointer(obj), _ctypes.POINTER(type_)).contents

        print('OBJ_TYPE:', type(obj), type_)

        if isinstance(obj, (int, float)):
            obj = type_(obj)

        else:
            return type_(obj.value)

    return obj


def CFUNCTYPE(restype, *argtypes):

    class _CallbackFunction(_ctypes._CFuncPtr):  # NOQA
        _argtypes_ = argtypes
        _restype_ = restype
        _flags_ = _ctypes._FUNCFLAG_CDECL  # NOQA
        _func_ = None

        @classmethod
        def __new__(cls, self, func):
            cls._func_ = func
            return super().__new__(self, cls._callback)

        @classmethod
        def _callback(cls, *args):
            args = list(args)
            py_args = []
            for i, arg in enumerate(args):
                argtype = cls._argtypes_[i]

                if argtype == void_t and isinstance(arg, void_t) and arg:
                    py_arg = arg.value
                else:

                    py_arg = _convert_to_py_type(
                        arg,
                        _strip_pointer(argtype),
                        pointer_count=_pointer_count(argtype)
                    )

                py_args.append(py_arg)

            if cls._restype_ is None:
                cls._func_(*py_args)
                return None

            res = cls._func_(*py_args)

            print('CALLABACK RETURN:', type(res), res.value, cls._restype_)

            return res.value

    return _CallbackFunction


def main_loop():
    if not is_initialized():  # NOQA
        raise RuntimeError('lvgl is not initialized')

    import time

    start = time.time()

    while True:
        stop = time.time()
        diff = int((stop * 1000) - (start * 1000))

        if diff >= 2:
            start = stop
            tick_inc(diff)  # NOQA
            task_handler()  # NOQA


# This next code block overrides the default imnport machinery in Python
# This allows me to inject a non existant module into the import system.
# the "dynamic" module being injected is the display_driver module that runs
# the code to create the SDL window, mouse and keyboard drivers

__SDL_DISPLAY = None

import os  # NOQA

from importlib.abc import (  # NOQA
    Loader as __Loader,
    MetaPathFinder as __MetaPathFinder
)

from importlib.util import (  # NOQA
    spec_from_file_location as __spec_from_file_location
)


class __MyMetaFinder(__MetaPathFinder):

    def find_spec(self, fullname, path, target=None):
        if fullname == 'display_driver':
            return globals()['__spec_from_file_location'](
                fullname,
                f"{fullname}.py",
                loader=globals()['__MyLoader'](fullname),
                submodule_search_locations=None
            )

        if path is None or path == "":
            path = [os.getcwd()]  # top level import --
        if "." in fullname:
            *parents, name = fullname.split(".")
        else:
            name = fullname
        for entry in path:
            if os.path.isdir(os.path.join(entry, name)):
                # this module has child modules
                filename = os.path.join(entry, name, "__init__.py")
                submodule_locations = [os.path.join(entry, name)]
            else:
                filename = os.path.join(entry, f"{name}.py")
                submodule_locations = None
            if not os.path.exists(filename):
                continue

            return globals()['__spec_from_file_location'](
                fullname,
                filename,
                loader=globals()['__MyLoader'](filename),
                submodule_search_locations=submodule_locations
            )

        return None  # we don't know how to import this


class __MyLoader(__Loader):

    def __init__(self, filename):
        self.filename = filename

    def create_module(self, spec):
        return None  # use default module creation semantics

    def exec_module(self, module):
        if self.filename != 'display_driver':
            data = pathlib.Path(self.filename).read_text()
        elif globals()['__SDL_DISPLAY'] is None:
            data = [
                'import lvgl',
                'if not lvgl.is_initialized():',
                '    lvgl.init()',
                '',
                'display = lvgl.sdl_window_create(480, 320)',
                'mouse = lvgl.sdl_mouse_create()',
                'keyboard = lvgl.sdl_keyboard_create()'
            ]

            data = '\n'.join(data)
        else:
            data = ''

        exec(data, vars(module))


sys.meta_path.insert(0, __MyMetaFinder())

del sys


# ****************  INTEGER_TYPES  ****************
class res_t(uint8_t):
    pass


class log_level_t(int8_t):
    pass


class anim_enable_t(int_t):
    pass


class coord_t(int32_t):
    pass


class align_t(uint8_t):
    pass


class dir_t(uint8_t):
    pass


class font_subpx_t(uint8_t):
    pass


class opa_t(uint8_t):
    pass


class color_format_t(uint8_t):
    pass


class palette_t(int_t):
    pass


class text_flag_t(uint8_t):
    pass


class text_align_t(uint8_t):
    pass


class base_dir_t(uint8_t):
    pass


class blend_mode_t(uint8_t):
    pass


class text_decor_t(uint8_t):
    pass


class border_side_t(uint8_t):
    pass


class grad_dir_t(uint8_t):
    pass


class dither_mode_t(uint8_t):
    pass


class style_prop_t(uint16_t):
    pass


class style_res_t(uint8_t):
    pass


class state_t(uint16_t):
    pass


class part_t(uint32_t):
    pass


class _obj_flag_t(int_t):
    pass


class obj_flag_t(uint32_t):
    pass


class event_code_t(int_t):
    pass


class fs_res_t(uint8_t):
    pass


class fs_mode_t(uint8_t):
    pass


class fs_whence_t(int_t):
    pass


class img_src_t(uint8_t):
    pass


class draw_task_type_t(int_t):
    pass


class draw_task_state_t(int_t):
    pass


class draw_letter_bitmap_format_t(int_t):
    pass


class disp_rotation_t(int_t):
    pass


class disp_render_mode_t(int_t):
    pass


class scr_load_anim_t(int_t):
    pass


class obj_tree_walk_res_t(int_t):
    pass


class scrollbar_mode_t(uint8_t):
    pass


class scroll_snap_t(uint8_t):
    pass


class _style_state_cmp_t(int_t):
    pass


class style_selector_t(uint32_t):
    pass


class layer_type_t(int_t):
    pass


class obj_class_editable_t(int_t):
    pass


class obj_class_group_def_t(int_t):
    pass


class obj_class_theme_inheritable_t(int_t):
    pass


class ll_node_t(uint8_t):
    pass


class key_t(uint8_t):
    pass


class group_refocus_policy_t(int_t):
    pass


class indev_type_t(int_t):
    pass


class indev_state_t(int_t):
    pass


class cover_res_t(int_t):
    pass


class font_fmt_txt_cmap_type_t(uint8_t):
    pass


class font_fmt_txt_bitmap_format_t(int_t):
    pass


class img_size_mode_t(uint8_t):
    pass


class animimg_part_t(uint8_t):
    pass


class arc_mode_t(uint8_t):
    pass


class label_long_mode_t(uint8_t):
    pass


class bar_mode_t(uint8_t):
    pass


class btnmatrix_ctrl_t(uint16_t):
    pass


class chart_type_t(uint8_t):
    pass


class chart_update_mode_t(uint8_t):
    pass


class chart_axis_t(uint8_t):
    pass


class imgbtn_state_t(int_t):
    pass


class keyboard_mode_t(uint8_t):
    pass


class menu_mode_header_t(uint8_t):
    pass


class menu_mode_root_back_btn_t(uint8_t):
    pass


class meter_indicator_type_t(uint8_t):
    pass


class roller_mode_t(uint8_t):
    pass


class slider_mode_t(uint8_t):
    pass


class span_overflow_t(uint8_t):
    pass


class span_mode_t(uint8_t):
    pass


class table_cell_ctrl_t(uint8_t):
    pass


class _keep_pedantic_happy(int_t):
    pass


class gridnav_ctrl_t(int_t):
    pass


class msg_id_t(uintptr_t):
    pass


class ime_pinyin_mode_t(int_t):
    pass


class file_explorer_sort_t(int_t):
    pass


class file_explorer_dir_t(int_t):
    pass


class flex_align_t(int_t):
    pass


class flex_flow_t(int_t):
    pass


class grid_align_t(int_t):
    pass


class demo_benchmark_mode_t(int_t):
    pass
  # NOQA

_type_res_t = Union[res_t, uint8_t, int]
_type_log_level_t = Union[log_level_t, int8_t, int]
_type_anim_enable_t = Union[anim_enable_t, int_t, int]
_type_coord_t = Union[coord_t, int32_t, int]
_type_align_t = Union[align_t, uint8_t, int]
_type_dir_t = Union[dir_t, uint8_t, int]
_type_font_subpx_t = Union[font_subpx_t, uint8_t, int]
_type_opa_t = Union[opa_t, uint8_t, int]
_type_color_format_t = Union[color_format_t, uint8_t, int]
_type_palette_t = Union[palette_t, int_t, int]
_type_text_flag_t = Union[text_flag_t, uint8_t, int]
_type_text_align_t = Union[text_align_t, uint8_t, int]
_type_base_dir_t = Union[base_dir_t, uint8_t, int]
_type_blend_mode_t = Union[blend_mode_t, uint8_t, int]
_type_text_decor_t = Union[text_decor_t, uint8_t, int]
_type_border_side_t = Union[border_side_t, uint8_t, int]
_type_grad_dir_t = Union[grad_dir_t, uint8_t, int]
_type_dither_mode_t = Union[dither_mode_t, uint8_t, int]
_type_style_prop_t = Union[style_prop_t, uint16_t, int]
_type_style_res_t = Union[style_res_t, uint8_t, int]
_type_state_t = Union[state_t, uint16_t, int]
_type_part_t = Union[part_t, uint32_t, int]
_type__obj_flag_t = Union[_obj_flag_t, int_t, int]
_type_obj_flag_t = Union[obj_flag_t, uint32_t, int]
_type_event_code_t = Union[event_code_t, int_t, int]
_type_fs_res_t = Union[fs_res_t, uint8_t, int]
_type_fs_mode_t = Union[fs_mode_t, uint8_t, int]
_type_fs_whence_t = Union[fs_whence_t, int_t, int]
_type_img_src_t = Union[img_src_t, uint8_t, int]
_type_draw_task_type_t = Union[draw_task_type_t, int_t, int]
_type_draw_task_state_t = Union[draw_task_state_t, int_t, int]
_type_draw_letter_bitmap_format_t = Union[draw_letter_bitmap_format_t, int_t, int]
_type_disp_rotation_t = Union[disp_rotation_t, int_t, int]
_type_disp_render_mode_t = Union[disp_render_mode_t, int_t, int]
_type_scr_load_anim_t = Union[scr_load_anim_t, int_t, int]
_type_obj_tree_walk_res_t = Union[obj_tree_walk_res_t, int_t, int]
_type_scrollbar_mode_t = Union[scrollbar_mode_t, uint8_t, int]
_type_scroll_snap_t = Union[scroll_snap_t, uint8_t, int]
_type__style_state_cmp_t = Union[_style_state_cmp_t, int_t, int]
_type_style_selector_t = Union[style_selector_t, uint32_t, int]
_type_layer_type_t = Union[layer_type_t, int_t, int]
_type_obj_class_editable_t = Union[obj_class_editable_t, int_t, int]
_type_obj_class_group_def_t = Union[obj_class_group_def_t, int_t, int]
_type_obj_class_theme_inheritable_t = Union[obj_class_theme_inheritable_t, int_t, int]
_type_ll_node_t = Union[ll_node_t, uint8_t, int]
_type_key_t = Union[key_t, uint8_t, int]
_type_group_refocus_policy_t = Union[group_refocus_policy_t, int_t, int]
_type_indev_type_t = Union[indev_type_t, int_t, int]
_type_indev_state_t = Union[indev_state_t, int_t, int]
_type_cover_res_t = Union[cover_res_t, int_t, int]
_type_font_fmt_txt_cmap_type_t = Union[font_fmt_txt_cmap_type_t, uint8_t, int]
_type_font_fmt_txt_bitmap_format_t = Union[font_fmt_txt_bitmap_format_t, int_t, int]
_type_img_size_mode_t = Union[img_size_mode_t, uint8_t, int]
_type_animimg_part_t = Union[animimg_part_t, uint8_t, int]
_type_arc_mode_t = Union[arc_mode_t, uint8_t, int]
_type_label_long_mode_t = Union[label_long_mode_t, uint8_t, int]
_type_bar_mode_t = Union[bar_mode_t, uint8_t, int]
_type_btnmatrix_ctrl_t = Union[btnmatrix_ctrl_t, uint16_t, int]
_type_chart_type_t = Union[chart_type_t, uint8_t, int]
_type_chart_update_mode_t = Union[chart_update_mode_t, uint8_t, int]
_type_chart_axis_t = Union[chart_axis_t, uint8_t, int]
_type_imgbtn_state_t = Union[imgbtn_state_t, int_t, int]
_type_keyboard_mode_t = Union[keyboard_mode_t, uint8_t, int]
_type_menu_mode_header_t = Union[menu_mode_header_t, uint8_t, int]
_type_menu_mode_root_back_btn_t = Union[menu_mode_root_back_btn_t, uint8_t, int]
_type_meter_indicator_type_t = Union[meter_indicator_type_t, uint8_t, int]
_type_roller_mode_t = Union[roller_mode_t, uint8_t, int]
_type_slider_mode_t = Union[slider_mode_t, uint8_t, int]
_type_span_overflow_t = Union[span_overflow_t, uint8_t, int]
_type_span_mode_t = Union[span_mode_t, uint8_t, int]
_type_table_cell_ctrl_t = Union[table_cell_ctrl_t, uint8_t, int]
_type__keep_pedantic_happy = Union[_keep_pedantic_happy, int_t, int]
_type_gridnav_ctrl_t = Union[gridnav_ctrl_t, int_t, int]
_type_msg_id_t = Union[msg_id_t, uintptr_t, int]
_type_ime_pinyin_mode_t = Union[ime_pinyin_mode_t, int_t, int]
_type_file_explorer_sort_t = Union[file_explorer_sort_t, int_t, int]
_type_file_explorer_dir_t = Union[file_explorer_dir_t, int_t, int]
_type_flex_align_t = Union[flex_align_t, int_t, int]
_type_flex_flow_t = Union[flex_flow_t, int_t, int]
_type_grid_align_t = Union[grid_align_t, int_t, int]
_type_demo_benchmark_mode_t = Union[demo_benchmark_mode_t, int_t, int]  # NOQA
# ************************************************


# ****************  ENUMERATIONS  ****************
RES_INV: res_t = 0x0
RES_OK: res_t = 0x1

ANIM_OFF: anim_enable_t = 0x0
ANIM_ON: anim_enable_t = 0x1

_STR_SYMBOL_BULLET: uint8_t = 0x0
_STR_SYMBOL_AUDIO: uint8_t = 0x1
_STR_SYMBOL_VIDEO: uint8_t = 0x2
_STR_SYMBOL_LIST: uint8_t = 0x3
_STR_SYMBOL_OK: uint8_t = 0x4
_STR_SYMBOL_CLOSE: uint8_t = 0x5
_STR_SYMBOL_POWER: uint8_t = 0x6
_STR_SYMBOL_SETTINGS: uint8_t = 0x7
_STR_SYMBOL_HOME: uint8_t = 0x8
_STR_SYMBOL_DOWNLOAD: uint8_t = 0x9
_STR_SYMBOL_DRIVE: uint8_t = 0xA
_STR_SYMBOL_REFRESH: uint8_t = 0xB
_STR_SYMBOL_MUTE: uint8_t = 0xC
_STR_SYMBOL_VOLUME_MID: uint8_t = 0xD
_STR_SYMBOL_VOLUME_MAX: uint8_t = 0xE
_STR_SYMBOL_IMAGE: uint8_t = 0xF
_STR_SYMBOL_TINT: uint8_t = 0x10
_STR_SYMBOL_PREV: uint8_t = 0x11
_STR_SYMBOL_PLAY: uint8_t = 0x12
_STR_SYMBOL_PAUSE: uint8_t = 0x13
_STR_SYMBOL_STOP: uint8_t = 0x14
_STR_SYMBOL_NEXT: uint8_t = 0x15
_STR_SYMBOL_EJECT: uint8_t = 0x16
_STR_SYMBOL_LEFT: uint8_t = 0x17
_STR_SYMBOL_RIGHT: uint8_t = 0x18
_STR_SYMBOL_PLUS: uint8_t = 0x19
_STR_SYMBOL_MINUS: uint8_t = 0x1A
_STR_SYMBOL_EYE_OPEN: uint8_t = 0x1B
_STR_SYMBOL_EYE_CLOSE: uint8_t = 0x1C
_STR_SYMBOL_WARNING: uint8_t = 0x1D
_STR_SYMBOL_SHUFFLE: uint8_t = 0x1E
_STR_SYMBOL_UP: uint8_t = 0x1F
_STR_SYMBOL_DOWN: uint8_t = 0x20
_STR_SYMBOL_LOOP: uint8_t = 0x21
_STR_SYMBOL_DIRECTORY: uint8_t = 0x22
_STR_SYMBOL_UPLOAD: uint8_t = 0x23
_STR_SYMBOL_CALL: uint8_t = 0x24
_STR_SYMBOL_CUT: uint8_t = 0x25
_STR_SYMBOL_COPY: uint8_t = 0x26
_STR_SYMBOL_SAVE: uint8_t = 0x27
_STR_SYMBOL_BARS: uint8_t = 0x28
_STR_SYMBOL_ENVELOPE: uint8_t = 0x29
_STR_SYMBOL_CHARGE: uint8_t = 0x2A
_STR_SYMBOL_PASTE: uint8_t = 0x2B
_STR_SYMBOL_BELL: uint8_t = 0x2C
_STR_SYMBOL_KEYBOARD: uint8_t = 0x2D
_STR_SYMBOL_GPS: uint8_t = 0x2E
_STR_SYMBOL_FILE: uint8_t = 0x2F
_STR_SYMBOL_WIFI: uint8_t = 0x30
_STR_SYMBOL_BATTERY_FULL: uint8_t = 0x31
_STR_SYMBOL_BATTERY_3: uint8_t = 0x32
_STR_SYMBOL_BATTERY_2: uint8_t = 0x33
_STR_SYMBOL_BATTERY_1: uint8_t = 0x34
_STR_SYMBOL_BATTERY_EMPTY: uint8_t = 0x35
_STR_SYMBOL_USB: uint8_t = 0x36
_STR_SYMBOL_BLUETOOTH: uint8_t = 0x37
_STR_SYMBOL_TRASH: uint8_t = 0x38
_STR_SYMBOL_EDIT: uint8_t = 0x39
_STR_SYMBOL_BACKSPACE: uint8_t = 0x3A
_STR_SYMBOL_SD_CARD: uint8_t = 0x3B
_STR_SYMBOL_NEW_LINE: uint8_t = 0x3C
_STR_SYMBOL_DUMMY: uint8_t = 0x3D

ALIGN_DEFAULT: align_t = 0x0
ALIGN_TOP_LEFT: align_t = 0x1
ALIGN_TOP_MID: align_t = 0x2
ALIGN_TOP_RIGHT: align_t = 0x3
ALIGN_BOTTOM_LEFT: align_t = 0x4
ALIGN_BOTTOM_MID: align_t = 0x5
ALIGN_BOTTOM_RIGHT: align_t = 0x6
ALIGN_LEFT_MID: align_t = 0x7
ALIGN_RIGHT_MID: align_t = 0x8
ALIGN_CENTER: align_t = 0x9
ALIGN_OUT_TOP_LEFT: align_t = 0xA
ALIGN_OUT_TOP_MID: align_t = 0xB
ALIGN_OUT_TOP_RIGHT: align_t = 0xC
ALIGN_OUT_BOTTOM_LEFT: align_t = 0xD
ALIGN_OUT_BOTTOM_MID: align_t = 0xE
ALIGN_OUT_BOTTOM_RIGHT: align_t = 0xF
ALIGN_OUT_LEFT_TOP: align_t = 0x10
ALIGN_OUT_LEFT_MID: align_t = 0x11
ALIGN_OUT_LEFT_BOTTOM: align_t = 0x12
ALIGN_OUT_RIGHT_TOP: align_t = 0x13
ALIGN_OUT_RIGHT_MID: align_t = 0x14
ALIGN_OUT_RIGHT_BOTTOM: align_t = 0x15

DIR_NONE: dir_t = 0x00
DIR_LEFT: dir_t = 1 << 0
DIR_RIGHT: dir_t = 1 << 1
DIR_TOP: dir_t = 1 << 2
DIR_BOTTOM: dir_t = 1 << 3
DIR_HOR: dir_t = DIR_LEFT | DIR_RIGHT
DIR_VER: dir_t = DIR_TOP | DIR_BOTTOM
DIR_ALL: dir_t = DIR_HOR | DIR_VER

FONT_SUBPX_NONE: font_subpx_t = 0x0
FONT_SUBPX_HOR: font_subpx_t = 0x1
FONT_SUBPX_VER: font_subpx_t = 0x2
FONT_SUBPX_BOTH: font_subpx_t = 0x3

OPA_TRANSP: opa_t = 0x0
OPA_0: opa_t = 0x0
OPA_10: opa_t = 0x19
OPA_20: opa_t = 0x33
OPA_30: opa_t = 0x4C
OPA_40: opa_t = 0x66
OPA_50: opa_t = 0x7F
OPA_60: opa_t = 0x99
OPA_70: opa_t = 0xB2
OPA_80: opa_t = 0xCC
OPA_90: opa_t = 0xE5
OPA_100: opa_t = 0xFF
OPA_COVER: opa_t = 0xFF

COLOR_FORMAT_UNKNOWN: color_format_t = 0x0
COLOR_FORMAT_RAW: color_format_t = 0x01
COLOR_FORMAT_RAW_ALPHA: color_format_t = 0x02
COLOR_FORMAT_L8: color_format_t = 0x06
COLOR_FORMAT_I1: color_format_t = 0x07
COLOR_FORMAT_I2: color_format_t = 0x08
COLOR_FORMAT_I4: color_format_t = 0x09
COLOR_FORMAT_I8: color_format_t = 0x0A
COLOR_FORMAT_A8: color_format_t = 0x0E
COLOR_FORMAT_RGB565: color_format_t = 0x12
COLOR_FORMAT_RGB565A8: color_format_t = 0x14
COLOR_FORMAT_RGB888: color_format_t = 0x0F
COLOR_FORMAT_ARGB8888: color_format_t = 0x10
COLOR_FORMAT_XRGB8888: color_format_t = 0x11
COLOR_FORMAT_NATIVE_REVERSED: color_format_t = 0x1A
COLOR_FORMAT_A1: color_format_t = 0x0B
COLOR_FORMAT_A2: color_format_t = 0x0C
COLOR_FORMAT_A4: color_format_t = 0x0D
COLOR_FORMAT_NATIVE: color_format_t = COLOR_FORMAT_XRGB8888
COLOR_FORMAT_NATIVE_WITH_ALPHA: color_format_t = COLOR_FORMAT_ARGB8888

PALETTE_RED: palette_t = 0x0
PALETTE_PINK: palette_t = 0x1
PALETTE_PURPLE: palette_t = 0x2
PALETTE_DEEP_PURPLE: palette_t = 0x3
PALETTE_INDIGO: palette_t = 0x4
PALETTE_BLUE: palette_t = 0x5
PALETTE_LIGHT_BLUE: palette_t = 0x6
PALETTE_CYAN: palette_t = 0x7
PALETTE_TEAL: palette_t = 0x8
PALETTE_GREEN: palette_t = 0x9
PALETTE_LIGHT_GREEN: palette_t = 0xA
PALETTE_LIME: palette_t = 0xB
PALETTE_YELLOW: palette_t = 0xC
PALETTE_AMBER: palette_t = 0xD
PALETTE_ORANGE: palette_t = 0xE
PALETTE_DEEP_ORANGE: palette_t = 0xF
PALETTE_BROWN: palette_t = 0x10
PALETTE_BLUE_GREY: palette_t = 0x11
PALETTE_GREY: palette_t = 0x12
_PALETTE_LAST: palette_t = 0x13
PALETTE_NONE: palette_t = 0xff

TEXT_FLAG_NONE: text_flag_t = 0x00
TEXT_FLAG_RECOLOR: text_flag_t = 0x01
TEXT_FLAG_EXPAND: text_flag_t = 0x02
TEXT_FLAG_FIT: text_flag_t = 0x04

TEXT_ALIGN_AUTO: text_align_t = 0x0
TEXT_ALIGN_LEFT: text_align_t = 0x1
TEXT_ALIGN_CENTER: text_align_t = 0x2
TEXT_ALIGN_RIGHT: text_align_t = 0x3

BASE_DIR_LTR: base_dir_t = 0x00
BASE_DIR_RTL: base_dir_t = 0x01
BASE_DIR_AUTO: base_dir_t = 0x02
BASE_DIR_NEUTRAL: base_dir_t = 0x20
BASE_DIR_WEAK: base_dir_t = 0x21

BLEND_MODE_NORMAL: blend_mode_t = 0x0
BLEND_MODE_ADDITIVE: blend_mode_t = 0x1
BLEND_MODE_SUBTRACTIVE: blend_mode_t = 0x2
BLEND_MODE_MULTIPLY: blend_mode_t = 0x3

TEXT_DECOR_NONE: text_decor_t = 0x00
TEXT_DECOR_UNDERLINE: text_decor_t = 0x01
TEXT_DECOR_STRIKETHROUGH: text_decor_t = 0x02

BORDER_SIDE_NONE: border_side_t = 0x00
BORDER_SIDE_BOTTOM: border_side_t = 0x01
BORDER_SIDE_TOP: border_side_t = 0x02
BORDER_SIDE_LEFT: border_side_t = 0x04
BORDER_SIDE_RIGHT: border_side_t = 0x08
BORDER_SIDE_FULL: border_side_t = 0x0F
BORDER_SIDE_INTERNAL: border_side_t = 0x10

GRAD_DIR_NONE: grad_dir_t = 0x0
GRAD_DIR_VER: grad_dir_t = 0x1
GRAD_DIR_HOR: grad_dir_t = 0x2

DITHER_NONE: dither_mode_t = 0x0
DITHER_ORDERED: dither_mode_t = 0x1
DITHER_ERR_DIFF: dither_mode_t = 0x2

STYLE_PROP_INV: style_prop_t = 0x0
STYLE_WIDTH: style_prop_t = 0x1
STYLE_MIN_WIDTH: style_prop_t = 0x2
STYLE_MAX_WIDTH: style_prop_t = 0x3
STYLE_HEIGHT: style_prop_t = 0x4
STYLE_MIN_HEIGHT: style_prop_t = 0x5
STYLE_MAX_HEIGHT: style_prop_t = 0x6
STYLE_X: style_prop_t = 0x7
STYLE_Y: style_prop_t = 0x8
STYLE_ALIGN: style_prop_t = 0x9
STYLE_LAYOUT: style_prop_t = 0xA
STYLE_RADIUS: style_prop_t = 0xB
STYLE_PAD_TOP: style_prop_t = 0x10
STYLE_PAD_BOTTOM: style_prop_t = 0x11
STYLE_PAD_LEFT: style_prop_t = 0x12
STYLE_PAD_RIGHT: style_prop_t = 0x13
STYLE_PAD_ROW: style_prop_t = 0x14
STYLE_PAD_COLUMN: style_prop_t = 0x15
STYLE_BASE_DIR: style_prop_t = 0x16
STYLE_CLIP_CORNER: style_prop_t = 0x17
STYLE_MARGIN_TOP: style_prop_t = 0x18
STYLE_MARGIN_BOTTOM: style_prop_t = 0x19
STYLE_MARGIN_LEFT: style_prop_t = 0x1A
STYLE_MARGIN_RIGHT: style_prop_t = 0x1B
STYLE_BG_COLOR: style_prop_t = 0x20
STYLE_BG_OPA: style_prop_t = 0x21
STYLE_BG_GRAD_COLOR: style_prop_t = 0x22
STYLE_BG_GRAD_DIR: style_prop_t = 0x23
STYLE_BG_MAIN_STOP: style_prop_t = 0x24
STYLE_BG_GRAD_STOP: style_prop_t = 0x25
STYLE_BG_GRAD: style_prop_t = 0x26
STYLE_BG_DITHER_MODE: style_prop_t = 0x27
STYLE_BG_IMG_SRC: style_prop_t = 0x28
STYLE_BG_IMG_OPA: style_prop_t = 0x29
STYLE_BG_IMG_RECOLOR: style_prop_t = 0x2A
STYLE_BG_IMG_RECOLOR_OPA: style_prop_t = 0x2B
STYLE_BG_IMG_TILED: style_prop_t = 0x2C
STYLE_BORDER_COLOR: style_prop_t = 0x30
STYLE_BORDER_OPA: style_prop_t = 0x31
STYLE_BORDER_WIDTH: style_prop_t = 0x32
STYLE_BORDER_SIDE: style_prop_t = 0x33
STYLE_BORDER_POST: style_prop_t = 0x34
STYLE_OUTLINE_WIDTH: style_prop_t = 0x35
STYLE_OUTLINE_COLOR: style_prop_t = 0x36
STYLE_OUTLINE_OPA: style_prop_t = 0x37
STYLE_OUTLINE_PAD: style_prop_t = 0x38
STYLE_SHADOW_WIDTH: style_prop_t = 0x40
STYLE_SHADOW_OFS_X: style_prop_t = 0x41
STYLE_SHADOW_OFS_Y: style_prop_t = 0x42
STYLE_SHADOW_SPREAD: style_prop_t = 0x43
STYLE_SHADOW_COLOR: style_prop_t = 0x44
STYLE_SHADOW_OPA: style_prop_t = 0x45
STYLE_IMG_OPA: style_prop_t = 0x46
STYLE_IMG_RECOLOR: style_prop_t = 0x47
STYLE_IMG_RECOLOR_OPA: style_prop_t = 0x48
STYLE_LINE_WIDTH: style_prop_t = 0x49
STYLE_LINE_DASH_WIDTH: style_prop_t = 0x4A
STYLE_LINE_DASH_GAP: style_prop_t = 0x4B
STYLE_LINE_ROUNDED: style_prop_t = 0x4C
STYLE_LINE_COLOR: style_prop_t = 0x4D
STYLE_LINE_OPA: style_prop_t = 0x4E
STYLE_ARC_WIDTH: style_prop_t = 0x50
STYLE_ARC_ROUNDED: style_prop_t = 0x51
STYLE_ARC_COLOR: style_prop_t = 0x52
STYLE_ARC_OPA: style_prop_t = 0x53
STYLE_ARC_IMG_SRC: style_prop_t = 0x54
STYLE_TEXT_COLOR: style_prop_t = 0x55
STYLE_TEXT_OPA: style_prop_t = 0x56
STYLE_TEXT_FONT: style_prop_t = 0x57
STYLE_TEXT_LETTER_SPACE: style_prop_t = 0x58
STYLE_TEXT_LINE_SPACE: style_prop_t = 0x59
STYLE_TEXT_DECOR: style_prop_t = 0x5A
STYLE_TEXT_ALIGN: style_prop_t = 0x5B
STYLE_OPA: style_prop_t = 0x60
STYLE_COLOR_FILTER_DSC: style_prop_t = 0x61
STYLE_COLOR_FILTER_OPA: style_prop_t = 0x62
STYLE_ANIM: style_prop_t = 0x63
STYLE_ANIM_TIME: style_prop_t = 0x64
STYLE_ANIM_SPEED: style_prop_t = 0x65
STYLE_TRANSITION: style_prop_t = 0x66
STYLE_BLEND_MODE: style_prop_t = 0x67
STYLE_TRANSFORM_WIDTH: style_prop_t = 0x68
STYLE_TRANSFORM_HEIGHT: style_prop_t = 0x69
STYLE_TRANSLATE_X: style_prop_t = 0x6A
STYLE_TRANSLATE_Y: style_prop_t = 0x6B
STYLE_TRANSFORM_ZOOM: style_prop_t = 0x6C
STYLE_TRANSFORM_ANGLE: style_prop_t = 0x6D
STYLE_TRANSFORM_PIVOT_X: style_prop_t = 0x6E
STYLE_TRANSFORM_PIVOT_Y: style_prop_t = 0x6F
_STYLE_LAST_BUILT_IN_PROP: style_prop_t = 0x6F
_STYLE_NUM_BUILT_IN_PROPS: style_prop_t = _STYLE_LAST_BUILT_IN_PROP + 1
STYLE_PROP_ANY: style_prop_t = 0xFFFF
_STYLE_PROP_CONST: style_prop_t = 0xFFFF

STYLE_RES_NOT_FOUND: style_res_t = 0x0
STYLE_RES_FOUND: style_res_t = 0x1
STYLE_RES_INHERIT: style_res_t = 0x2

STATE_DEFAULT: state_t = 0x0000
STATE_CHECKED: state_t = 0x0001
STATE_FOCUSED: state_t = 0x0002
STATE_FOCUS_KEY: state_t = 0x0004
STATE_EDITED: state_t = 0x0008
STATE_HOVERED: state_t = 0x0010
STATE_PRESSED: state_t = 0x0020
STATE_SCROLLED: state_t = 0x0040
STATE_DISABLED: state_t = 0x0080
STATE_USER_1: state_t = 0x1000
STATE_USER_2: state_t = 0x2000
STATE_USER_3: state_t = 0x4000
STATE_USER_4: state_t = 0x8000
STATE_ANY: state_t = 0xFFFF

PART_MAIN: part_t = 0x000000
PART_SCROLLBAR: part_t = 0x010000
PART_INDICATOR: part_t = 0x020000
PART_KNOB: part_t = 0x030000
PART_SELECTED: part_t = 0x040000
PART_ITEMS: part_t = 0x050000
PART_TICKS: part_t = 0x060000
PART_CURSOR: part_t = 0x070000
PART_CUSTOM_FIRST: part_t = 0x080000
PART_ANY: part_t = 0x0F0000

OBJ_FLAG_HIDDEN: _obj_flag_t = 1 << 0
OBJ_FLAG_CLICKABLE: _obj_flag_t = 1 << 1
OBJ_FLAG_CLICK_FOCUSABLE: _obj_flag_t = 1 << 2
OBJ_FLAG_CHECKABLE: _obj_flag_t = 1 << 3
OBJ_FLAG_SCROLLABLE: _obj_flag_t = 1 << 4
OBJ_FLAG_SCROLL_ELASTIC: _obj_flag_t = 1 << 5
OBJ_FLAG_SCROLL_MOMENTUM: _obj_flag_t = 1 << 6
OBJ_FLAG_SCROLL_ONE: _obj_flag_t = 1 << 7
OBJ_FLAG_SCROLL_CHAIN_HOR: _obj_flag_t = 1 << 8
OBJ_FLAG_SCROLL_CHAIN_VER: _obj_flag_t = 1 << 9
OBJ_FLAG_SCROLL_CHAIN: _obj_flag_t = OBJ_FLAG_SCROLL_CHAIN_HOR | OBJ_FLAG_SCROLL_CHAIN_VER
OBJ_FLAG_SCROLL_ON_FOCUS: _obj_flag_t = 1 << 10
OBJ_FLAG_SCROLL_WITH_ARROW: _obj_flag_t = 1 << 11
OBJ_FLAG_SNAPPABLE: _obj_flag_t = 1 << 12
OBJ_FLAG_PRESS_LOCK: _obj_flag_t = 1 << 13
OBJ_FLAG_EVENT_BUBBLE: _obj_flag_t = 1 << 14
OBJ_FLAG_GESTURE_BUBBLE: _obj_flag_t = 1 << 15
OBJ_FLAG_ADV_HITTEST: _obj_flag_t = 1 << 16
OBJ_FLAG_IGNORE_LAYOUT: _obj_flag_t = 1 << 17
OBJ_FLAG_FLOATING: _obj_flag_t = 1 << 18
OBJ_FLAG_SEND_DRAW_TASK_EVENTS: _obj_flag_t = 1 << 19
OBJ_FLAG_LAYOUT_1: _obj_flag_t = 1 << 23
OBJ_FLAG_LAYOUT_2: _obj_flag_t = 1 << 24
OBJ_FLAG_WIDGET_1: _obj_flag_t = 1 << 25
OBJ_FLAG_WIDGET_2: _obj_flag_t = 1 << 26
OBJ_FLAG_USER_1: _obj_flag_t = 1 << 27
OBJ_FLAG_USER_2: _obj_flag_t = 1 << 28
OBJ_FLAG_USER_3: _obj_flag_t = 1 << 29
OBJ_FLAG_USER_4: _obj_flag_t = 1 << 30

EVENT_ALL: event_code_t = 0x0
EVENT_PRESSED: event_code_t = 0x1
EVENT_PRESSING: event_code_t = 0x2
EVENT_PRESS_LOST: event_code_t = 0x3
EVENT_SHORT_CLICKED: event_code_t = 0x4
EVENT_LONG_PRESSED: event_code_t = 0x5
EVENT_LONG_PRESSED_REPEAT: event_code_t = 0x6
EVENT_CLICKED: event_code_t = 0x7
EVENT_RELEASED: event_code_t = 0x8
EVENT_SCROLL_BEGIN: event_code_t = 0x9
EVENT_SCROLL_THROW_BEGIN: event_code_t = 0xA
EVENT_SCROLL_END: event_code_t = 0xB
EVENT_SCROLL: event_code_t = 0xC
EVENT_GESTURE: event_code_t = 0xD
EVENT_KEY: event_code_t = 0xE
EVENT_FOCUSED: event_code_t = 0xF
EVENT_DEFOCUSED: event_code_t = 0x10
EVENT_LEAVE: event_code_t = 0x11
EVENT_HIT_TEST: event_code_t = 0x12
EVENT_COVER_CHECK: event_code_t = 0x13
EVENT_REFR_EXT_DRAW_SIZE: event_code_t = 0x14
EVENT_DRAW_MAIN_BEGIN: event_code_t = 0x15
EVENT_DRAW_MAIN: event_code_t = 0x16
EVENT_DRAW_MAIN_END: event_code_t = 0x17
EVENT_DRAW_POST_BEGIN: event_code_t = 0x18
EVENT_DRAW_POST: event_code_t = 0x19
EVENT_DRAW_POST_END: event_code_t = 0x1A
EVENT_DRAW_TASK_ADDED: event_code_t = 0x1B
EVENT_VALUE_CHANGED: event_code_t = 0x1C
EVENT_INSERT: event_code_t = 0x1D
EVENT_REFRESH: event_code_t = 0x1E
EVENT_READY: event_code_t = 0x1F
EVENT_CANCEL: event_code_t = 0x20
EVENT_DELETE: event_code_t = 0x21
EVENT_CHILD_CHANGED: event_code_t = 0x22
EVENT_CHILD_CREATED: event_code_t = 0x23
EVENT_CHILD_DELETED: event_code_t = 0x24
EVENT_SCREEN_UNLOAD_START: event_code_t = 0x25
EVENT_SCREEN_LOAD_START: event_code_t = 0x26
EVENT_SCREEN_LOADED: event_code_t = 0x27
EVENT_SCREEN_UNLOADED: event_code_t = 0x28
EVENT_SIZE_CHANGED: event_code_t = 0x29
EVENT_STYLE_CHANGED: event_code_t = 0x2A
EVENT_LAYOUT_CHANGED: event_code_t = 0x2B
EVENT_GET_SELF_SIZE: event_code_t = 0x2C
EVENT_MSG_RECEIVED: event_code_t = 0x2D
EVENT_INVALIDATE_AREA: event_code_t = 0x2E
EVENT_RENDER_START: event_code_t = 0x2F
EVENT_RENDER_READY: event_code_t = 0x30
EVENT_RESOLUTION_CHANGED: event_code_t = 0x31
EVENT_REFR_REQUEST: event_code_t = 0x32
EVENT_REFR_START: event_code_t = 0x33
EVENT_REFR_FINISH: event_code_t = 0x34
EVENT_FLUSH_START: event_code_t = 0x35
EVENT_FLUSH_FINISH: event_code_t = 0x36
_EVENT_LAST: event_code_t = 0x37
EVENT_PREPROCESS: event_code_t = 0x80

FS_RES_OK: fs_res_t = 0x0
FS_RES_HW_ERR: fs_res_t = 0x1
FS_RES_FS_ERR: fs_res_t = 0x2
FS_RES_NOT_EX: fs_res_t = 0x3
FS_RES_FULL: fs_res_t = 0x4
FS_RES_LOCKED: fs_res_t = 0x5
FS_RES_DENIED: fs_res_t = 0x6
FS_RES_BUSY: fs_res_t = 0x7
FS_RES_TOUT: fs_res_t = 0x8
FS_RES_NOT_IMP: fs_res_t = 0x9
FS_RES_OUT_OF_MEM: fs_res_t = 0xA
FS_RES_INV_PARAM: fs_res_t = 0xB
FS_RES_UNKNOWN: fs_res_t = 0xC

FS_MODE_WR: fs_mode_t = 0x01
FS_MODE_RD: fs_mode_t = 0x02

FS_SEEK_SET: fs_whence_t = 0x00
FS_SEEK_CUR: fs_whence_t = 0x01
FS_SEEK_END: fs_whence_t = 0x02

IMG_SRC_VARIABLE: img_src_t = 0x0
IMG_SRC_FILE: img_src_t = 0x1
IMG_SRC_SYMBOL: img_src_t = 0x2
IMG_SRC_UNKNOWN: img_src_t = 0x3

DRAW_TASK_TYPE_FILL: draw_task_type_t = 0x0
DRAW_TASK_TYPE_BORDER: draw_task_type_t = 0x1
DRAW_TASK_TYPE_BOX_SHADOW: draw_task_type_t = 0x2
DRAW_TASK_TYPE_BG_IMG: draw_task_type_t = 0x3
DRAW_TASK_TYPE_LABEL: draw_task_type_t = 0x4
DRAW_TASK_TYPE_IMAGE: draw_task_type_t = 0x5
DRAW_TASK_TYPE_LAYER: draw_task_type_t = 0x6
DRAW_TASK_TYPE_LINE: draw_task_type_t = 0x7
DRAW_TASK_TYPE_ARC: draw_task_type_t = 0x8
DRAW_TASK_TYPE_TRIANGLE: draw_task_type_t = 0x9
DRAW_TASK_TYPE_MASK_RECTANGLE: draw_task_type_t = 0xA
DRAW_TASK_TYPE_MASK_BITMAP: draw_task_type_t = 0xB

DRAW_TASK_STATE_WAITING: draw_task_state_t = 0x0
DRAW_TASK_STATE_QUEUED: draw_task_state_t = 0x1
DRAW_TASK_STATE_IN_PROGRESS: draw_task_state_t = 0x2
DRAW_TASK_STATE_READY: draw_task_state_t = 0x3

DRAW_LETTER_BITMAP_FORMAT_A8: draw_letter_bitmap_format_t = 0x0
DRAW_LETTER_BITMAP_FORMAT_IMAGE: draw_letter_bitmap_format_t = 0x1

DISP_ROTATION_0: disp_rotation_t = 0x0
DISP_ROTATION_90: disp_rotation_t = 0x1
DISP_ROTATION_180: disp_rotation_t = 0x2
DISP_ROTATION_270: disp_rotation_t = 0x3

DISP_RENDER_MODE_PARTIAL: disp_render_mode_t = 0x0
DISP_RENDER_MODE_DIRECT: disp_render_mode_t = 0x1
DISP_RENDER_MODE_FULL: disp_render_mode_t = 0x2

SCR_LOAD_ANIM_NONE: scr_load_anim_t = 0x0
SCR_LOAD_ANIM_OVER_LEFT: scr_load_anim_t = 0x1
SCR_LOAD_ANIM_OVER_RIGHT: scr_load_anim_t = 0x2
SCR_LOAD_ANIM_OVER_TOP: scr_load_anim_t = 0x3
SCR_LOAD_ANIM_OVER_BOTTOM: scr_load_anim_t = 0x4
SCR_LOAD_ANIM_MOVE_LEFT: scr_load_anim_t = 0x5
SCR_LOAD_ANIM_MOVE_RIGHT: scr_load_anim_t = 0x6
SCR_LOAD_ANIM_MOVE_TOP: scr_load_anim_t = 0x7
SCR_LOAD_ANIM_MOVE_BOTTOM: scr_load_anim_t = 0x8
SCR_LOAD_ANIM_FADE_IN: scr_load_anim_t = 0x9
SCR_LOAD_ANIM_FADE_ON: scr_load_anim_t = SCR_LOAD_ANIM_FADE_IN
SCR_LOAD_ANIM_FADE_OUT: scr_load_anim_t = 0xA
SCR_LOAD_ANIM_OUT_LEFT: scr_load_anim_t = 0xB
SCR_LOAD_ANIM_OUT_RIGHT: scr_load_anim_t = 0xC
SCR_LOAD_ANIM_OUT_TOP: scr_load_anim_t = 0xD
SCR_LOAD_ANIM_OUT_BOTTOM: scr_load_anim_t = 0xE

OBJ_TREE_WALK_NEXT: obj_tree_walk_res_t = 0x0
OBJ_TREE_WALK_SKIP_CHILDREN: obj_tree_walk_res_t = 0x1
OBJ_TREE_WALK_END: obj_tree_walk_res_t = 0x2

SCROLLBAR_MODE_OFF: scrollbar_mode_t = 0x0
SCROLLBAR_MODE_ON: scrollbar_mode_t = 0x1
SCROLLBAR_MODE_ACTIVE: scrollbar_mode_t = 0x2
SCROLLBAR_MODE_AUTO: scrollbar_mode_t = 0x3

SCROLL_SNAP_NONE: scroll_snap_t = 0x0
SCROLL_SNAP_START: scroll_snap_t = 0x1
SCROLL_SNAP_END: scroll_snap_t = 0x2
SCROLL_SNAP_CENTER: scroll_snap_t = 0x3

_STYLE_STATE_CMP_SAME: _style_state_cmp_t = 0x0
_STYLE_STATE_CMP_DIFF_REDRAW: _style_state_cmp_t = 0x1
_STYLE_STATE_CMP_DIFF_DRAW_PAD: _style_state_cmp_t = 0x2
_STYLE_STATE_CMP_DIFF_LAYOUT: _style_state_cmp_t = 0x3

LAYER_TYPE_NONE: layer_type_t = 0x0
LAYER_TYPE_SIMPLE: layer_type_t = 0x1
LAYER_TYPE_TRANSFORM: layer_type_t = 0x2

OBJ_CLASS_EDITABLE_INHERIT: obj_class_editable_t = 0x0
OBJ_CLASS_EDITABLE_TRUE: obj_class_editable_t = 0x1
OBJ_CLASS_EDITABLE_FALSE: obj_class_editable_t = 0x2

OBJ_CLASS_GROUP_DEF_INHERIT: obj_class_group_def_t = 0x0
OBJ_CLASS_GROUP_DEF_TRUE: obj_class_group_def_t = 0x1
OBJ_CLASS_GROUP_DEF_FALSE: obj_class_group_def_t = 0x2

OBJ_CLASS_THEME_INHERITABLE_FALSE: obj_class_theme_inheritable_t = 0x0
OBJ_CLASS_THEME_INHERITABLE_TRUE: obj_class_theme_inheritable_t = 0x1

KEY_UP: key_t = 0x11
KEY_DOWN: key_t = 0x12
KEY_RIGHT: key_t = 0x13
KEY_LEFT: key_t = 0x14
KEY_ESC: key_t = 0x1B
KEY_DEL: key_t = 0x7F
KEY_BACKSPACE: key_t = 0x8
KEY_ENTER: key_t = 0xA
KEY_NEXT: key_t = 0x9
KEY_PREV: key_t = 0xB
KEY_HOME: key_t = 0x2
KEY_END: key_t = 0x3

GROUP_REFOCUS_POLICY_NEXT: group_refocus_policy_t = 0x0
GROUP_REFOCUS_POLICY_PREV: group_refocus_policy_t = 0x1

INDEV_TYPE_NONE: indev_type_t = 0x0
INDEV_TYPE_POINTER: indev_type_t = 0x1
INDEV_TYPE_KEYPAD: indev_type_t = 0x2
INDEV_TYPE_BUTTON: indev_type_t = 0x3
INDEV_TYPE_ENCODER: indev_type_t = 0x4

INDEV_STATE_RELEASED: indev_state_t = 0x0
INDEV_STATE_PRESSED: indev_state_t = 0x1

COVER_RES_COVER: cover_res_t = 0x0
COVER_RES_NOT_COVER: cover_res_t = 0x1
COVER_RES_MASKED: cover_res_t = 0x2

FONT_FMT_TXT_CMAP_FORMAT0_FULL: font_fmt_txt_cmap_type_t = 0x0
FONT_FMT_TXT_CMAP_SPARSE_FULL: font_fmt_txt_cmap_type_t = 0x1
FONT_FMT_TXT_CMAP_FORMAT0_TINY: font_fmt_txt_cmap_type_t = 0x2
FONT_FMT_TXT_CMAP_SPARSE_TINY: font_fmt_txt_cmap_type_t = 0x3

FONT_FMT_TXT_PLAIN: font_fmt_txt_bitmap_format_t = 0x0
FONT_FMT_TXT_COMPRESSED: font_fmt_txt_bitmap_format_t = 0x1
FONT_FMT_TXT_COMPRESSED_NO_PREFILTER: font_fmt_txt_bitmap_format_t = 0x1

IMG_SIZE_MODE_VIRTUAL: img_size_mode_t = 0x0
IMG_SIZE_MODE_REAL: img_size_mode_t = 0x1

ANIM_IMG_PART_MAIN: animimg_part_t = 0x0

ARC_MODE_NORMAL: arc_mode_t = 0x0
ARC_MODE_SYMMETRICAL: arc_mode_t = 0x1
ARC_MODE_REVERSE: arc_mode_t = 0x2

LABEL_LONG_WRAP: label_long_mode_t = 0x0
LABEL_LONG_DOT: label_long_mode_t = 0x1
LABEL_LONG_SCROLL: label_long_mode_t = 0x2
LABEL_LONG_SCROLL_CIRCULAR: label_long_mode_t = 0x3
LABEL_LONG_CLIP: label_long_mode_t = 0x4

BAR_MODE_NORMAL: bar_mode_t = 0x0
BAR_MODE_SYMMETRICAL: bar_mode_t = 0x1
BAR_MODE_RANGE: bar_mode_t = 0x2

_BTNMATRIX_WIDTH: btnmatrix_ctrl_t = 0x000F
BTNMATRIX_CTRL_HIDDEN: btnmatrix_ctrl_t = 0x0010
BTNMATRIX_CTRL_NO_REPEAT: btnmatrix_ctrl_t = 0x0020
BTNMATRIX_CTRL_DISABLED: btnmatrix_ctrl_t = 0x0040
BTNMATRIX_CTRL_CHECKABLE: btnmatrix_ctrl_t = 0x0080
BTNMATRIX_CTRL_CHECKED: btnmatrix_ctrl_t = 0x0100
BTNMATRIX_CTRL_CLICK_TRIG: btnmatrix_ctrl_t = 0x0200
BTNMATRIX_CTRL_POPOVER: btnmatrix_ctrl_t = 0x0400
BTNMATRIX_CTRL_RECOLOR: btnmatrix_ctrl_t = 0x0800
_BTNMATRIX_CTRL_RESERVED_1: btnmatrix_ctrl_t = 0x1000
_BTNMATRIX_CTRL_RESERVED_2: btnmatrix_ctrl_t = 0x2000
BTNMATRIX_CTRL_CUSTOM_1: btnmatrix_ctrl_t = 0x4000
BTNMATRIX_CTRL_CUSTOM_2: btnmatrix_ctrl_t = 0x8000

CHART_TYPE_NONE: chart_type_t = 0x0
CHART_TYPE_LINE: chart_type_t = 0x1
CHART_TYPE_BAR: chart_type_t = 0x2
CHART_TYPE_SCATTER: chart_type_t = 0x3

CHART_UPDATE_MODE_SHIFT: chart_update_mode_t = 0x0
CHART_UPDATE_MODE_CIRCULAR: chart_update_mode_t = 0x1

CHART_AXIS_PRIMARY_Y: chart_axis_t = 0x00
CHART_AXIS_SECONDARY_Y: chart_axis_t = 0x01
CHART_AXIS_PRIMARY_X: chart_axis_t = 0x02
CHART_AXIS_SECONDARY_X: chart_axis_t = 0x04
_CHART_AXIS_LAST: chart_axis_t = 0x5

IMGBTN_STATE_RELEASED: imgbtn_state_t = 0x0
IMGBTN_STATE_PRESSED: imgbtn_state_t = 0x1
IMGBTN_STATE_DISABLED: imgbtn_state_t = 0x2
IMGBTN_STATE_CHECKED_RELEASED: imgbtn_state_t = 0x3
IMGBTN_STATE_CHECKED_PRESSED: imgbtn_state_t = 0x4
IMGBTN_STATE_CHECKED_DISABLED: imgbtn_state_t = 0x5
_IMGBTN_STATE_NUM: imgbtn_state_t = 0x6

KEYBOARD_MODE_TEXT_LOWER: keyboard_mode_t = 0x0
KEYBOARD_MODE_TEXT_UPPER: keyboard_mode_t = 0x1
KEYBOARD_MODE_SPECIAL: keyboard_mode_t = 0x2
KEYBOARD_MODE_NUMBER: keyboard_mode_t = 0x3
KEYBOARD_MODE_USER_1: keyboard_mode_t = 0x4
KEYBOARD_MODE_USER_2: keyboard_mode_t = 0x5
KEYBOARD_MODE_USER_3: keyboard_mode_t = 0x6
KEYBOARD_MODE_USER_4: keyboard_mode_t = 0x7

MENU_HEADER_TOP_FIXED: menu_mode_header_t = 0x0
MENU_HEADER_TOP_UNFIXED: menu_mode_header_t = 0x1
MENU_HEADER_BOTTOM_FIXED: menu_mode_header_t = 0x2

MENU_ROOT_BACK_BTN_DISABLED: menu_mode_root_back_btn_t = 0x0
MENU_ROOT_BACK_BTN_ENABLED: menu_mode_root_back_btn_t = 0x1

METER_INDICATOR_TYPE_NEEDLE_IMG: meter_indicator_type_t = 0x0
METER_INDICATOR_TYPE_NEEDLE_LINE: meter_indicator_type_t = 0x1
METER_INDICATOR_TYPE_SCALE_LINES: meter_indicator_type_t = 0x2
METER_INDICATOR_TYPE_ARC: meter_indicator_type_t = 0x3

ROLLER_MODE_NORMAL: roller_mode_t = 0x0
ROLLER_MODE_INFINITE: roller_mode_t = 0x1

SLIDER_MODE_NORMAL: slider_mode_t = BAR_MODE_NORMAL
SLIDER_MODE_SYMMETRICAL: slider_mode_t = BAR_MODE_SYMMETRICAL
SLIDER_MODE_RANGE: slider_mode_t = BAR_MODE_RANGE

SPAN_OVERFLOW_CLIP: span_overflow_t = 0x0
SPAN_OVERFLOW_ELLIPSIS: span_overflow_t = 0x1

SPAN_MODE_FIXED: span_mode_t = 0x0
SPAN_MODE_EXPAND: span_mode_t = 0x1
SPAN_MODE_BREAK: span_mode_t = 0x2

PART_TEXTAREA_PLACEHOLDER: style_selector_t = PART_CUSTOM_FIRST

TABLE_CELL_CTRL_MERGE_RIGHT: table_cell_ctrl_t = 1 << 0
TABLE_CELL_CTRL_TEXT_CROP: table_cell_ctrl_t = 1 << 1
TABLE_CELL_CTRL_CUSTOM_1: table_cell_ctrl_t = 1 << 4
TABLE_CELL_CTRL_CUSTOM_2: table_cell_ctrl_t = 1 << 5
TABLE_CELL_CTRL_CUSTOM_3: table_cell_ctrl_t = 1 << 6
TABLE_CELL_CTRL_CUSTOM_4: table_cell_ctrl_t = 1 << 7

GRIDNAV_CTRL_NONE: gridnav_ctrl_t = 0x0
GRIDNAV_CTRL_ROLLOVER: gridnav_ctrl_t = 0x1
GRIDNAV_CTRL_SCROLL_FIRST: gridnav_ctrl_t = 0x2

IME_PINYIN_MODE_K26: ime_pinyin_mode_t = 0x0
IME_PINYIN_MODE_K9: ime_pinyin_mode_t = 0x1
IME_PINYIN_MODE_K9_NUMBER: ime_pinyin_mode_t = 0x2

EXPLORER_SORT_NONE: file_explorer_sort_t = 0x0
EXPLORER_SORT_KIND: file_explorer_sort_t = 0x1

EXPLORER_HOME_DIR: file_explorer_dir_t = 0x0
EXPLORER_MUSIC_DIR: file_explorer_dir_t = 0x1
EXPLORER_PICTURES_DIR: file_explorer_dir_t = 0x2
EXPLORER_VIDEO_DIR: file_explorer_dir_t = 0x3
EXPLORER_DOCS_DIR: file_explorer_dir_t = 0x4
EXPLORER_FS_DIR: file_explorer_dir_t = 0x5

FLEX_ALIGN_START: flex_align_t = 0x0
FLEX_ALIGN_END: flex_align_t = 0x1
FLEX_ALIGN_CENTER: flex_align_t = 0x2
FLEX_ALIGN_SPACE_EVENLY: flex_align_t = 0x3
FLEX_ALIGN_SPACE_AROUND: flex_align_t = 0x4
FLEX_ALIGN_SPACE_BETWEEN: flex_align_t = 0x5

FLEX_FLOW_ROW: flex_flow_t = 0x00
FLEX_FLOW_COLUMN: flex_flow_t = 1 << 0
FLEX_FLOW_ROW_WRAP: flex_flow_t = FLEX_FLOW_ROW | (1 << 2)
FLEX_FLOW_ROW_REVERSE: flex_flow_t = FLEX_FLOW_ROW | (1 << 3)
FLEX_FLOW_ROW_WRAP_REVERSE: flex_flow_t = (FLEX_FLOW_ROW | (1 << 2)) | (1 << 3)
FLEX_FLOW_COLUMN_WRAP: flex_flow_t = FLEX_FLOW_COLUMN | (1 << 2)
FLEX_FLOW_COLUMN_REVERSE: flex_flow_t = FLEX_FLOW_COLUMN | (1 << 3)
FLEX_FLOW_COLUMN_WRAP_REVERSE: flex_flow_t = (FLEX_FLOW_COLUMN | (1 << 2)) | (1 << 3)

GRID_ALIGN_START: grid_align_t = 0x0
GRID_ALIGN_CENTER: grid_align_t = 0x1
GRID_ALIGN_END: grid_align_t = 0x2
GRID_ALIGN_STRETCH: grid_align_t = 0x3
GRID_ALIGN_SPACE_EVENLY: grid_align_t = 0x4
GRID_ALIGN_SPACE_AROUND: grid_align_t = 0x5
GRID_ALIGN_SPACE_BETWEEN: grid_align_t = 0x6

DEMO_BENCHMARK_MODE_RENDER_AND_DRIVER: demo_benchmark_mode_t = 0x0
DEMO_BENCHMARK_MODE_REAL: demo_benchmark_mode_t = 0x1
DEMO_BENCHMARK_MODE_RENDER_ONLY: demo_benchmark_mode_t = 0x2  # NOQA
# ************************************************

OBJ_FLAG_FLEX_IN_NEW_TRACK = OBJ_FLAG_LAYOUT_1  # NOQA


class __fs_driver(object):
    import errno

    _err_mapping = {
        errno.EPERM: FS_RES_NOT_IMP,  # NOQA
        errno.ENOENT: FS_RES_NOT_EX,  # NOQA
        errno.EINTR: FS_RES_HW_ERR,  # NOQA
        errno.EIO: FS_RES_HW_ERR,  # NOQA
        errno.ENXIO: FS_RES_HW_ERR,  # NOQA
        errno.E2BIG: FS_RES_INV_PARAM,  # NOQA
        errno.EBADF: FS_RES_FS_ERR,  # NOQA
        errno.EAGAIN: FS_RES_BUSY,  # NOQA
        errno.ENOMEM: FS_RES_OUT_OF_MEM,  # NOQA
        errno.EACCES: FS_RES_DENIED,  # NOQA
        errno.EFAULT: FS_RES_HW_ERR,  # NOQA
        errno.EBUSY: FS_RES_BUSY,  # NOQA
        errno.EEXIST: FS_RES_FS_ERR,  # NOQA
        errno.ENODEV: FS_RES_HW_ERR,  # NOQA
        errno.ENOTDIR: FS_RES_FS_ERR,  # NOQA
        errno.EISDIR: FS_RES_FS_ERR,  # NOQA
        errno.EINVAL: FS_RES_INV_PARAM,  # NOQA
        errno.EMFILE: FS_RES_BUSY,  # NOQA
        errno.ENOSPC: FS_RES_FULL,  # NOQA
        errno.ESPIPE: FS_RES_FS_ERR,  # NOQA
        errno.EROFS: FS_RES_NOT_IMP,  # NOQA
        errno.ENOSYS: FS_RES_NOT_IMP  # NOQA
    }

    del errno

    def __init__(self):
        import sys

        sys.modules['fs_driver'] = self
        self.__open_files = {}

    def __fs_open_cb(self, _, path, mode):
        if mode == FS_MODE_WR:  # NOQA
            p_mode = 'wb'
        elif mode == FS_MODE_RD:  # NOQA
            p_mode = 'rb'
        elif mode == FS_MODE_WR | FS_MODE_RD:  # NOQA
            p_mode = 'rb+'
        else:
            print(
                f"fs_open_cb - open mode error, {mode} is invalid mode"
            )
            return FS_RES_NOT_IMP  # NOQA

        path = path * 255

        try:
            f = open(path, p_mode)
        except OSError as e:
            errno = self._err_mapping.get(e.errno, FS_RES_UNKNOWN)  # NOQA
            print(f"ERROR: fs_open_callback - '{path}' - {errno} - {e.errno}")
            return errno

        fileno = f.fileno()

        res = dict(
            file=f,
            path=path,
            )
        self.__open_files[fileno] = res

        return fileno

    def __fs_close_cb(self, fs_drv, fs_file):  # NOQA
        fileno = fs_file

        if fileno in self.__open_files:
            cont = self.__open_files.pop(fileno)

            try:
                cont['file'].close()
            except OSError as e:
                path = cont['path']
                errno = self._err_mapping.get(e.errno, FS_RES_UNKNOWN)  # NOQA
                print(
                    f"ERROR: fs_close_cb - '{path}' - {errno} - {e.errno}"
                )
                return errno

        return FS_RES_OK  # NOQA

    def __fs_read_cb(
            self,
            fs_drv,  # NOQA
            fs_file,
            buf,
            num_bytes_to_read,
            num_bytes_read  # NOQA
    ):

        fileno = fs_file

        if fileno in self.__open_files:
            cont = self.__open_files[fileno]
            try:
                data = cont['file'].read(num_bytes_to_read)

                if not isinstance(data, bytes):
                    data = data.decode('utf-8')

                _ctypes.memmove(_ctypes.addressof(buf), data, len(data))
                num_bytes_read = len(data)  # NOQA

            except OSError as e:
                path = cont['path']
                errno = self._err_mapping.get(e.errno, FS_RES_UNKNOWN)  # NOQA
                print(
                    f"ERROR: fs_read_cb - '{path}' - {errno} - {e.errno}"
                )
                return errno

        return FS_RES_OK  # NOQA

    def __fs_seek_cb(self, fs_drv, fs_file, pos, whence):  # NOQA
        fileno = fs_file

        if fileno in self.__open_files:
            cont = self.__open_files[fileno]

            try:
                cont['file'].seek(pos, whence)
            except OSError as e:
                path = cont['path']
                errno = self._err_mapping.get(e.errno, FS_RES_UNKNOWN)  # NOQA
                print(
                    f"ERROR: fs_seek_cb - '{path}' - {errno} - {e.errno}"
                )
                return errno

        return FS_RES_OK  # NOQA

    def __fs_tell_cb(self, fs_drv, fs_file, pos):  # NOQA
        fileno = fs_file

        if fileno in self.__open_files:
            cont = self.__open_files[fileno]

            try:
                tpos = cont['file'].tell()
                pos = tpos  # NOQA
            except OSError as e:
                path = cont['path']
                errno = self._err_mapping.get(e.errno, FS_RES_UNKNOWN)  # NOQA
                print(
                    f"ERROR: fs_tell_cb - '{path}' - {errno} - {e.errno}"
                )
                return errno

        return FS_RES_OK  # NOQA

    def __fs_write_cb(self, fs_drv, fs_file, buf, btw, bw):  # NOQA
        fileno = fs_file

        if fileno in self.__open_files:
            cont = self.__open_files[fileno]

            try:
                num_bytes = cont['file'].write(buf[:btw])
                bw[0] = bw._type_(num_bytes)  # NOQA
            except OSError as e:
                path = cont['path']
                errno = self._err_mapping.get(e.errno, FS_RES_UNKNOWN)  # NOQA
                print(
                    f"ERROR: fs_write_cb - '{path}' - {errno} - {e.errno}"
                )
                return errno

        return FS_RES_OK  # NOQA

    def fs_register(self, fs_drv, letter, cache_size=500):

        fs_drv_init(fs_drv)  # NOQA
        fs_drv.letter = letter
        fs_drv.open_cb = self.__fs_open_cb
        fs_drv.read_cb = self.__fs_read_cb
        fs_drv.write_cb = self.__fs_write_cb
        fs_drv.seek_cb = self.__fs_seek_cb
        fs_drv.tell_cb = self.__fs_tell_cb
        fs_drv.close_cb = self.__fs_close_cb

        if cache_size >= 0:
            fs_drv.cache_size = cache_size

        fs_drv_register(fs_drv)  # NOQA


__fs_driver()


# ***************  STRUCTS/UNIONS  ***************
class mem_monitor_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        total_size: Optional["uint32_t"] = _DefaultArg, 
        free_cnt: Optional["uint32_t"] = _DefaultArg, 
        free_size: Optional["uint32_t"] = _DefaultArg, 
        free_biggest_size: Optional["uint32_t"] = _DefaultArg, 
        used_cnt: Optional["uint32_t"] = _DefaultArg, 
        max_used: Optional["uint32_t"] = _DefaultArg, 
        used_pct: Optional["uint8_t"] = _DefaultArg, 
        frag_pct: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if total_size != _DefaultArg:
            kwargs['total_size'] = total_size
        if free_cnt != _DefaultArg:
            kwargs['free_cnt'] = free_cnt
        if free_size != _DefaultArg:
            kwargs['free_size'] = free_size
        if free_biggest_size != _DefaultArg:
            kwargs['free_biggest_size'] = free_biggest_size
        if used_cnt != _DefaultArg:
            kwargs['used_cnt'] = used_cnt
        if max_used != _DefaultArg:
            kwargs['max_used'] = max_used
        if used_pct != _DefaultArg:
            kwargs['used_pct'] = used_pct
        if frag_pct != _DefaultArg:
            kwargs['frag_pct'] = frag_pct
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def total_size(self) -> "uint32_t":  # NOQA
            ...

        @total_size.setter
        def total_size(self, value: "uint32_t"):
            ...

        @property
        def free_cnt(self) -> "uint32_t":  # NOQA
            ...

        @free_cnt.setter
        def free_cnt(self, value: "uint32_t"):
            ...

        @property
        def free_size(self) -> "uint32_t":  # NOQA
            ...

        @free_size.setter
        def free_size(self, value: "uint32_t"):
            ...

        @property
        def free_biggest_size(self) -> "uint32_t":  # NOQA
            ...

        @free_biggest_size.setter
        def free_biggest_size(self, value: "uint32_t"):
            ...

        @property
        def used_cnt(self) -> "uint32_t":  # NOQA
            ...

        @used_cnt.setter
        def used_cnt(self, value: "uint32_t"):
            ...

        @property
        def max_used(self) -> "uint32_t":  # NOQA
            ...

        @max_used.setter
        def max_used(self, value: "uint32_t"):
            ...

        @property
        def used_pct(self) -> "uint8_t":  # NOQA
            ...

        @used_pct.setter
        def used_pct(self, value: "uint8_t"):
            ...

        @property
        def frag_pct(self) -> "uint8_t":  # NOQA
            ...

        @frag_pct.setter
        def frag_pct(self, value: "uint8_t"):
            ...


class _timer_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        period: Optional["uint32_t"] = _DefaultArg, 
        last_run: Optional["uint32_t"] = _DefaultArg, 
        timer_cb: Optional["timer_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        repeat_count: Optional["int32_t"] = _DefaultArg, 
        paused: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if period != _DefaultArg:
            kwargs['period'] = period
        if last_run != _DefaultArg:
            kwargs['last_run'] = last_run
        if timer_cb != _DefaultArg:
            kwargs['timer_cb'] = timer_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if repeat_count != _DefaultArg:
            kwargs['repeat_count'] = repeat_count
        if paused != _DefaultArg:
            kwargs['paused'] = paused
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def period(self) -> "uint32_t":  # NOQA
            ...

        @period.setter
        def period(self, value: "uint32_t"):
            ...

        @property
        def last_run(self) -> "uint32_t":  # NOQA
            ...

        @last_run.setter
        def last_run(self, value: "uint32_t"):
            ...

        @property
        def timer_cb(self) -> "timer_cb_t":  # NOQA
            ...

        @timer_cb.setter
        def timer_cb(self, value: "timer_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def repeat_count(self) -> "int32_t":  # NOQA
            ...

        @repeat_count.setter
        def repeat_count(self, value: "int32_t"):
            ...

        @property
        def paused(self) -> "uint32_t":  # NOQA
            ...

        @paused.setter
        def paused(self, value: "uint32_t"):
            ...


class sqrt_res_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        i: Optional["uint16_t"] = _DefaultArg, 
        f: Optional["uint16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if i != _DefaultArg:
            kwargs['i'] = i
        if f != _DefaultArg:
            kwargs['f'] = f
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def i(self) -> "uint16_t":  # NOQA
            ...

        @i.setter
        def i(self, value: "uint16_t"):
            ...

        @property
        def f(self) -> "uint16_t":  # NOQA
            ...

        @f.setter
        def f(self, value: "uint16_t"):
            ...


class _anim_bezier3_para_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        x1: Optional["int16_t"] = _DefaultArg, 
        y1: Optional["int16_t"] = _DefaultArg, 
        x2: Optional["int16_t"] = _DefaultArg, 
        y2: Optional["int16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if x1 != _DefaultArg:
            kwargs['x1'] = x1
        if y1 != _DefaultArg:
            kwargs['y1'] = y1
        if x2 != _DefaultArg:
            kwargs['x2'] = x2
        if y2 != _DefaultArg:
            kwargs['y2'] = y2
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def x1(self) -> "int16_t":  # NOQA
            ...

        @x1.setter
        def x1(self, value: "int16_t"):
            ...

        @property
        def y1(self) -> "int16_t":  # NOQA
            ...

        @y1.setter
        def y1(self, value: "int16_t"):
            ...

        @property
        def x2(self) -> "int16_t":  # NOQA
            ...

        @x2.setter
        def x2(self, value: "int16_t"):
            ...

        @property
        def y2(self) -> "int16_t":  # NOQA
            ...

        @y2.setter
        def y2(self, value: "int16_t"):
            ...


class _anim_path_para_t(_Union): 
    _special_types_ = {}
    
    def __init__(
        self, 
        bezier3: Optional["anim_bezier3_para_t"] = _DefaultArg
    ):
        _Union.__init__(self)
        kwargs = {}
        if bezier3 != _DefaultArg:
            kwargs['bezier3'] = bezier3
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def bezier3(self) -> "anim_bezier3_para_t":  # NOQA
            ...

        @bezier3.setter
        def bezier3(self, value: "anim_bezier3_para_t"):
            ...


class _anim_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        var: Optional[Any] = _DefaultArg, 
        exec_cb: Optional["anim_exec_xcb_t"] = _DefaultArg, 
        start_cb: Optional["anim_start_cb_t"] = _DefaultArg, 
        ready_cb: Optional["anim_ready_cb_t"] = _DefaultArg, 
        deleted_cb: Optional["anim_deleted_cb_t"] = _DefaultArg, 
        get_value_cb: Optional["anim_get_value_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        path_cb: Optional["anim_path_cb_t"] = _DefaultArg, 
        start_value: Optional["int32_t"] = _DefaultArg, 
        current_value: Optional["int32_t"] = _DefaultArg, 
        end_value: Optional["int32_t"] = _DefaultArg, 
        time: Optional["int32_t"] = _DefaultArg, 
        act_time: Optional["int32_t"] = _DefaultArg, 
        playback_delay: Optional["uint32_t"] = _DefaultArg, 
        playback_time: Optional["uint32_t"] = _DefaultArg, 
        repeat_delay: Optional["uint32_t"] = _DefaultArg, 
        repeat_cnt: Optional["uint16_t"] = _DefaultArg, 
        parameter: Optional[_anim_path_para_t] = _DefaultArg, 
        early_apply: Optional["uint8_t"] = _DefaultArg, 
        last_timer_run: Optional["uint32_t"] = _DefaultArg, 
        playback_now: Optional["uint8_t"] = _DefaultArg, 
        run_round: Optional["uint8_t"] = _DefaultArg, 
        start_cb_called: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if var != _DefaultArg:
            kwargs['var'] = var
        if exec_cb != _DefaultArg:
            kwargs['exec_cb'] = exec_cb
        if start_cb != _DefaultArg:
            kwargs['start_cb'] = start_cb
        if ready_cb != _DefaultArg:
            kwargs['ready_cb'] = ready_cb
        if deleted_cb != _DefaultArg:
            kwargs['deleted_cb'] = deleted_cb
        if get_value_cb != _DefaultArg:
            kwargs['get_value_cb'] = get_value_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if path_cb != _DefaultArg:
            kwargs['path_cb'] = path_cb
        if start_value != _DefaultArg:
            kwargs['start_value'] = start_value
        if current_value != _DefaultArg:
            kwargs['current_value'] = current_value
        if end_value != _DefaultArg:
            kwargs['end_value'] = end_value
        if time != _DefaultArg:
            kwargs['time'] = time
        if act_time != _DefaultArg:
            kwargs['act_time'] = act_time
        if playback_delay != _DefaultArg:
            kwargs['playback_delay'] = playback_delay
        if playback_time != _DefaultArg:
            kwargs['playback_time'] = playback_time
        if repeat_delay != _DefaultArg:
            kwargs['repeat_delay'] = repeat_delay
        if repeat_cnt != _DefaultArg:
            kwargs['repeat_cnt'] = repeat_cnt
        if parameter != _DefaultArg:
            kwargs['parameter'] = parameter
        if early_apply != _DefaultArg:
            kwargs['early_apply'] = early_apply
        if last_timer_run != _DefaultArg:
            kwargs['last_timer_run'] = last_timer_run
        if playback_now != _DefaultArg:
            kwargs['playback_now'] = playback_now
        if run_round != _DefaultArg:
            kwargs['run_round'] = run_round
        if start_cb_called != _DefaultArg:
            kwargs['start_cb_called'] = start_cb_called
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def var(self) -> Any:  # NOQA
            ...

        @var.setter
        def var(self, value: Any):
            ...

        @property
        def exec_cb(self) -> "anim_exec_xcb_t":  # NOQA
            ...

        @exec_cb.setter
        def exec_cb(self, value: "anim_exec_xcb_t"):
            ...

        @property
        def start_cb(self) -> "anim_start_cb_t":  # NOQA
            ...

        @start_cb.setter
        def start_cb(self, value: "anim_start_cb_t"):
            ...

        @property
        def ready_cb(self) -> "anim_ready_cb_t":  # NOQA
            ...

        @ready_cb.setter
        def ready_cb(self, value: "anim_ready_cb_t"):
            ...

        @property
        def deleted_cb(self) -> "anim_deleted_cb_t":  # NOQA
            ...

        @deleted_cb.setter
        def deleted_cb(self, value: "anim_deleted_cb_t"):
            ...

        @property
        def get_value_cb(self) -> "anim_get_value_cb_t":  # NOQA
            ...

        @get_value_cb.setter
        def get_value_cb(self, value: "anim_get_value_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def path_cb(self) -> "anim_path_cb_t":  # NOQA
            ...

        @path_cb.setter
        def path_cb(self, value: "anim_path_cb_t"):
            ...

        @property
        def start_value(self) -> "int32_t":  # NOQA
            ...

        @start_value.setter
        def start_value(self, value: "int32_t"):
            ...

        @property
        def current_value(self) -> "int32_t":  # NOQA
            ...

        @current_value.setter
        def current_value(self, value: "int32_t"):
            ...

        @property
        def end_value(self) -> "int32_t":  # NOQA
            ...

        @end_value.setter
        def end_value(self, value: "int32_t"):
            ...

        @property
        def time(self) -> "int32_t":  # NOQA
            ...

        @time.setter
        def time(self, value: "int32_t"):
            ...

        @property
        def act_time(self) -> "int32_t":  # NOQA
            ...

        @act_time.setter
        def act_time(self, value: "int32_t"):
            ...

        @property
        def playback_delay(self) -> "uint32_t":  # NOQA
            ...

        @playback_delay.setter
        def playback_delay(self, value: "uint32_t"):
            ...

        @property
        def playback_time(self) -> "uint32_t":  # NOQA
            ...

        @playback_time.setter
        def playback_time(self, value: "uint32_t"):
            ...

        @property
        def repeat_delay(self) -> "uint32_t":  # NOQA
            ...

        @repeat_delay.setter
        def repeat_delay(self, value: "uint32_t"):
            ...

        @property
        def repeat_cnt(self) -> "uint16_t":  # NOQA
            ...

        @repeat_cnt.setter
        def repeat_cnt(self, value: "uint16_t"):
            ...

        @property
        def parameter(self) -> _anim_path_para_t:  # NOQA
            ...

        @parameter.setter
        def parameter(self, value: _anim_path_para_t):
            ...

        @property
        def early_apply(self) -> "uint8_t":  # NOQA
            ...

        @early_apply.setter
        def early_apply(self, value: "uint8_t"):
            ...

        @property
        def last_timer_run(self) -> "uint32_t":  # NOQA
            ...

        @last_timer_run.setter
        def last_timer_run(self, value: "uint32_t"):
            ...

        @property
        def playback_now(self) -> "uint8_t":  # NOQA
            ...

        @playback_now.setter
        def playback_now(self, value: "uint8_t"):
            ...

        @property
        def run_round(self) -> "uint8_t":  # NOQA
            ...

        @run_round.setter
        def run_round(self, value: "uint8_t"):
            ...

        @property
        def start_cb_called(self) -> "uint8_t":  # NOQA
            ...

        @start_cb_called.setter
        def start_cb_called(self, value: "uint8_t"):
            ...


class anim_timeline_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        anim: Optional["anim_t"] = _DefaultArg, 
        start_time: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if anim != _DefaultArg:
            kwargs['anim'] = anim
        if start_time != _DefaultArg:
            kwargs['start_time'] = start_time
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def anim(self) -> "anim_t":  # NOQA
            ...

        @anim.setter
        def anim(self, value: "anim_t"):
            ...

        @property
        def start_time(self) -> "uint32_t":  # NOQA
            ...

        @start_time.setter
        def start_time(self, value: "uint32_t"):
            ...


class anim_timeline_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        anim_dsc: Optional["anim_timeline_dsc_t"] = _DefaultArg, 
        anim_dsc_cnt: Optional["uint32_t"] = _DefaultArg, 
        reverse: Optional[bool_t] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if anim_dsc != _DefaultArg:
            kwargs['anim_dsc'] = anim_dsc
        if anim_dsc_cnt != _DefaultArg:
            kwargs['anim_dsc_cnt'] = anim_dsc_cnt
        if reverse != _DefaultArg:
            kwargs['reverse'] = reverse
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def anim_dsc(self) -> "anim_timeline_dsc_t":  # NOQA
            ...

        @anim_dsc.setter
        def anim_dsc(self, value: "anim_timeline_dsc_t"):
            ...

        @property
        def anim_dsc_cnt(self) -> "uint32_t":  # NOQA
            ...

        @anim_dsc_cnt.setter
        def anim_dsc_cnt(self, value: "uint32_t"):
            ...

        @property
        def reverse(self) -> _type_bool_t:  # NOQA
            ...

        @reverse.setter
        def reverse(self, value: _type_bool_t):
            ...


class point_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        x: Optional["coord_t"] = _DefaultArg, 
        y: Optional["coord_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if x != _DefaultArg:
            kwargs['x'] = x
        if y != _DefaultArg:
            kwargs['y'] = y
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def x(self) -> "coord_t":  # NOQA
            ...

        @x.setter
        def x(self, value: "coord_t"):
            ...

        @property
        def y(self) -> "coord_t":  # NOQA
            ...

        @y.setter
        def y(self, value: "coord_t"):
            ...


class area_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        x1: Optional["coord_t"] = _DefaultArg, 
        y1: Optional["coord_t"] = _DefaultArg, 
        x2: Optional["coord_t"] = _DefaultArg, 
        y2: Optional["coord_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if x1 != _DefaultArg:
            kwargs['x1'] = x1
        if y1 != _DefaultArg:
            kwargs['y1'] = y1
        if x2 != _DefaultArg:
            kwargs['x2'] = x2
        if y2 != _DefaultArg:
            kwargs['y2'] = y2
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def x1(self) -> "coord_t":  # NOQA
            ...

        @x1.setter
        def x1(self, value: "coord_t"):
            ...

        @property
        def y1(self) -> "coord_t":  # NOQA
            ...

        @y1.setter
        def y1(self, value: "coord_t"):
            ...

        @property
        def x2(self) -> "coord_t":  # NOQA
            ...

        @x2.setter
        def x2(self, value: "coord_t"):
            ...

        @property
        def y2(self) -> "coord_t":  # NOQA
            ...

        @y2.setter
        def y2(self, value: "coord_t"):
            ...


class font_glyph_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        resolved_font: Optional["_font_t"] = _DefaultArg, 
        adv_w: Optional["uint16_t"] = _DefaultArg, 
        box_w: Optional["uint16_t"] = _DefaultArg, 
        box_h: Optional["uint16_t"] = _DefaultArg, 
        ofs_x: Optional["int16_t"] = _DefaultArg, 
        ofs_y: Optional["int16_t"] = _DefaultArg, 
        bpp: Optional["uint8_t"] = _DefaultArg, 
        is_placeholder: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if resolved_font != _DefaultArg:
            kwargs['resolved_font'] = resolved_font
        if adv_w != _DefaultArg:
            kwargs['adv_w'] = adv_w
        if box_w != _DefaultArg:
            kwargs['box_w'] = box_w
        if box_h != _DefaultArg:
            kwargs['box_h'] = box_h
        if ofs_x != _DefaultArg:
            kwargs['ofs_x'] = ofs_x
        if ofs_y != _DefaultArg:
            kwargs['ofs_y'] = ofs_y
        if bpp != _DefaultArg:
            kwargs['bpp'] = bpp
        if is_placeholder != _DefaultArg:
            kwargs['is_placeholder'] = is_placeholder
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def resolved_font(self) -> "_font_t":  # NOQA
            ...

        @resolved_font.setter
        def resolved_font(self, value: "_font_t"):
            ...

        @property
        def adv_w(self) -> "uint16_t":  # NOQA
            ...

        @adv_w.setter
        def adv_w(self, value: "uint16_t"):
            ...

        @property
        def box_w(self) -> "uint16_t":  # NOQA
            ...

        @box_w.setter
        def box_w(self, value: "uint16_t"):
            ...

        @property
        def box_h(self) -> "uint16_t":  # NOQA
            ...

        @box_h.setter
        def box_h(self, value: "uint16_t"):
            ...

        @property
        def ofs_x(self) -> "int16_t":  # NOQA
            ...

        @ofs_x.setter
        def ofs_x(self, value: "int16_t"):
            ...

        @property
        def ofs_y(self) -> "int16_t":  # NOQA
            ...

        @ofs_y.setter
        def ofs_y(self, value: "int16_t"):
            ...

        @property
        def bpp(self) -> "uint8_t":  # NOQA
            ...

        @bpp.setter
        def bpp(self, value: "uint8_t"):
            ...

        @property
        def is_placeholder(self) -> "uint8_t":  # NOQA
            ...

        @is_placeholder.setter
        def is_placeholder(self, value: "uint8_t"):
            ...


class _font_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        get_glyph_dsc: Optional[Callable[["_font_t", "font_glyph_dsc_t", "uint32_t", "uint32_t"], "bool_t"]] = _DefaultArg, 
        get_glyph_bitmap: Optional[Callable[["_font_t", "uint32_t", "uint8_t"], "uint8_t"]] = _DefaultArg, 
        line_height: Optional["coord_t"] = _DefaultArg, 
        base_line: Optional["coord_t"] = _DefaultArg, 
        subpx: Optional["uint8_t"] = _DefaultArg, 
        underline_position: Optional["int8_t"] = _DefaultArg, 
        underline_thickness: Optional["int8_t"] = _DefaultArg, 
        dsc: Optional[Any] = _DefaultArg, 
        fallback: Optional["_font_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if get_glyph_dsc != _DefaultArg:
            kwargs['get_glyph_dsc'] = get_glyph_dsc
        if get_glyph_bitmap != _DefaultArg:
            kwargs['get_glyph_bitmap'] = get_glyph_bitmap
        if line_height != _DefaultArg:
            kwargs['line_height'] = line_height
        if base_line != _DefaultArg:
            kwargs['base_line'] = base_line
        if subpx != _DefaultArg:
            kwargs['subpx'] = subpx
        if underline_position != _DefaultArg:
            kwargs['underline_position'] = underline_position
        if underline_thickness != _DefaultArg:
            kwargs['underline_thickness'] = underline_thickness
        if dsc != _DefaultArg:
            kwargs['dsc'] = dsc
        if fallback != _DefaultArg:
            kwargs['fallback'] = fallback
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def get_glyph_dsc(self) -> Callable[["_font_t", "font_glyph_dsc_t", "uint32_t", "uint32_t"], "bool_t"]:  # NOQA
            ...

        @get_glyph_dsc.setter
        def get_glyph_dsc(self, value: Callable[["_font_t", "font_glyph_dsc_t", "uint32_t", "uint32_t"], "bool_t"]):
            ...

        @property
        def get_glyph_bitmap(self) -> Callable[["_font_t", "uint32_t", "uint8_t"], "uint8_t"]:  # NOQA
            ...

        @get_glyph_bitmap.setter
        def get_glyph_bitmap(self, value: Callable[["_font_t", "uint32_t", "uint8_t"], "uint8_t"]):
            ...

        @property
        def line_height(self) -> "coord_t":  # NOQA
            ...

        @line_height.setter
        def line_height(self, value: "coord_t"):
            ...

        @property
        def base_line(self) -> "coord_t":  # NOQA
            ...

        @base_line.setter
        def base_line(self, value: "coord_t"):
            ...

        @property
        def subpx(self) -> "uint8_t":  # NOQA
            ...

        @subpx.setter
        def subpx(self, value: "uint8_t"):
            ...

        @property
        def underline_position(self) -> "int8_t":  # NOQA
            ...

        @underline_position.setter
        def underline_position(self, value: "int8_t"):
            ...

        @property
        def underline_thickness(self) -> "int8_t":  # NOQA
            ...

        @underline_thickness.setter
        def underline_thickness(self, value: "int8_t"):
            ...

        @property
        def dsc(self) -> Any:  # NOQA
            ...

        @dsc.setter
        def dsc(self, value: Any):
            ...

        @property
        def fallback(self) -> "_font_t":  # NOQA
            ...

        @fallback.setter
        def fallback(self, value: "_font_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class color_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        blue: Optional["uint8_t"] = _DefaultArg, 
        green: Optional["uint8_t"] = _DefaultArg, 
        red: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if blue != _DefaultArg:
            kwargs['blue'] = blue
        if green != _DefaultArg:
            kwargs['green'] = green
        if red != _DefaultArg:
            kwargs['red'] = red
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def blue(self) -> "uint8_t":  # NOQA
            ...

        @blue.setter
        def blue(self, value: "uint8_t"):
            ...

        @property
        def green(self) -> "uint8_t":  # NOQA
            ...

        @green.setter
        def green(self, value: "uint8_t"):
            ...

        @property
        def red(self) -> "uint8_t":  # NOQA
            ...

        @red.setter
        def red(self, value: "uint8_t"):
            ...


class color16_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        blue: Optional["uint16_t"] = _DefaultArg, 
        green: Optional["uint16_t"] = _DefaultArg, 
        red: Optional["uint16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if blue != _DefaultArg:
            kwargs['blue'] = blue
        if green != _DefaultArg:
            kwargs['green'] = green
        if red != _DefaultArg:
            kwargs['red'] = red
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def blue(self) -> "uint16_t":  # NOQA
            ...

        @blue.setter
        def blue(self, value: "uint16_t"):
            ...

        @property
        def green(self) -> "uint16_t":  # NOQA
            ...

        @green.setter
        def green(self, value: "uint16_t"):
            ...

        @property
        def red(self) -> "uint16_t":  # NOQA
            ...

        @red.setter
        def red(self, value: "uint16_t"):
            ...


class color32_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        blue: Optional["uint8_t"] = _DefaultArg, 
        green: Optional["uint8_t"] = _DefaultArg, 
        red: Optional["uint8_t"] = _DefaultArg, 
        alpha: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if blue != _DefaultArg:
            kwargs['blue'] = blue
        if green != _DefaultArg:
            kwargs['green'] = green
        if red != _DefaultArg:
            kwargs['red'] = red
        if alpha != _DefaultArg:
            kwargs['alpha'] = alpha
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def blue(self) -> "uint8_t":  # NOQA
            ...

        @blue.setter
        def blue(self, value: "uint8_t"):
            ...

        @property
        def green(self) -> "uint8_t":  # NOQA
            ...

        @green.setter
        def green(self, value: "uint8_t"):
            ...

        @property
        def red(self) -> "uint8_t":  # NOQA
            ...

        @red.setter
        def red(self, value: "uint8_t"):
            ...

        @property
        def alpha(self) -> "uint8_t":  # NOQA
            ...

        @alpha.setter
        def alpha(self, value: "uint8_t"):
            ...


class color_hsv_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        h: Optional["uint16_t"] = _DefaultArg, 
        s: Optional["uint8_t"] = _DefaultArg, 
        v: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if h != _DefaultArg:
            kwargs['h'] = h
        if s != _DefaultArg:
            kwargs['s'] = s
        if v != _DefaultArg:
            kwargs['v'] = v
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def h(self) -> "uint16_t":  # NOQA
            ...

        @h.setter
        def h(self, value: "uint16_t"):
            ...

        @property
        def s(self) -> "uint8_t":  # NOQA
            ...

        @s.setter
        def s(self, value: "uint8_t"):
            ...

        @property
        def v(self) -> "uint8_t":  # NOQA
            ...

        @v.setter
        def v(self, value: "uint8_t"):
            ...


class _color_filter_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        filter_cb: Optional["color_filter_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if filter_cb != _DefaultArg:
            kwargs['filter_cb'] = filter_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def filter_cb(self) -> "color_filter_cb_t":  # NOQA
            ...

        @filter_cb.setter
        def filter_cb(self, value: "color_filter_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class gradient_stop_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        color: Optional["color_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        frac: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if color != _DefaultArg:
            kwargs['color'] = color
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if frac != _DefaultArg:
            kwargs['frac'] = frac
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def frac(self) -> "uint8_t":  # NOQA
            ...

        @frac.setter
        def frac(self, value: "uint8_t"):
            ...


class grad_dsc_t(_Structure): 
    _special_types_ = {
        'stops': list
    }
    
    def __init__(
        self, 
        stops: Optional[List["gradient_stop_t"]] = _DefaultArg, 
        stops_count: Optional["uint8_t"] = _DefaultArg, 
        dir: Optional["grad_dir_t"] = _DefaultArg, 
        dither: Optional["dither_mode_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if stops != _DefaultArg:
            kwargs['stops'] = stops
        if stops_count != _DefaultArg:
            kwargs['stops_count'] = stops_count
        if dir != _DefaultArg:
            kwargs['dir'] = dir
        if dither != _DefaultArg:
            kwargs['dither'] = dither
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def stops(self) -> List["gradient_stop_t"]:  # NOQA
            ...

        @stops.setter
        def stops(self, value: List["gradient_stop_t"]):
            ...

        @property
        def stops_count(self) -> "uint8_t":  # NOQA
            ...

        @stops_count.setter
        def stops_count(self, value: "uint8_t"):
            ...

        @property
        def dir(self) -> "grad_dir_t":  # NOQA
            ...

        @dir.setter
        def dir(self, value: "grad_dir_t"):
            ...

        @property
        def dither(self) -> "dither_mode_t":  # NOQA
            ...

        @dither.setter
        def dither(self, value: "dither_mode_t"):
            ...


class style_value_t(_Union): 
    _special_types_ = {}
    
    def __init__(
        self, 
        num: Optional["int32_t"] = _DefaultArg, 
        ptr: Optional[Any] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg
    ):
        _Union.__init__(self)
        kwargs = {}
        if num != _DefaultArg:
            kwargs['num'] = num
        if ptr != _DefaultArg:
            kwargs['ptr'] = ptr
        if color != _DefaultArg:
            kwargs['color'] = color
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def num(self) -> "int32_t":  # NOQA
            ...

        @num.setter
        def num(self, value: "int32_t"):
            ...

        @property
        def ptr(self) -> Any:  # NOQA
            ...

        @ptr.setter
        def ptr(self, value: Any):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...


class style_transition_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        props: Optional["style_prop_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        path_xcb: Optional["anim_path_cb_t"] = _DefaultArg, 
        time: Optional["uint32_t"] = _DefaultArg, 
        delay: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if props != _DefaultArg:
            kwargs['props'] = props
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if path_xcb != _DefaultArg:
            kwargs['path_xcb'] = path_xcb
        if time != _DefaultArg:
            kwargs['time'] = time
        if delay != _DefaultArg:
            kwargs['delay'] = delay
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def props(self) -> "style_prop_t":  # NOQA
            ...

        @props.setter
        def props(self, value: "style_prop_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def path_xcb(self) -> "anim_path_cb_t":  # NOQA
            ...

        @path_xcb.setter
        def path_xcb(self, value: "anim_path_cb_t"):
            ...

        @property
        def time(self) -> "uint32_t":  # NOQA
            ...

        @time.setter
        def time(self, value: "uint32_t"):
            ...

        @property
        def delay(self) -> "uint32_t":  # NOQA
            ...

        @delay.setter
        def delay(self, value: "uint32_t"):
            ...


class style_const_prop_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        prop_ptr: Optional["style_prop_t"] = _DefaultArg, 
        value: Optional["style_value_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if prop_ptr != _DefaultArg:
            kwargs['prop_ptr'] = prop_ptr
        if value != _DefaultArg:
            kwargs['value'] = value
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def prop_ptr(self) -> "style_prop_t":  # NOQA
            ...

        @prop_ptr.setter
        def prop_ptr(self, value: "style_prop_t"):
            ...

        @property
        def value(self) -> "style_value_t":  # NOQA
            ...

        @value.setter
        def value(self, value: "style_value_t"):
            ...


class style_t(_Structure): 
    class _v_p(_Union): 
        _special_types_ = {}
        
        def __init__(
            self, 
            value1: Optional["style_value_t"] = _DefaultArg, 
            values_and_props: Optional["uint8_t"] = _DefaultArg, 
            const_props: Optional["style_const_prop_t"] = _DefaultArg
        ):
            _Union.__init__(self)
            kwargs = {}
            if value1 != _DefaultArg:
                kwargs['value1'] = value1
            if values_and_props != _DefaultArg:
                kwargs['values_and_props'] = values_and_props
            if const_props != _DefaultArg:
                kwargs['const_props'] = const_props
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def value1(self) -> "style_value_t":  # NOQA
                ...
    
            @value1.setter
            def value1(self, value: "style_value_t"):
                ...
    
            @property
            def values_and_props(self) -> "uint8_t":  # NOQA
                ...
    
            @values_and_props.setter
            def values_and_props(self, value: "uint8_t"):
                ...
    
            @property
            def const_props(self) -> "style_const_prop_t":  # NOQA
                ...
    
            @const_props.setter
            def const_props(self, value: "style_const_prop_t"):
                ...

    setattr(_v_p, '__SIZE__', _ctypes.sizeof(_v_p))

    _special_types_ = {}
    
    def __init__(
        self, 
        v_p: Optional[_v_p] = _DefaultArg, 
        prop1: Optional["uint16_t"] = _DefaultArg, 
        has_group: Optional["uint8_t"] = _DefaultArg, 
        prop_cnt: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if v_p != _DefaultArg:
            kwargs['v_p'] = v_p
        if prop1 != _DefaultArg:
            kwargs['prop1'] = prop1
        if has_group != _DefaultArg:
            kwargs['has_group'] = has_group
        if prop_cnt != _DefaultArg:
            kwargs['prop_cnt'] = prop_cnt
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def v_p(self) -> _v_p:  # NOQA
            ...

        @v_p.setter
        def v_p(self, value: _v_p):
            ...

        @property
        def prop1(self) -> "uint16_t":  # NOQA
            ...

        @prop1.setter
        def prop1(self, value: "uint16_t"):
            ...

        @property
        def has_group(self) -> "uint8_t":  # NOQA
            ...

        @has_group.setter
        def has_group(self, value: "uint8_t"):
            ...

        @property
        def prop_cnt(self) -> "uint8_t":  # NOQA
            ...

        @prop_cnt.setter
        def prop_cnt(self, value: "uint8_t"):
            ...


class event_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        cb: Optional["event_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        filter: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if cb != _DefaultArg:
            kwargs['cb'] = cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if filter != _DefaultArg:
            kwargs['filter'] = filter
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def cb(self) -> "event_cb_t":  # NOQA
            ...

        @cb.setter
        def cb(self, value: "event_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def filter(self) -> "uint32_t":  # NOQA
            ...

        @filter.setter
        def filter(self, value: "uint32_t"):
            ...


class event_list_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        dsc: Optional["event_dsc_t"] = _DefaultArg, 
        cnt: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if dsc != _DefaultArg:
            kwargs['dsc'] = dsc
        if cnt != _DefaultArg:
            kwargs['cnt'] = cnt
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def dsc(self) -> "event_dsc_t":  # NOQA
            ...

        @dsc.setter
        def dsc(self, value: "event_dsc_t"):
            ...

        @property
        def cnt(self) -> "uint32_t":  # NOQA
            ...

        @cnt.setter
        def cnt(self, value: "uint32_t"):
            ...


class _event_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        current_target: Optional[Any] = _DefaultArg, 
        original_target: Optional[Any] = _DefaultArg, 
        code: Optional["event_code_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        param: Optional[Any] = _DefaultArg, 
        prev: Optional["_event_t"] = _DefaultArg, 
        deleted: Optional["uint8_t"] = _DefaultArg, 
        stop_processing: Optional["uint8_t"] = _DefaultArg, 
        stop_bubbling: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if current_target != _DefaultArg:
            kwargs['current_target'] = current_target
        if original_target != _DefaultArg:
            kwargs['original_target'] = original_target
        if code != _DefaultArg:
            kwargs['code'] = code
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if param != _DefaultArg:
            kwargs['param'] = param
        if prev != _DefaultArg:
            kwargs['prev'] = prev
        if deleted != _DefaultArg:
            kwargs['deleted'] = deleted
        if stop_processing != _DefaultArg:
            kwargs['stop_processing'] = stop_processing
        if stop_bubbling != _DefaultArg:
            kwargs['stop_bubbling'] = stop_bubbling
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def current_target(self) -> Any:  # NOQA
            ...

        @current_target.setter
        def current_target(self, value: Any):
            ...

        @property
        def original_target(self) -> Any:  # NOQA
            ...

        @original_target.setter
        def original_target(self, value: Any):
            ...

        @property
        def code(self) -> "event_code_t":  # NOQA
            ...

        @code.setter
        def code(self, value: "event_code_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def param(self) -> Any:  # NOQA
            ...

        @param.setter
        def param(self, value: Any):
            ...

        @property
        def prev(self) -> "_event_t":  # NOQA
            ...

        @prev.setter
        def prev(self, value: "_event_t"):
            ...

        @property
        def deleted(self) -> "uint8_t":  # NOQA
            ...

        @deleted.setter
        def deleted(self, value: "uint8_t"):
            ...

        @property
        def stop_processing(self) -> "uint8_t":  # NOQA
            ...

        @stop_processing.setter
        def stop_processing(self, value: "uint8_t"):
            ...

        @property
        def stop_bubbling(self) -> "uint8_t":  # NOQA
            ...

        @stop_bubbling.setter
        def stop_bubbling(self, value: "uint8_t"):
            ...


class img_header_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        cf: Optional["uint32_t"] = _DefaultArg, 
        always_zero: Optional["uint32_t"] = _DefaultArg, 
        reserved: Optional["uint32_t"] = _DefaultArg, 
        w: Optional["uint32_t"] = _DefaultArg, 
        h: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if cf != _DefaultArg:
            kwargs['cf'] = cf
        if always_zero != _DefaultArg:
            kwargs['always_zero'] = always_zero
        if reserved != _DefaultArg:
            kwargs['reserved'] = reserved
        if w != _DefaultArg:
            kwargs['w'] = w
        if h != _DefaultArg:
            kwargs['h'] = h
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def cf(self) -> "uint32_t":  # NOQA
            ...

        @cf.setter
        def cf(self, value: "uint32_t"):
            ...

        @property
        def always_zero(self) -> "uint32_t":  # NOQA
            ...

        @always_zero.setter
        def always_zero(self, value: "uint32_t"):
            ...

        @property
        def reserved(self) -> "uint32_t":  # NOQA
            ...

        @reserved.setter
        def reserved(self, value: "uint32_t"):
            ...

        @property
        def w(self) -> "uint32_t":  # NOQA
            ...

        @w.setter
        def w(self, value: "uint32_t"):
            ...

        @property
        def h(self) -> "uint32_t":  # NOQA
            ...

        @h.setter
        def h(self, value: "uint32_t"):
            ...


class img_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        header: Optional["img_header_t"] = _DefaultArg, 
        data_size: Optional["uint32_t"] = _DefaultArg, 
        data: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if header != _DefaultArg:
            kwargs['header'] = header
        if data_size != _DefaultArg:
            kwargs['data_size'] = data_size
        if data != _DefaultArg:
            kwargs['data'] = data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def header(self) -> "img_header_t":  # NOQA
            ...

        @header.setter
        def header(self, value: "img_header_t"):
            ...

        @property
        def data_size(self) -> "uint32_t":  # NOQA
            ...

        @data_size.setter
        def data_size(self, value: "uint32_t"):
            ...

        @property
        def data(self) -> "uint8_t":  # NOQA
            ...

        @data.setter
        def data(self, value: "uint8_t"):
            ...


class _fs_drv_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        letter: Optional["char_t"] = _DefaultArg, 
        cache_size: Optional["uint16_t"] = _DefaultArg, 
        ready_cb: Optional[Callable[["_fs_drv_t"], "bool_t"]] = _DefaultArg, 
        open_cb: Optional[Callable[["_fs_drv_t", "char_t", "fs_mode_t"], "void_t"]] = _DefaultArg, 
        close_cb: Optional[Callable[["_fs_drv_t", "void_t"], "fs_res_t"]] = _DefaultArg, 
        read_cb: Optional[Callable[["_fs_drv_t", "void_t", "void_t", "uint32_t", "uint32_t"], "fs_res_t"]] = _DefaultArg, 
        write_cb: Optional[Callable[["_fs_drv_t", "void_t", "void_t", "uint32_t", "uint32_t"], "fs_res_t"]] = _DefaultArg, 
        seek_cb: Optional[Callable[["_fs_drv_t", "void_t", "uint32_t", "fs_whence_t"], "fs_res_t"]] = _DefaultArg, 
        tell_cb: Optional[Callable[["_fs_drv_t", "void_t", "uint32_t"], "fs_res_t"]] = _DefaultArg, 
        dir_open_cb: Optional[Callable[["_fs_drv_t", "char_t"], "void_t"]] = _DefaultArg, 
        dir_read_cb: Optional[Callable[["_fs_drv_t", "void_t", "char_t"], "fs_res_t"]] = _DefaultArg, 
        dir_close_cb: Optional[Callable[["_fs_drv_t", "void_t"], "fs_res_t"]] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if letter != _DefaultArg:
            kwargs['letter'] = letter
        if cache_size != _DefaultArg:
            kwargs['cache_size'] = cache_size
        if ready_cb != _DefaultArg:
            kwargs['ready_cb'] = ready_cb
        if open_cb != _DefaultArg:
            kwargs['open_cb'] = open_cb
        if close_cb != _DefaultArg:
            kwargs['close_cb'] = close_cb
        if read_cb != _DefaultArg:
            kwargs['read_cb'] = read_cb
        if write_cb != _DefaultArg:
            kwargs['write_cb'] = write_cb
        if seek_cb != _DefaultArg:
            kwargs['seek_cb'] = seek_cb
        if tell_cb != _DefaultArg:
            kwargs['tell_cb'] = tell_cb
        if dir_open_cb != _DefaultArg:
            kwargs['dir_open_cb'] = dir_open_cb
        if dir_read_cb != _DefaultArg:
            kwargs['dir_read_cb'] = dir_read_cb
        if dir_close_cb != _DefaultArg:
            kwargs['dir_close_cb'] = dir_close_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def letter(self) -> "char_t":  # NOQA
            ...

        @letter.setter
        def letter(self, value: "char_t"):
            ...

        @property
        def cache_size(self) -> "uint16_t":  # NOQA
            ...

        @cache_size.setter
        def cache_size(self, value: "uint16_t"):
            ...

        @property
        def ready_cb(self) -> Callable[["_fs_drv_t"], "bool_t"]:  # NOQA
            ...

        @ready_cb.setter
        def ready_cb(self, value: Callable[["_fs_drv_t"], "bool_t"]):
            ...

        @property
        def open_cb(self) -> Callable[["_fs_drv_t", "char_t", "fs_mode_t"], "void_t"]:  # NOQA
            ...

        @open_cb.setter
        def open_cb(self, value: Callable[["_fs_drv_t", "char_t", "fs_mode_t"], "void_t"]):
            ...

        @property
        def close_cb(self) -> Callable[["_fs_drv_t", "void_t"], "fs_res_t"]:  # NOQA
            ...

        @close_cb.setter
        def close_cb(self, value: Callable[["_fs_drv_t", "void_t"], "fs_res_t"]):
            ...

        @property
        def read_cb(self) -> Callable[["_fs_drv_t", "void_t", "void_t", "uint32_t", "uint32_t"], "fs_res_t"]:  # NOQA
            ...

        @read_cb.setter
        def read_cb(self, value: Callable[["_fs_drv_t", "void_t", "void_t", "uint32_t", "uint32_t"], "fs_res_t"]):
            ...

        @property
        def write_cb(self) -> Callable[["_fs_drv_t", "void_t", "void_t", "uint32_t", "uint32_t"], "fs_res_t"]:  # NOQA
            ...

        @write_cb.setter
        def write_cb(self, value: Callable[["_fs_drv_t", "void_t", "void_t", "uint32_t", "uint32_t"], "fs_res_t"]):
            ...

        @property
        def seek_cb(self) -> Callable[["_fs_drv_t", "void_t", "uint32_t", "fs_whence_t"], "fs_res_t"]:  # NOQA
            ...

        @seek_cb.setter
        def seek_cb(self, value: Callable[["_fs_drv_t", "void_t", "uint32_t", "fs_whence_t"], "fs_res_t"]):
            ...

        @property
        def tell_cb(self) -> Callable[["_fs_drv_t", "void_t", "uint32_t"], "fs_res_t"]:  # NOQA
            ...

        @tell_cb.setter
        def tell_cb(self, value: Callable[["_fs_drv_t", "void_t", "uint32_t"], "fs_res_t"]):
            ...

        @property
        def dir_open_cb(self) -> Callable[["_fs_drv_t", "char_t"], "void_t"]:  # NOQA
            ...

        @dir_open_cb.setter
        def dir_open_cb(self, value: Callable[["_fs_drv_t", "char_t"], "void_t"]):
            ...

        @property
        def dir_read_cb(self) -> Callable[["_fs_drv_t", "void_t", "char_t"], "fs_res_t"]:  # NOQA
            ...

        @dir_read_cb.setter
        def dir_read_cb(self, value: Callable[["_fs_drv_t", "void_t", "char_t"], "fs_res_t"]):
            ...

        @property
        def dir_close_cb(self) -> Callable[["_fs_drv_t", "void_t"], "fs_res_t"]:  # NOQA
            ...

        @dir_close_cb.setter
        def dir_close_cb(self, value: Callable[["_fs_drv_t", "void_t"], "fs_res_t"]):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class fs_file_cache_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        start: Optional["uint32_t"] = _DefaultArg, 
        end: Optional["uint32_t"] = _DefaultArg, 
        file_position: Optional["uint32_t"] = _DefaultArg, 
        buffer: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if start != _DefaultArg:
            kwargs['start'] = start
        if end != _DefaultArg:
            kwargs['end'] = end
        if file_position != _DefaultArg:
            kwargs['file_position'] = file_position
        if buffer != _DefaultArg:
            kwargs['buffer'] = buffer
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def start(self) -> "uint32_t":  # NOQA
            ...

        @start.setter
        def start(self, value: "uint32_t"):
            ...

        @property
        def end(self) -> "uint32_t":  # NOQA
            ...

        @end.setter
        def end(self, value: "uint32_t"):
            ...

        @property
        def file_position(self) -> "uint32_t":  # NOQA
            ...

        @file_position.setter
        def file_position(self, value: "uint32_t"):
            ...

        @property
        def buffer(self) -> Any:  # NOQA
            ...

        @buffer.setter
        def buffer(self, value: Any):
            ...


class fs_file_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        file_d: Optional[Any] = _DefaultArg, 
        drv: Optional["fs_drv_t"] = _DefaultArg, 
        cache: Optional["fs_file_cache_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if file_d != _DefaultArg:
            kwargs['file_d'] = file_d
        if drv != _DefaultArg:
            kwargs['drv'] = drv
        if cache != _DefaultArg:
            kwargs['cache'] = cache
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def file_d(self) -> Any:  # NOQA
            ...

        @file_d.setter
        def file_d(self, value: Any):
            ...

        @property
        def drv(self) -> "fs_drv_t":  # NOQA
            ...

        @drv.setter
        def drv(self, value: "fs_drv_t"):
            ...

        @property
        def cache(self) -> "fs_file_cache_t":  # NOQA
            ...

        @cache.setter
        def cache(self, value: "fs_file_cache_t"):
            ...


class fs_dir_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        dir_d: Optional[Any] = _DefaultArg, 
        drv: Optional["fs_drv_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if dir_d != _DefaultArg:
            kwargs['dir_d'] = dir_d
        if drv != _DefaultArg:
            kwargs['drv'] = drv
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def dir_d(self) -> Any:  # NOQA
            ...

        @dir_d.setter
        def dir_d(self, value: Any):
            ...

        @property
        def drv(self) -> "fs_drv_t":  # NOQA
            ...

        @drv.setter
        def drv(self, value: "fs_drv_t"):
            ...


class _img_decoder_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        info_cb: Optional["img_decoder_info_f_t"] = _DefaultArg, 
        open_cb: Optional["img_decoder_open_f_t"] = _DefaultArg, 
        read_line_cb: Optional["img_decoder_read_line_f_t"] = _DefaultArg, 
        close_cb: Optional["img_decoder_close_f_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if info_cb != _DefaultArg:
            kwargs['info_cb'] = info_cb
        if open_cb != _DefaultArg:
            kwargs['open_cb'] = open_cb
        if read_line_cb != _DefaultArg:
            kwargs['read_line_cb'] = read_line_cb
        if close_cb != _DefaultArg:
            kwargs['close_cb'] = close_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def info_cb(self) -> "img_decoder_info_f_t":  # NOQA
            ...

        @info_cb.setter
        def info_cb(self, value: "img_decoder_info_f_t"):
            ...

        @property
        def open_cb(self) -> "img_decoder_open_f_t":  # NOQA
            ...

        @open_cb.setter
        def open_cb(self, value: "img_decoder_open_f_t"):
            ...

        @property
        def read_line_cb(self) -> "img_decoder_read_line_f_t":  # NOQA
            ...

        @read_line_cb.setter
        def read_line_cb(self, value: "img_decoder_read_line_f_t"):
            ...

        @property
        def close_cb(self) -> "img_decoder_close_f_t":  # NOQA
            ...

        @close_cb.setter
        def close_cb(self, value: "img_decoder_close_f_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class _img_decoder_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        decoder: Optional["img_decoder_t"] = _DefaultArg, 
        src: Optional[Any] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        frame_id: Optional["int32_t"] = _DefaultArg, 
        src_type: Optional["img_src_t"] = _DefaultArg, 
        header: Optional["img_header_t"] = _DefaultArg, 
        img_data: Optional["uint8_t"] = _DefaultArg, 
        palette: Optional["color32_t"] = _DefaultArg, 
        palette_size: Optional["uint32_t"] = _DefaultArg, 
        time_to_open: Optional["uint32_t"] = _DefaultArg, 
        error_msg: Optional["char_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if decoder != _DefaultArg:
            kwargs['decoder'] = decoder
        if src != _DefaultArg:
            kwargs['src'] = src
        if color != _DefaultArg:
            kwargs['color'] = color
        if frame_id != _DefaultArg:
            kwargs['frame_id'] = frame_id
        if src_type != _DefaultArg:
            kwargs['src_type'] = src_type
        if header != _DefaultArg:
            kwargs['header'] = header
        if img_data != _DefaultArg:
            kwargs['img_data'] = img_data
        if palette != _DefaultArg:
            kwargs['palette'] = palette
        if palette_size != _DefaultArg:
            kwargs['palette_size'] = palette_size
        if time_to_open != _DefaultArg:
            kwargs['time_to_open'] = time_to_open
        if error_msg != _DefaultArg:
            kwargs['error_msg'] = error_msg
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def decoder(self) -> "img_decoder_t":  # NOQA
            ...

        @decoder.setter
        def decoder(self, value: "img_decoder_t"):
            ...

        @property
        def src(self) -> Any:  # NOQA
            ...

        @src.setter
        def src(self, value: Any):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def frame_id(self) -> "int32_t":  # NOQA
            ...

        @frame_id.setter
        def frame_id(self, value: "int32_t"):
            ...

        @property
        def src_type(self) -> "img_src_t":  # NOQA
            ...

        @src_type.setter
        def src_type(self, value: "img_src_t"):
            ...

        @property
        def header(self) -> "img_header_t":  # NOQA
            ...

        @header.setter
        def header(self, value: "img_header_t"):
            ...

        @property
        def img_data(self) -> "uint8_t":  # NOQA
            ...

        @img_data.setter
        def img_data(self, value: "uint8_t"):
            ...

        @property
        def palette(self) -> "color32_t":  # NOQA
            ...

        @palette.setter
        def palette(self, value: "color32_t"):
            ...

        @property
        def palette_size(self) -> "uint32_t":  # NOQA
            ...

        @palette_size.setter
        def palette_size(self, value: "uint32_t"):
            ...

        @property
        def time_to_open(self) -> "uint32_t":  # NOQA
            ...

        @time_to_open.setter
        def time_to_open(self, value: "uint32_t"):
            ...

        @property
        def error_msg(self) -> "char_t":  # NOQA
            ...

        @error_msg.setter
        def error_msg(self, value: "char_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class _img_cache_entry_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        dec_dsc: Optional["img_decoder_dsc_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if dec_dsc != _DefaultArg:
            kwargs['dec_dsc'] = dec_dsc
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def dec_dsc(self) -> "img_decoder_dsc_t":  # NOQA
            ...

        @dec_dsc.setter
        def dec_dsc(self, value: "img_decoder_dsc_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class img_cache_manager_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        open_cb: Optional[Callable[["void_t", "color_t", "int32_t"], "_img_cache_entry_t"]] = _DefaultArg, 
        set_size_cb: Optional[Callable[["uint16_t"], "void_t"]] = _DefaultArg, 
        invalidate_src_cb: Optional[Callable[["void_t"], "void_t"]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if open_cb != _DefaultArg:
            kwargs['open_cb'] = open_cb
        if set_size_cb != _DefaultArg:
            kwargs['set_size_cb'] = set_size_cb
        if invalidate_src_cb != _DefaultArg:
            kwargs['invalidate_src_cb'] = invalidate_src_cb
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def open_cb(self) -> Callable[["void_t", "color_t", "int32_t"], "_img_cache_entry_t"]:  # NOQA
            ...

        @open_cb.setter
        def open_cb(self, value: Callable[["void_t", "color_t", "int32_t"], "_img_cache_entry_t"]):
            ...

        @property
        def set_size_cb(self) -> Callable[["uint16_t"], "void_t"]:  # NOQA
            ...

        @set_size_cb.setter
        def set_size_cb(self, value: Callable[["uint16_t"], "void_t"]):
            ...

        @property
        def invalidate_src_cb(self) -> Callable[["void_t"], "void_t"]:  # NOQA
            ...

        @invalidate_src_cb.setter
        def invalidate_src_cb(self, value: Callable[["void_t"], "void_t"]):
            ...


class _draw_task_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        next: Optional["_draw_task_t"] = _DefaultArg, 
        type: Optional["draw_task_type_t"] = _DefaultArg, 
        area: Optional["area_t"] = _DefaultArg, 
        clip_area_original: Optional["area_t"] = _DefaultArg, 
        clip_area: Optional["area_t"] = _DefaultArg, 
        state: Optional["int_t"] = _DefaultArg, 
        draw_dsc: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if next != _DefaultArg:
            kwargs['next'] = next
        if type != _DefaultArg:
            kwargs['type'] = type
        if area != _DefaultArg:
            kwargs['area'] = area
        if clip_area_original != _DefaultArg:
            kwargs['clip_area_original'] = clip_area_original
        if clip_area != _DefaultArg:
            kwargs['clip_area'] = clip_area
        if state != _DefaultArg:
            kwargs['state'] = state
        if draw_dsc != _DefaultArg:
            kwargs['draw_dsc'] = draw_dsc
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def next(self) -> "_draw_task_t":  # NOQA
            ...

        @next.setter
        def next(self, value: "_draw_task_t"):
            ...

        @property
        def type(self) -> "draw_task_type_t":  # NOQA
            ...

        @type.setter
        def type(self, value: "draw_task_type_t"):
            ...

        @property
        def area(self) -> "area_t":  # NOQA
            ...

        @area.setter
        def area(self, value: "area_t"):
            ...

        @property
        def clip_area_original(self) -> "area_t":  # NOQA
            ...

        @clip_area_original.setter
        def clip_area_original(self, value: "area_t"):
            ...

        @property
        def clip_area(self) -> "area_t":  # NOQA
            ...

        @clip_area.setter
        def clip_area(self, value: "area_t"):
            ...

        @property
        def state(self) -> "int_t":  # NOQA
            ...

        @state.setter
        def state(self, value: "int_t"):
            ...

        @property
        def draw_dsc(self) -> Any:  # NOQA
            ...

        @draw_dsc.setter
        def draw_dsc(self, value: Any):
            ...


class draw_mask_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class _draw_unit_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        next: Optional["_draw_unit_t"] = _DefaultArg, 
        target_layer: Optional["_layer_t"] = _DefaultArg, 
        clip_area: Optional["area_t"] = _DefaultArg, 
        dispatch: Optional[Callable[["_draw_unit_t", "_layer_t"], "int32_t"]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if next != _DefaultArg:
            kwargs['next'] = next
        if target_layer != _DefaultArg:
            kwargs['target_layer'] = target_layer
        if clip_area != _DefaultArg:
            kwargs['clip_area'] = clip_area
        if dispatch != _DefaultArg:
            kwargs['dispatch'] = dispatch
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def next(self) -> "_draw_unit_t":  # NOQA
            ...

        @next.setter
        def next(self, value: "_draw_unit_t"):
            ...

        @property
        def target_layer(self) -> "_layer_t":  # NOQA
            ...

        @target_layer.setter
        def target_layer(self, value: "_layer_t"):
            ...

        @property
        def clip_area(self) -> "area_t":  # NOQA
            ...

        @clip_area.setter
        def clip_area(self, value: "area_t"):
            ...

        @property
        def dispatch(self) -> Callable[["_draw_unit_t", "_layer_t"], "int32_t"]:  # NOQA
            ...

        @dispatch.setter
        def dispatch(self, value: Callable[["_draw_unit_t", "_layer_t"], "int32_t"]):
            ...


class _layer_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        buf: Optional[Any] = _DefaultArg, 
        buf_area: Optional["area_t"] = _DefaultArg, 
        clip_area: Optional["area_t"] = _DefaultArg, 
        color_format: Optional["color_format_t"] = _DefaultArg, 
        buffer_copy: Optional[Callable[["_layer_t", "void_t", "coord_t", "area_t", "void_t", "coord_t", "area_t"], "void_t"]] = _DefaultArg, 
        buffer_convert: Optional[Callable[["_layer_t"], "void_t"]] = _DefaultArg, 
        buffer_clear: Optional[Callable[["_layer_t", "area_t"], "void_t"]] = _DefaultArg, 
        draw_task_head: Optional["draw_task_t"] = _DefaultArg, 
        parent: Optional["_layer_t"] = _DefaultArg, 
        next: Optional["_layer_t"] = _DefaultArg, 
        all_tasks_added: Optional[bool_t] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if buf != _DefaultArg:
            kwargs['buf'] = buf
        if buf_area != _DefaultArg:
            kwargs['buf_area'] = buf_area
        if clip_area != _DefaultArg:
            kwargs['clip_area'] = clip_area
        if color_format != _DefaultArg:
            kwargs['color_format'] = color_format
        if buffer_copy != _DefaultArg:
            kwargs['buffer_copy'] = buffer_copy
        if buffer_convert != _DefaultArg:
            kwargs['buffer_convert'] = buffer_convert
        if buffer_clear != _DefaultArg:
            kwargs['buffer_clear'] = buffer_clear
        if draw_task_head != _DefaultArg:
            kwargs['draw_task_head'] = draw_task_head
        if parent != _DefaultArg:
            kwargs['parent'] = parent
        if next != _DefaultArg:
            kwargs['next'] = next
        if all_tasks_added != _DefaultArg:
            kwargs['all_tasks_added'] = all_tasks_added
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def buf(self) -> Any:  # NOQA
            ...

        @buf.setter
        def buf(self, value: Any):
            ...

        @property
        def buf_area(self) -> "area_t":  # NOQA
            ...

        @buf_area.setter
        def buf_area(self, value: "area_t"):
            ...

        @property
        def clip_area(self) -> "area_t":  # NOQA
            ...

        @clip_area.setter
        def clip_area(self, value: "area_t"):
            ...

        @property
        def color_format(self) -> "color_format_t":  # NOQA
            ...

        @color_format.setter
        def color_format(self, value: "color_format_t"):
            ...

        @property
        def buffer_copy(self) -> Callable[["_layer_t", "void_t", "coord_t", "area_t", "void_t", "coord_t", "area_t"], "void_t"]:  # NOQA
            ...

        @buffer_copy.setter
        def buffer_copy(self, value: Callable[["_layer_t", "void_t", "coord_t", "area_t", "void_t", "coord_t", "area_t"], "void_t"]):
            ...

        @property
        def buffer_convert(self) -> Callable[["_layer_t"], "void_t"]:  # NOQA
            ...

        @buffer_convert.setter
        def buffer_convert(self, value: Callable[["_layer_t"], "void_t"]):
            ...

        @property
        def buffer_clear(self) -> Callable[["_layer_t", "area_t"], "void_t"]:  # NOQA
            ...

        @buffer_clear.setter
        def buffer_clear(self, value: Callable[["_layer_t", "area_t"], "void_t"]):
            ...

        @property
        def draw_task_head(self) -> "draw_task_t":  # NOQA
            ...

        @draw_task_head.setter
        def draw_task_head(self, value: "draw_task_t"):
            ...

        @property
        def parent(self) -> "_layer_t":  # NOQA
            ...

        @parent.setter
        def parent(self, value: "_layer_t"):
            ...

        @property
        def next(self) -> "_layer_t":  # NOQA
            ...

        @next.setter
        def next(self, value: "_layer_t"):
            ...

        @property
        def all_tasks_added(self) -> _type_bool_t:  # NOQA
            ...

        @all_tasks_added.setter
        def all_tasks_added(self, value: _type_bool_t):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class draw_dsc_base_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["_obj_t"] = _DefaultArg, 
        part: Optional["uint32_t"] = _DefaultArg, 
        id1: Optional["uint32_t"] = _DefaultArg, 
        id2: Optional["uint32_t"] = _DefaultArg, 
        layer: Optional["layer_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if part != _DefaultArg:
            kwargs['part'] = part
        if id1 != _DefaultArg:
            kwargs['id1'] = id1
        if id2 != _DefaultArg:
            kwargs['id2'] = id2
        if layer != _DefaultArg:
            kwargs['layer'] = layer
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "_obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "_obj_t"):
            ...

        @property
        def part(self) -> "uint32_t":  # NOQA
            ...

        @part.setter
        def part(self, value: "uint32_t"):
            ...

        @property
        def id1(self) -> "uint32_t":  # NOQA
            ...

        @id1.setter
        def id1(self, value: "uint32_t"):
            ...

        @property
        def id2(self) -> "uint32_t":  # NOQA
            ...

        @id2.setter
        def id2(self, value: "uint32_t"):
            ...

        @property
        def layer(self) -> "layer_t":  # NOQA
            ...

        @layer.setter
        def layer(self, value: "layer_t"):
            ...


class _gradient_cache_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        color_map: Optional["color_t"] = _DefaultArg, 
        opa_map: Optional["opa_t"] = _DefaultArg, 
        size: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if color_map != _DefaultArg:
            kwargs['color_map'] = color_map
        if opa_map != _DefaultArg:
            kwargs['opa_map'] = opa_map
        if size != _DefaultArg:
            kwargs['size'] = size
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def color_map(self) -> "color_t":  # NOQA
            ...

        @color_map.setter
        def color_map(self, value: "color_t"):
            ...

        @property
        def opa_map(self) -> "opa_t":  # NOQA
            ...

        @opa_map.setter
        def opa_map(self, value: "opa_t"):
            ...

        @property
        def size(self) -> "uint32_t":  # NOQA
            ...

        @size.setter
        def size(self, value: "uint32_t"):
            ...


class draw_rect_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg, 
        bg_opa: Optional["opa_t"] = _DefaultArg, 
        bg_color: Optional["color_t"] = _DefaultArg, 
        bg_grad: Optional["grad_dsc_t"] = _DefaultArg, 
        bg_img_src: Optional[Any] = _DefaultArg, 
        bg_img_symbol_font: Optional[Any] = _DefaultArg, 
        bg_img_recolor: Optional["color_t"] = _DefaultArg, 
        bg_img_opa: Optional["opa_t"] = _DefaultArg, 
        bg_img_recolor_opa: Optional["opa_t"] = _DefaultArg, 
        bg_img_tiled: Optional["uint8_t"] = _DefaultArg, 
        border_color: Optional["color_t"] = _DefaultArg, 
        border_width: Optional["coord_t"] = _DefaultArg, 
        border_opa: Optional["opa_t"] = _DefaultArg, 
        border_side: Optional["border_side_t"] = _DefaultArg, 
        border_post: Optional["uint8_t"] = _DefaultArg, 
        outline_color: Optional["color_t"] = _DefaultArg, 
        outline_width: Optional["coord_t"] = _DefaultArg, 
        outline_pad: Optional["coord_t"] = _DefaultArg, 
        outline_opa: Optional["opa_t"] = _DefaultArg, 
        shadow_color: Optional["color_t"] = _DefaultArg, 
        shadow_width: Optional["coord_t"] = _DefaultArg, 
        shadow_ofs_x: Optional["coord_t"] = _DefaultArg, 
        shadow_ofs_y: Optional["coord_t"] = _DefaultArg, 
        shadow_spread: Optional["coord_t"] = _DefaultArg, 
        shadow_opa: Optional["opa_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        if bg_opa != _DefaultArg:
            kwargs['bg_opa'] = bg_opa
        if bg_color != _DefaultArg:
            kwargs['bg_color'] = bg_color
        if bg_grad != _DefaultArg:
            kwargs['bg_grad'] = bg_grad
        if bg_img_src != _DefaultArg:
            kwargs['bg_img_src'] = bg_img_src
        if bg_img_symbol_font != _DefaultArg:
            kwargs['bg_img_symbol_font'] = bg_img_symbol_font
        if bg_img_recolor != _DefaultArg:
            kwargs['bg_img_recolor'] = bg_img_recolor
        if bg_img_opa != _DefaultArg:
            kwargs['bg_img_opa'] = bg_img_opa
        if bg_img_recolor_opa != _DefaultArg:
            kwargs['bg_img_recolor_opa'] = bg_img_recolor_opa
        if bg_img_tiled != _DefaultArg:
            kwargs['bg_img_tiled'] = bg_img_tiled
        if border_color != _DefaultArg:
            kwargs['border_color'] = border_color
        if border_width != _DefaultArg:
            kwargs['border_width'] = border_width
        if border_opa != _DefaultArg:
            kwargs['border_opa'] = border_opa
        if border_side != _DefaultArg:
            kwargs['border_side'] = border_side
        if border_post != _DefaultArg:
            kwargs['border_post'] = border_post
        if outline_color != _DefaultArg:
            kwargs['outline_color'] = outline_color
        if outline_width != _DefaultArg:
            kwargs['outline_width'] = outline_width
        if outline_pad != _DefaultArg:
            kwargs['outline_pad'] = outline_pad
        if outline_opa != _DefaultArg:
            kwargs['outline_opa'] = outline_opa
        if shadow_color != _DefaultArg:
            kwargs['shadow_color'] = shadow_color
        if shadow_width != _DefaultArg:
            kwargs['shadow_width'] = shadow_width
        if shadow_ofs_x != _DefaultArg:
            kwargs['shadow_ofs_x'] = shadow_ofs_x
        if shadow_ofs_y != _DefaultArg:
            kwargs['shadow_ofs_y'] = shadow_ofs_y
        if shadow_spread != _DefaultArg:
            kwargs['shadow_spread'] = shadow_spread
        if shadow_opa != _DefaultArg:
            kwargs['shadow_opa'] = shadow_opa
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def radius(self) -> "coord_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "coord_t"):
            ...

        @property
        def bg_opa(self) -> "opa_t":  # NOQA
            ...

        @bg_opa.setter
        def bg_opa(self, value: "opa_t"):
            ...

        @property
        def bg_color(self) -> "color_t":  # NOQA
            ...

        @bg_color.setter
        def bg_color(self, value: "color_t"):
            ...

        @property
        def bg_grad(self) -> "grad_dsc_t":  # NOQA
            ...

        @bg_grad.setter
        def bg_grad(self, value: "grad_dsc_t"):
            ...

        @property
        def bg_img_src(self) -> Any:  # NOQA
            ...

        @bg_img_src.setter
        def bg_img_src(self, value: Any):
            ...

        @property
        def bg_img_symbol_font(self) -> Any:  # NOQA
            ...

        @bg_img_symbol_font.setter
        def bg_img_symbol_font(self, value: Any):
            ...

        @property
        def bg_img_recolor(self) -> "color_t":  # NOQA
            ...

        @bg_img_recolor.setter
        def bg_img_recolor(self, value: "color_t"):
            ...

        @property
        def bg_img_opa(self) -> "opa_t":  # NOQA
            ...

        @bg_img_opa.setter
        def bg_img_opa(self, value: "opa_t"):
            ...

        @property
        def bg_img_recolor_opa(self) -> "opa_t":  # NOQA
            ...

        @bg_img_recolor_opa.setter
        def bg_img_recolor_opa(self, value: "opa_t"):
            ...

        @property
        def bg_img_tiled(self) -> "uint8_t":  # NOQA
            ...

        @bg_img_tiled.setter
        def bg_img_tiled(self, value: "uint8_t"):
            ...

        @property
        def border_color(self) -> "color_t":  # NOQA
            ...

        @border_color.setter
        def border_color(self, value: "color_t"):
            ...

        @property
        def border_width(self) -> "coord_t":  # NOQA
            ...

        @border_width.setter
        def border_width(self, value: "coord_t"):
            ...

        @property
        def border_opa(self) -> "opa_t":  # NOQA
            ...

        @border_opa.setter
        def border_opa(self, value: "opa_t"):
            ...

        @property
        def border_side(self) -> "border_side_t":  # NOQA
            ...

        @border_side.setter
        def border_side(self, value: "border_side_t"):
            ...

        @property
        def border_post(self) -> "uint8_t":  # NOQA
            ...

        @border_post.setter
        def border_post(self, value: "uint8_t"):
            ...

        @property
        def outline_color(self) -> "color_t":  # NOQA
            ...

        @outline_color.setter
        def outline_color(self, value: "color_t"):
            ...

        @property
        def outline_width(self) -> "coord_t":  # NOQA
            ...

        @outline_width.setter
        def outline_width(self, value: "coord_t"):
            ...

        @property
        def outline_pad(self) -> "coord_t":  # NOQA
            ...

        @outline_pad.setter
        def outline_pad(self, value: "coord_t"):
            ...

        @property
        def outline_opa(self) -> "opa_t":  # NOQA
            ...

        @outline_opa.setter
        def outline_opa(self, value: "opa_t"):
            ...

        @property
        def shadow_color(self) -> "color_t":  # NOQA
            ...

        @shadow_color.setter
        def shadow_color(self, value: "color_t"):
            ...

        @property
        def shadow_width(self) -> "coord_t":  # NOQA
            ...

        @shadow_width.setter
        def shadow_width(self, value: "coord_t"):
            ...

        @property
        def shadow_ofs_x(self) -> "coord_t":  # NOQA
            ...

        @shadow_ofs_x.setter
        def shadow_ofs_x(self, value: "coord_t"):
            ...

        @property
        def shadow_ofs_y(self) -> "coord_t":  # NOQA
            ...

        @shadow_ofs_y.setter
        def shadow_ofs_y(self, value: "coord_t"):
            ...

        @property
        def shadow_spread(self) -> "coord_t":  # NOQA
            ...

        @shadow_spread.setter
        def shadow_spread(self, value: "coord_t"):
            ...

        @property
        def shadow_opa(self) -> "opa_t":  # NOQA
            ...

        @shadow_opa.setter
        def shadow_opa(self, value: "opa_t"):
            ...


class draw_fill_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        grad: Optional["grad_dsc_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if color != _DefaultArg:
            kwargs['color'] = color
        if grad != _DefaultArg:
            kwargs['grad'] = grad
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def radius(self) -> "coord_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "coord_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def grad(self) -> "grad_dsc_t":  # NOQA
            ...

        @grad.setter
        def grad(self, value: "grad_dsc_t"):
            ...


class draw_bg_img_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg, 
        src: Optional[Any] = _DefaultArg, 
        font: Optional[Any] = _DefaultArg, 
        recolor: Optional["color_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        recolor_opa: Optional["opa_t"] = _DefaultArg, 
        img_header: Optional["img_header_t"] = _DefaultArg, 
        tiled: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        if src != _DefaultArg:
            kwargs['src'] = src
        if font != _DefaultArg:
            kwargs['font'] = font
        if recolor != _DefaultArg:
            kwargs['recolor'] = recolor
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if recolor_opa != _DefaultArg:
            kwargs['recolor_opa'] = recolor_opa
        if img_header != _DefaultArg:
            kwargs['img_header'] = img_header
        if tiled != _DefaultArg:
            kwargs['tiled'] = tiled
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def radius(self) -> "coord_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "coord_t"):
            ...

        @property
        def src(self) -> Any:  # NOQA
            ...

        @src.setter
        def src(self, value: Any):
            ...

        @property
        def font(self) -> Any:  # NOQA
            ...

        @font.setter
        def font(self, value: Any):
            ...

        @property
        def recolor(self) -> "color_t":  # NOQA
            ...

        @recolor.setter
        def recolor(self, value: "color_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def recolor_opa(self) -> "opa_t":  # NOQA
            ...

        @recolor_opa.setter
        def recolor_opa(self, value: "opa_t"):
            ...

        @property
        def img_header(self) -> "img_header_t":  # NOQA
            ...

        @img_header.setter
        def img_header(self, value: "img_header_t"):
            ...

        @property
        def tiled(self) -> "uint8_t":  # NOQA
            ...

        @tiled.setter
        def tiled(self, value: "uint8_t"):
            ...


class draw_border_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        width: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        side: Optional["border_side_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        if color != _DefaultArg:
            kwargs['color'] = color
        if width != _DefaultArg:
            kwargs['width'] = width
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if side != _DefaultArg:
            kwargs['side'] = side
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def radius(self) -> "coord_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "coord_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def width(self) -> "coord_t":  # NOQA
            ...

        @width.setter
        def width(self, value: "coord_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def side(self) -> "border_side_t":  # NOQA
            ...

        @side.setter
        def side(self, value: "border_side_t"):
            ...


class draw_box_shadow_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        width: Optional["coord_t"] = _DefaultArg, 
        spread: Optional["coord_t"] = _DefaultArg, 
        ofs_x: Optional["coord_t"] = _DefaultArg, 
        ofs_y: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        bg_cover: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        if color != _DefaultArg:
            kwargs['color'] = color
        if width != _DefaultArg:
            kwargs['width'] = width
        if spread != _DefaultArg:
            kwargs['spread'] = spread
        if ofs_x != _DefaultArg:
            kwargs['ofs_x'] = ofs_x
        if ofs_y != _DefaultArg:
            kwargs['ofs_y'] = ofs_y
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if bg_cover != _DefaultArg:
            kwargs['bg_cover'] = bg_cover
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def radius(self) -> "coord_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "coord_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def width(self) -> "coord_t":  # NOQA
            ...

        @width.setter
        def width(self, value: "coord_t"):
            ...

        @property
        def spread(self) -> "coord_t":  # NOQA
            ...

        @spread.setter
        def spread(self, value: "coord_t"):
            ...

        @property
        def ofs_x(self) -> "coord_t":  # NOQA
            ...

        @ofs_x.setter
        def ofs_x(self, value: "coord_t"):
            ...

        @property
        def ofs_y(self) -> "coord_t":  # NOQA
            ...

        @ofs_y.setter
        def ofs_y(self, value: "coord_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def bg_cover(self) -> "uint8_t":  # NOQA
            ...

        @bg_cover.setter
        def bg_cover(self, value: "uint8_t"):
            ...


class _draw_label_hint_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        line_start: Optional["int32_t"] = _DefaultArg, 
        y: Optional["int32_t"] = _DefaultArg, 
        coord_y: Optional["int32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if line_start != _DefaultArg:
            kwargs['line_start'] = line_start
        if y != _DefaultArg:
            kwargs['y'] = y
        if coord_y != _DefaultArg:
            kwargs['coord_y'] = coord_y
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def line_start(self) -> "int32_t":  # NOQA
            ...

        @line_start.setter
        def line_start(self, value: "int32_t"):
            ...

        @property
        def y(self) -> "int32_t":  # NOQA
            ...

        @y.setter
        def y(self, value: "int32_t"):
            ...

        @property
        def coord_y(self) -> "int32_t":  # NOQA
            ...

        @coord_y.setter
        def coord_y(self, value: "int32_t"):
            ...


class draw_label_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        text: Optional["char_t"] = _DefaultArg, 
        font: Optional["font_t"] = _DefaultArg, 
        sel_start: Optional["uint32_t"] = _DefaultArg, 
        sel_end: Optional["uint32_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        sel_color: Optional["color_t"] = _DefaultArg, 
        sel_bg_color: Optional["color_t"] = _DefaultArg, 
        line_space: Optional["coord_t"] = _DefaultArg, 
        letter_space: Optional["coord_t"] = _DefaultArg, 
        ofs_x: Optional["coord_t"] = _DefaultArg, 
        ofs_y: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        bidi_dir: Optional["base_dir_t"] = _DefaultArg, 
        align: Optional["text_align_t"] = _DefaultArg, 
        flag: Optional["text_flag_t"] = _DefaultArg, 
        decor: Optional["text_decor_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        text_local: Optional["uint8_t"] = _DefaultArg, 
        hint: Optional["draw_label_hint_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if text != _DefaultArg:
            kwargs['text'] = text
        if font != _DefaultArg:
            kwargs['font'] = font
        if sel_start != _DefaultArg:
            kwargs['sel_start'] = sel_start
        if sel_end != _DefaultArg:
            kwargs['sel_end'] = sel_end
        if color != _DefaultArg:
            kwargs['color'] = color
        if sel_color != _DefaultArg:
            kwargs['sel_color'] = sel_color
        if sel_bg_color != _DefaultArg:
            kwargs['sel_bg_color'] = sel_bg_color
        if line_space != _DefaultArg:
            kwargs['line_space'] = line_space
        if letter_space != _DefaultArg:
            kwargs['letter_space'] = letter_space
        if ofs_x != _DefaultArg:
            kwargs['ofs_x'] = ofs_x
        if ofs_y != _DefaultArg:
            kwargs['ofs_y'] = ofs_y
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if bidi_dir != _DefaultArg:
            kwargs['bidi_dir'] = bidi_dir
        if align != _DefaultArg:
            kwargs['align'] = align
        if flag != _DefaultArg:
            kwargs['flag'] = flag
        if decor != _DefaultArg:
            kwargs['decor'] = decor
        if blend_mode != _DefaultArg:
            kwargs['blend_mode'] = blend_mode
        if text_local != _DefaultArg:
            kwargs['text_local'] = text_local
        if hint != _DefaultArg:
            kwargs['hint'] = hint
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def text(self) -> "char_t":  # NOQA
            ...

        @text.setter
        def text(self, value: "char_t"):
            ...

        @property
        def font(self) -> "font_t":  # NOQA
            ...

        @font.setter
        def font(self, value: "font_t"):
            ...

        @property
        def sel_start(self) -> "uint32_t":  # NOQA
            ...

        @sel_start.setter
        def sel_start(self, value: "uint32_t"):
            ...

        @property
        def sel_end(self) -> "uint32_t":  # NOQA
            ...

        @sel_end.setter
        def sel_end(self, value: "uint32_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def sel_color(self) -> "color_t":  # NOQA
            ...

        @sel_color.setter
        def sel_color(self, value: "color_t"):
            ...

        @property
        def sel_bg_color(self) -> "color_t":  # NOQA
            ...

        @sel_bg_color.setter
        def sel_bg_color(self, value: "color_t"):
            ...

        @property
        def line_space(self) -> "coord_t":  # NOQA
            ...

        @line_space.setter
        def line_space(self, value: "coord_t"):
            ...

        @property
        def letter_space(self) -> "coord_t":  # NOQA
            ...

        @letter_space.setter
        def letter_space(self, value: "coord_t"):
            ...

        @property
        def ofs_x(self) -> "coord_t":  # NOQA
            ...

        @ofs_x.setter
        def ofs_x(self, value: "coord_t"):
            ...

        @property
        def ofs_y(self) -> "coord_t":  # NOQA
            ...

        @ofs_y.setter
        def ofs_y(self, value: "coord_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def bidi_dir(self) -> "base_dir_t":  # NOQA
            ...

        @bidi_dir.setter
        def bidi_dir(self, value: "base_dir_t"):
            ...

        @property
        def align(self) -> "text_align_t":  # NOQA
            ...

        @align.setter
        def align(self, value: "text_align_t"):
            ...

        @property
        def flag(self) -> "text_flag_t":  # NOQA
            ...

        @flag.setter
        def flag(self, value: "text_flag_t"):
            ...

        @property
        def decor(self) -> "text_decor_t":  # NOQA
            ...

        @decor.setter
        def decor(self, value: "text_decor_t"):
            ...

        @property
        def blend_mode(self) -> "blend_mode_t":  # NOQA
            ...

        @blend_mode.setter
        def blend_mode(self, value: "blend_mode_t"):
            ...

        @property
        def text_local(self) -> "uint8_t":  # NOQA
            ...

        @text_local.setter
        def text_local(self, value: "uint8_t"):
            ...

        @property
        def hint(self) -> "draw_label_hint_t":  # NOQA
            ...

        @hint.setter
        def hint(self, value: "draw_label_hint_t"):
            ...


class draw_glyph_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        bitmap: Optional["uint8_t"] = _DefaultArg, 
        bitmap_buf: Optional["uint8_t"] = _DefaultArg, 
        _bitmap_buf_size: Optional["uint32_t"] = _DefaultArg, 
        format: Optional["draw_letter_bitmap_format_t"] = _DefaultArg, 
        letter_coords: Optional["area_t"] = _DefaultArg, 
        bg_coords: Optional["area_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if bitmap != _DefaultArg:
            kwargs['bitmap'] = bitmap
        if bitmap_buf != _DefaultArg:
            kwargs['bitmap_buf'] = bitmap_buf
        if _bitmap_buf_size != _DefaultArg:
            kwargs['_bitmap_buf_size'] = _bitmap_buf_size
        if format != _DefaultArg:
            kwargs['format'] = format
        if letter_coords != _DefaultArg:
            kwargs['letter_coords'] = letter_coords
        if bg_coords != _DefaultArg:
            kwargs['bg_coords'] = bg_coords
        if color != _DefaultArg:
            kwargs['color'] = color
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def bitmap(self) -> "uint8_t":  # NOQA
            ...

        @bitmap.setter
        def bitmap(self, value: "uint8_t"):
            ...

        @property
        def bitmap_buf(self) -> "uint8_t":  # NOQA
            ...

        @bitmap_buf.setter
        def bitmap_buf(self, value: "uint8_t"):
            ...

        @property
        def _bitmap_buf_size(self) -> "uint32_t":  # NOQA
            ...

        @_bitmap_buf_size.setter
        def _bitmap_buf_size(self, value: "uint32_t"):
            ...

        @property
        def format(self) -> "draw_letter_bitmap_format_t":  # NOQA
            ...

        @format.setter
        def format(self, value: "draw_letter_bitmap_format_t"):
            ...

        @property
        def letter_coords(self) -> "area_t":  # NOQA
            ...

        @letter_coords.setter
        def letter_coords(self, value: "area_t"):
            ...

        @property
        def bg_coords(self) -> "area_t":  # NOQA
            ...

        @bg_coords.setter
        def bg_coords(self, value: "area_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...


class draw_img_sup_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        alpha_color: Optional["color_t"] = _DefaultArg, 
        palette: Optional["color32_t"] = _DefaultArg, 
        palette_size: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if alpha_color != _DefaultArg:
            kwargs['alpha_color'] = alpha_color
        if palette != _DefaultArg:
            kwargs['palette'] = palette
        if palette_size != _DefaultArg:
            kwargs['palette_size'] = palette_size
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def alpha_color(self) -> "color_t":  # NOQA
            ...

        @alpha_color.setter
        def alpha_color(self, value: "color_t"):
            ...

        @property
        def palette(self) -> "color32_t":  # NOQA
            ...

        @palette.setter
        def palette(self, value: "color32_t"):
            ...

        @property
        def palette_size(self) -> "uint32_t":  # NOQA
            ...

        @palette_size.setter
        def palette_size(self, value: "uint32_t"):
            ...


class _draw_img_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        src: Optional[Any] = _DefaultArg, 
        angle: Optional["coord_t"] = _DefaultArg, 
        zoom: Optional["coord_t"] = _DefaultArg, 
        pivot: Optional["point_t"] = _DefaultArg, 
        chroma_key_color: Optional["color_t"] = _DefaultArg, 
        recolor: Optional["color_t"] = _DefaultArg, 
        recolor_opa: Optional["opa_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        frame_id: Optional["int32_t"] = _DefaultArg, 
        antialias: Optional["uint16_t"] = _DefaultArg, 
        sup: Optional["draw_img_sup_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if src != _DefaultArg:
            kwargs['src'] = src
        if angle != _DefaultArg:
            kwargs['angle'] = angle
        if zoom != _DefaultArg:
            kwargs['zoom'] = zoom
        if pivot != _DefaultArg:
            kwargs['pivot'] = pivot
        if chroma_key_color != _DefaultArg:
            kwargs['chroma_key_color'] = chroma_key_color
        if recolor != _DefaultArg:
            kwargs['recolor'] = recolor
        if recolor_opa != _DefaultArg:
            kwargs['recolor_opa'] = recolor_opa
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if blend_mode != _DefaultArg:
            kwargs['blend_mode'] = blend_mode
        if frame_id != _DefaultArg:
            kwargs['frame_id'] = frame_id
        if antialias != _DefaultArg:
            kwargs['antialias'] = antialias
        if sup != _DefaultArg:
            kwargs['sup'] = sup
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def src(self) -> Any:  # NOQA
            ...

        @src.setter
        def src(self, value: Any):
            ...

        @property
        def angle(self) -> "coord_t":  # NOQA
            ...

        @angle.setter
        def angle(self, value: "coord_t"):
            ...

        @property
        def zoom(self) -> "coord_t":  # NOQA
            ...

        @zoom.setter
        def zoom(self, value: "coord_t"):
            ...

        @property
        def pivot(self) -> "point_t":  # NOQA
            ...

        @pivot.setter
        def pivot(self, value: "point_t"):
            ...

        @property
        def chroma_key_color(self) -> "color_t":  # NOQA
            ...

        @chroma_key_color.setter
        def chroma_key_color(self, value: "color_t"):
            ...

        @property
        def recolor(self) -> "color_t":  # NOQA
            ...

        @recolor.setter
        def recolor(self, value: "color_t"):
            ...

        @property
        def recolor_opa(self) -> "opa_t":  # NOQA
            ...

        @recolor_opa.setter
        def recolor_opa(self, value: "opa_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def blend_mode(self) -> "blend_mode_t":  # NOQA
            ...

        @blend_mode.setter
        def blend_mode(self, value: "blend_mode_t"):
            ...

        @property
        def frame_id(self) -> "int32_t":  # NOQA
            ...

        @frame_id.setter
        def frame_id(self, value: "int32_t"):
            ...

        @property
        def antialias(self) -> "uint16_t":  # NOQA
            ...

        @antialias.setter
        def antialias(self, value: "uint16_t"):
            ...

        @property
        def sup(self) -> "draw_img_sup_t":  # NOQA
            ...

        @sup.setter
        def sup(self, value: "draw_img_sup_t"):
            ...


class draw_arc_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        width: Optional["coord_t"] = _DefaultArg, 
        start_angle: Optional["uint16_t"] = _DefaultArg, 
        end_angle: Optional["uint16_t"] = _DefaultArg, 
        center: Optional["point_t"] = _DefaultArg, 
        radius: Optional["uint16_t"] = _DefaultArg, 
        img_src: Optional[Any] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        rounded: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if color != _DefaultArg:
            kwargs['color'] = color
        if width != _DefaultArg:
            kwargs['width'] = width
        if start_angle != _DefaultArg:
            kwargs['start_angle'] = start_angle
        if end_angle != _DefaultArg:
            kwargs['end_angle'] = end_angle
        if center != _DefaultArg:
            kwargs['center'] = center
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        if img_src != _DefaultArg:
            kwargs['img_src'] = img_src
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if rounded != _DefaultArg:
            kwargs['rounded'] = rounded
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def width(self) -> "coord_t":  # NOQA
            ...

        @width.setter
        def width(self, value: "coord_t"):
            ...

        @property
        def start_angle(self) -> "uint16_t":  # NOQA
            ...

        @start_angle.setter
        def start_angle(self, value: "uint16_t"):
            ...

        @property
        def end_angle(self) -> "uint16_t":  # NOQA
            ...

        @end_angle.setter
        def end_angle(self, value: "uint16_t"):
            ...

        @property
        def center(self) -> "point_t":  # NOQA
            ...

        @center.setter
        def center(self, value: "point_t"):
            ...

        @property
        def radius(self) -> "uint16_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "uint16_t"):
            ...

        @property
        def img_src(self) -> Any:  # NOQA
            ...

        @img_src.setter
        def img_src(self, value: Any):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def rounded(self) -> "uint8_t":  # NOQA
            ...

        @rounded.setter
        def rounded(self, value: "uint8_t"):
            ...


class draw_line_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        p1: Optional["point_t"] = _DefaultArg, 
        p2: Optional["point_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        width: Optional["coord_t"] = _DefaultArg, 
        dash_width: Optional["coord_t"] = _DefaultArg, 
        dash_gap: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        round_start: Optional["uint8_t"] = _DefaultArg, 
        round_end: Optional["uint8_t"] = _DefaultArg, 
        raw_end: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if p1 != _DefaultArg:
            kwargs['p1'] = p1
        if p2 != _DefaultArg:
            kwargs['p2'] = p2
        if color != _DefaultArg:
            kwargs['color'] = color
        if width != _DefaultArg:
            kwargs['width'] = width
        if dash_width != _DefaultArg:
            kwargs['dash_width'] = dash_width
        if dash_gap != _DefaultArg:
            kwargs['dash_gap'] = dash_gap
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if blend_mode != _DefaultArg:
            kwargs['blend_mode'] = blend_mode
        if round_start != _DefaultArg:
            kwargs['round_start'] = round_start
        if round_end != _DefaultArg:
            kwargs['round_end'] = round_end
        if raw_end != _DefaultArg:
            kwargs['raw_end'] = raw_end
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def p1(self) -> "point_t":  # NOQA
            ...

        @p1.setter
        def p1(self, value: "point_t"):
            ...

        @property
        def p2(self) -> "point_t":  # NOQA
            ...

        @p2.setter
        def p2(self, value: "point_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def width(self) -> "coord_t":  # NOQA
            ...

        @width.setter
        def width(self, value: "coord_t"):
            ...

        @property
        def dash_width(self) -> "coord_t":  # NOQA
            ...

        @dash_width.setter
        def dash_width(self, value: "coord_t"):
            ...

        @property
        def dash_gap(self) -> "coord_t":  # NOQA
            ...

        @dash_gap.setter
        def dash_gap(self, value: "coord_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def blend_mode(self) -> "blend_mode_t":  # NOQA
            ...

        @blend_mode.setter
        def blend_mode(self, value: "blend_mode_t"):
            ...

        @property
        def round_start(self) -> "uint8_t":  # NOQA
            ...

        @round_start.setter
        def round_start(self, value: "uint8_t"):
            ...

        @property
        def round_end(self) -> "uint8_t":  # NOQA
            ...

        @round_end.setter
        def round_end(self, value: "uint8_t"):
            ...

        @property
        def raw_end(self) -> "uint8_t":  # NOQA
            ...

        @raw_end.setter
        def raw_end(self, value: "uint8_t"):
            ...


class draw_triangle_dsc_t(_Structure): 
    _special_types_ = {
        'p': list
    }
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        bg_opa: Optional["opa_t"] = _DefaultArg, 
        bg_color: Optional["color_t"] = _DefaultArg, 
        bg_grad: Optional["grad_dsc_t"] = _DefaultArg, 
        p: Optional[List["point_t"]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if bg_opa != _DefaultArg:
            kwargs['bg_opa'] = bg_opa
        if bg_color != _DefaultArg:
            kwargs['bg_color'] = bg_color
        if bg_grad != _DefaultArg:
            kwargs['bg_grad'] = bg_grad
        if p != _DefaultArg:
            kwargs['p'] = p
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def bg_opa(self) -> "opa_t":  # NOQA
            ...

        @bg_opa.setter
        def bg_opa(self, value: "opa_t"):
            ...

        @property
        def bg_color(self) -> "color_t":  # NOQA
            ...

        @bg_color.setter
        def bg_color(self, value: "color_t"):
            ...

        @property
        def bg_grad(self) -> "grad_dsc_t":  # NOQA
            ...

        @bg_grad.setter
        def bg_grad(self, value: "grad_dsc_t"):
            ...

        @property
        def p(self) -> List["point_t"]:  # NOQA
            ...

        @p.setter
        def p(self, value: List["point_t"]):
            ...


class draw_mask_rect_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base: Optional["draw_dsc_base_t"] = _DefaultArg, 
        area: Optional["area_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base != _DefaultArg:
            kwargs['base'] = base
        if area != _DefaultArg:
            kwargs['area'] = area
        if radius != _DefaultArg:
            kwargs['radius'] = radius
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base(self) -> "draw_dsc_base_t":  # NOQA
            ...

        @base.setter
        def base(self, value: "draw_dsc_base_t"):
            ...

        @property
        def area(self) -> "area_t":  # NOQA
            ...

        @area.setter
        def area(self, value: "area_t"):
            ...

        @property
        def radius(self) -> "coord_t":  # NOQA
            ...

        @radius.setter
        def radius(self, value: "coord_t"):
            ...


class layout_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        cb: Optional["layout_update_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if cb != _DefaultArg:
            kwargs['cb'] = cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def cb(self) -> "layout_update_cb_t":  # NOQA
            ...

        @cb.setter
        def cb(self, value: "layout_update_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class _obj_style_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        style: Optional["style_t"] = _DefaultArg, 
        selector: Optional["uint32_t"] = _DefaultArg, 
        is_local: Optional["uint32_t"] = _DefaultArg, 
        is_trans: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if style != _DefaultArg:
            kwargs['style'] = style
        if selector != _DefaultArg:
            kwargs['selector'] = selector
        if is_local != _DefaultArg:
            kwargs['is_local'] = is_local
        if is_trans != _DefaultArg:
            kwargs['is_trans'] = is_trans
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def style(self) -> "style_t":  # NOQA
            ...

        @style.setter
        def style(self, value: "style_t"):
            ...

        @property
        def selector(self) -> "uint32_t":  # NOQA
            ...

        @selector.setter
        def selector(self, value: "uint32_t"):
            ...

        @property
        def is_local(self) -> "uint32_t":  # NOQA
            ...

        @is_local.setter
        def is_local(self, value: "uint32_t"):
            ...

        @property
        def is_trans(self) -> "uint32_t":  # NOQA
            ...

        @is_trans.setter
        def is_trans(self, value: "uint32_t"):
            ...


class _obj_style_transition_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        time: Optional["uint16_t"] = _DefaultArg, 
        delay: Optional["uint16_t"] = _DefaultArg, 
        selector: Optional["style_selector_t"] = _DefaultArg, 
        prop: Optional["style_prop_t"] = _DefaultArg, 
        path_cb: Optional["anim_path_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if time != _DefaultArg:
            kwargs['time'] = time
        if delay != _DefaultArg:
            kwargs['delay'] = delay
        if selector != _DefaultArg:
            kwargs['selector'] = selector
        if prop != _DefaultArg:
            kwargs['prop'] = prop
        if path_cb != _DefaultArg:
            kwargs['path_cb'] = path_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def time(self) -> "uint16_t":  # NOQA
            ...

        @time.setter
        def time(self, value: "uint16_t"):
            ...

        @property
        def delay(self) -> "uint16_t":  # NOQA
            ...

        @delay.setter
        def delay(self, value: "uint16_t"):
            ...

        @property
        def selector(self) -> "style_selector_t":  # NOQA
            ...

        @selector.setter
        def selector(self, value: "style_selector_t"):
            ...

        @property
        def prop(self) -> "style_prop_t":  # NOQA
            ...

        @prop.setter
        def prop(self, value: "style_prop_t"):
            ...

        @property
        def path_cb(self) -> "anim_path_cb_t":  # NOQA
            ...

        @path_cb.setter
        def path_cb(self, value: "anim_path_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...


class _obj_class_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        base_class: Optional["_obj_class_t"] = _DefaultArg, 
        constructor_cb: Optional[Callable[["_obj_class_t", "_obj_t"], "void_t"]] = _DefaultArg, 
        destructor_cb: Optional[Callable[["_obj_class_t", "_obj_t"], "void_t"]] = _DefaultArg, 
        event_cb: Optional[Callable[["_obj_class_t", "_event_t"], "void_t"]] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        width_def: Optional["coord_t"] = _DefaultArg, 
        height_def: Optional["coord_t"] = _DefaultArg, 
        editable: Optional["uint32_t"] = _DefaultArg, 
        group_def: Optional["uint32_t"] = _DefaultArg, 
        instance_size: Optional["uint32_t"] = _DefaultArg, 
        theme_inheritable: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if base_class != _DefaultArg:
            kwargs['base_class'] = base_class
        if constructor_cb != _DefaultArg:
            kwargs['constructor_cb'] = constructor_cb
        if destructor_cb != _DefaultArg:
            kwargs['destructor_cb'] = destructor_cb
        if event_cb != _DefaultArg:
            kwargs['event_cb'] = event_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if width_def != _DefaultArg:
            kwargs['width_def'] = width_def
        if height_def != _DefaultArg:
            kwargs['height_def'] = height_def
        if editable != _DefaultArg:
            kwargs['editable'] = editable
        if group_def != _DefaultArg:
            kwargs['group_def'] = group_def
        if instance_size != _DefaultArg:
            kwargs['instance_size'] = instance_size
        if theme_inheritable != _DefaultArg:
            kwargs['theme_inheritable'] = theme_inheritable
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def base_class(self) -> "_obj_class_t":  # NOQA
            ...

        @base_class.setter
        def base_class(self, value: "_obj_class_t"):
            ...

        @property
        def constructor_cb(self) -> Callable[["_obj_class_t", "_obj_t"], "void_t"]:  # NOQA
            ...

        @constructor_cb.setter
        def constructor_cb(self, value: Callable[["_obj_class_t", "_obj_t"], "void_t"]):
            ...

        @property
        def destructor_cb(self) -> Callable[["_obj_class_t", "_obj_t"], "void_t"]:  # NOQA
            ...

        @destructor_cb.setter
        def destructor_cb(self, value: Callable[["_obj_class_t", "_obj_t"], "void_t"]):
            ...

        @property
        def event_cb(self) -> Callable[["_obj_class_t", "_event_t"], "void_t"]:  # NOQA
            ...

        @event_cb.setter
        def event_cb(self, value: Callable[["_obj_class_t", "_event_t"], "void_t"]):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def width_def(self) -> "coord_t":  # NOQA
            ...

        @width_def.setter
        def width_def(self, value: "coord_t"):
            ...

        @property
        def height_def(self) -> "coord_t":  # NOQA
            ...

        @height_def.setter
        def height_def(self, value: "coord_t"):
            ...

        @property
        def editable(self) -> "uint32_t":  # NOQA
            ...

        @editable.setter
        def editable(self, value: "uint32_t"):
            ...

        @property
        def group_def(self) -> "uint32_t":  # NOQA
            ...

        @group_def.setter
        def group_def(self, value: "uint32_t"):
            ...

        @property
        def instance_size(self) -> "uint32_t":  # NOQA
            ...

        @instance_size.setter
        def instance_size(self, value: "uint32_t"):
            ...

        @property
        def theme_inheritable(self) -> "uint32_t":  # NOQA
            ...

        @theme_inheritable.setter
        def theme_inheritable(self, value: "uint32_t"):
            ...


class ll_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        n_size: Optional["uint32_t"] = _DefaultArg, 
        head: Optional["ll_node_t"] = _DefaultArg, 
        tail: Optional["ll_node_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if n_size != _DefaultArg:
            kwargs['n_size'] = n_size
        if head != _DefaultArg:
            kwargs['head'] = head
        if tail != _DefaultArg:
            kwargs['tail'] = tail
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def n_size(self) -> "uint32_t":  # NOQA
            ...

        @n_size.setter
        def n_size(self, value: "uint32_t"):
            ...

        @property
        def head(self) -> "ll_node_t":  # NOQA
            ...

        @head.setter
        def head(self, value: "ll_node_t"):
            ...

        @property
        def tail(self) -> "ll_node_t":  # NOQA
            ...

        @tail.setter
        def tail(self, value: "ll_node_t"):
            ...


class _group_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj_ll: Optional["ll_t"] = _DefaultArg, 
        obj_focus: Optional["_obj_t"] = _DefaultArg, 
        focus_cb: Optional["group_focus_cb_t"] = _DefaultArg, 
        edge_cb: Optional["group_edge_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        frozen: Optional["uint8_t"] = _DefaultArg, 
        editing: Optional["uint8_t"] = _DefaultArg, 
        refocus_policy: Optional["uint8_t"] = _DefaultArg, 
        wrap: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj_ll != _DefaultArg:
            kwargs['obj_ll'] = obj_ll
        if obj_focus != _DefaultArg:
            kwargs['obj_focus'] = obj_focus
        if focus_cb != _DefaultArg:
            kwargs['focus_cb'] = focus_cb
        if edge_cb != _DefaultArg:
            kwargs['edge_cb'] = edge_cb
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if frozen != _DefaultArg:
            kwargs['frozen'] = frozen
        if editing != _DefaultArg:
            kwargs['editing'] = editing
        if refocus_policy != _DefaultArg:
            kwargs['refocus_policy'] = refocus_policy
        if wrap != _DefaultArg:
            kwargs['wrap'] = wrap
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj_ll(self) -> "ll_t":  # NOQA
            ...

        @obj_ll.setter
        def obj_ll(self, value: "ll_t"):
            ...

        @property
        def obj_focus(self) -> "_obj_t":  # NOQA
            ...

        @obj_focus.setter
        def obj_focus(self, value: "_obj_t"):
            ...

        @property
        def focus_cb(self) -> "group_focus_cb_t":  # NOQA
            ...

        @focus_cb.setter
        def focus_cb(self, value: "group_focus_cb_t"):
            ...

        @property
        def edge_cb(self) -> "group_edge_cb_t":  # NOQA
            ...

        @edge_cb.setter
        def edge_cb(self, value: "group_edge_cb_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def frozen(self) -> "uint8_t":  # NOQA
            ...

        @frozen.setter
        def frozen(self, value: "uint8_t"):
            ...

        @property
        def editing(self) -> "uint8_t":  # NOQA
            ...

        @editing.setter
        def editing(self, value: "uint8_t"):
            ...

        @property
        def refocus_policy(self) -> "uint8_t":  # NOQA
            ...

        @refocus_policy.setter
        def refocus_policy(self, value: "uint8_t"):
            ...

        @property
        def wrap(self) -> "uint8_t":  # NOQA
            ...

        @wrap.setter
        def wrap(self, value: "uint8_t"):
            ...


class indev_data_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        point: Optional["point_t"] = _DefaultArg, 
        key: Optional["uint32_t"] = _DefaultArg, 
        btn_id: Optional["uint32_t"] = _DefaultArg, 
        enc_diff: Optional["int16_t"] = _DefaultArg, 
        state: Optional["indev_state_t"] = _DefaultArg, 
        continue_reading: Optional[bool_t] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if point != _DefaultArg:
            kwargs['point'] = point
        if key != _DefaultArg:
            kwargs['key'] = key
        if btn_id != _DefaultArg:
            kwargs['btn_id'] = btn_id
        if enc_diff != _DefaultArg:
            kwargs['enc_diff'] = enc_diff
        if state != _DefaultArg:
            kwargs['state'] = state
        if continue_reading != _DefaultArg:
            kwargs['continue_reading'] = continue_reading
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def point(self) -> "point_t":  # NOQA
            ...

        @point.setter
        def point(self, value: "point_t"):
            ...

        @property
        def key(self) -> "uint32_t":  # NOQA
            ...

        @key.setter
        def key(self, value: "uint32_t"):
            ...

        @property
        def btn_id(self) -> "uint32_t":  # NOQA
            ...

        @btn_id.setter
        def btn_id(self, value: "uint32_t"):
            ...

        @property
        def enc_diff(self) -> "int16_t":  # NOQA
            ...

        @enc_diff.setter
        def enc_diff(self, value: "int16_t"):
            ...

        @property
        def state(self) -> "indev_state_t":  # NOQA
            ...

        @state.setter
        def state(self, value: "indev_state_t"):
            ...

        @property
        def continue_reading(self) -> _type_bool_t:  # NOQA
            ...

        @continue_reading.setter
        def continue_reading(self, value: _type_bool_t):
            ...


class hit_test_info_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        point: Optional["point_t"] = _DefaultArg, 
        res: Optional[bool_t] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if point != _DefaultArg:
            kwargs['point'] = point
        if res != _DefaultArg:
            kwargs['res'] = res
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def point(self) -> "point_t":  # NOQA
            ...

        @point.setter
        def point(self, value: "point_t"):
            ...

        @property
        def res(self) -> _type_bool_t:  # NOQA
            ...

        @res.setter
        def res(self, value: _type_bool_t):
            ...


class cover_check_info_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        res: Optional["cover_res_t"] = _DefaultArg, 
        area: Optional["area_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if res != _DefaultArg:
            kwargs['res'] = res
        if area != _DefaultArg:
            kwargs['area'] = area
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def res(self) -> "cover_res_t":  # NOQA
            ...

        @res.setter
        def res(self, value: "cover_res_t"):
            ...

        @property
        def area(self) -> "area_t":  # NOQA
            ...

        @area.setter
        def area(self, value: "area_t"):
            ...


class _obj_spec_attr_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        children: Optional["_obj_t"] = _DefaultArg, 
        child_cnt: Optional["uint32_t"] = _DefaultArg, 
        group_p: Optional["group_t"] = _DefaultArg, 
        event_list: Optional["event_list_t"] = _DefaultArg, 
        scroll: Optional["point_t"] = _DefaultArg, 
        ext_click_pad: Optional["coord_t"] = _DefaultArg, 
        ext_draw_size: Optional["coord_t"] = _DefaultArg, 
        scrollbar_mode: Optional["scrollbar_mode_t"] = _DefaultArg, 
        scroll_snap_x: Optional["scroll_snap_t"] = _DefaultArg, 
        scroll_snap_y: Optional["scroll_snap_t"] = _DefaultArg, 
        scroll_dir: Optional["dir_t"] = _DefaultArg, 
        layer_type: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if children != _DefaultArg:
            kwargs['children'] = children
        if child_cnt != _DefaultArg:
            kwargs['child_cnt'] = child_cnt
        if group_p != _DefaultArg:
            kwargs['group_p'] = group_p
        if event_list != _DefaultArg:
            kwargs['event_list'] = event_list
        if scroll != _DefaultArg:
            kwargs['scroll'] = scroll
        if ext_click_pad != _DefaultArg:
            kwargs['ext_click_pad'] = ext_click_pad
        if ext_draw_size != _DefaultArg:
            kwargs['ext_draw_size'] = ext_draw_size
        if scrollbar_mode != _DefaultArg:
            kwargs['scrollbar_mode'] = scrollbar_mode
        if scroll_snap_x != _DefaultArg:
            kwargs['scroll_snap_x'] = scroll_snap_x
        if scroll_snap_y != _DefaultArg:
            kwargs['scroll_snap_y'] = scroll_snap_y
        if scroll_dir != _DefaultArg:
            kwargs['scroll_dir'] = scroll_dir
        if layer_type != _DefaultArg:
            kwargs['layer_type'] = layer_type
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def children(self) -> "_obj_t":  # NOQA
            ...

        @children.setter
        def children(self, value: "_obj_t"):
            ...

        @property
        def child_cnt(self) -> "uint32_t":  # NOQA
            ...

        @child_cnt.setter
        def child_cnt(self, value: "uint32_t"):
            ...

        @property
        def group_p(self) -> "group_t":  # NOQA
            ...

        @group_p.setter
        def group_p(self, value: "group_t"):
            ...

        @property
        def event_list(self) -> "event_list_t":  # NOQA
            ...

        @event_list.setter
        def event_list(self, value: "event_list_t"):
            ...

        @property
        def scroll(self) -> "point_t":  # NOQA
            ...

        @scroll.setter
        def scroll(self, value: "point_t"):
            ...

        @property
        def ext_click_pad(self) -> "coord_t":  # NOQA
            ...

        @ext_click_pad.setter
        def ext_click_pad(self, value: "coord_t"):
            ...

        @property
        def ext_draw_size(self) -> "coord_t":  # NOQA
            ...

        @ext_draw_size.setter
        def ext_draw_size(self, value: "coord_t"):
            ...

        @property
        def scrollbar_mode(self) -> "scrollbar_mode_t":  # NOQA
            ...

        @scrollbar_mode.setter
        def scrollbar_mode(self, value: "scrollbar_mode_t"):
            ...

        @property
        def scroll_snap_x(self) -> "scroll_snap_t":  # NOQA
            ...

        @scroll_snap_x.setter
        def scroll_snap_x(self, value: "scroll_snap_t"):
            ...

        @property
        def scroll_snap_y(self) -> "scroll_snap_t":  # NOQA
            ...

        @scroll_snap_y.setter
        def scroll_snap_y(self, value: "scroll_snap_t"):
            ...

        @property
        def scroll_dir(self) -> "dir_t":  # NOQA
            ...

        @scroll_dir.setter
        def scroll_dir(self, value: "dir_t"):
            ...

        @property
        def layer_type(self) -> "uint8_t":  # NOQA
            ...

        @layer_type.setter
        def layer_type(self, value: "uint8_t"):
            ...


class _obj_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        class_p: Optional["obj_class_t"] = _DefaultArg, 
        parent: Optional["_obj_t"] = _DefaultArg, 
        spec_attr: Optional["_obj_spec_attr_t"] = _DefaultArg, 
        styles: Optional["_obj_style_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        coords: Optional["area_t"] = _DefaultArg, 
        flags: Optional["obj_flag_t"] = _DefaultArg, 
        state: Optional["state_t"] = _DefaultArg, 
        layout_inv: Optional["uint16_t"] = _DefaultArg, 
        scr_layout_inv: Optional["uint16_t"] = _DefaultArg, 
        skip_trans: Optional["uint16_t"] = _DefaultArg, 
        style_cnt: Optional["uint16_t"] = _DefaultArg, 
        h_layout: Optional["uint16_t"] = _DefaultArg, 
        w_layout: Optional["uint16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if class_p != _DefaultArg:
            kwargs['class_p'] = class_p
        if parent != _DefaultArg:
            kwargs['parent'] = parent
        if spec_attr != _DefaultArg:
            kwargs['spec_attr'] = spec_attr
        if styles != _DefaultArg:
            kwargs['styles'] = styles
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if coords != _DefaultArg:
            kwargs['coords'] = coords
        if flags != _DefaultArg:
            kwargs['flags'] = flags
        if state != _DefaultArg:
            kwargs['state'] = state
        if layout_inv != _DefaultArg:
            kwargs['layout_inv'] = layout_inv
        if scr_layout_inv != _DefaultArg:
            kwargs['scr_layout_inv'] = scr_layout_inv
        if skip_trans != _DefaultArg:
            kwargs['skip_trans'] = skip_trans
        if style_cnt != _DefaultArg:
            kwargs['style_cnt'] = style_cnt
        if h_layout != _DefaultArg:
            kwargs['h_layout'] = h_layout
        if w_layout != _DefaultArg:
            kwargs['w_layout'] = w_layout
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def class_p(self) -> "obj_class_t":  # NOQA
            ...

        @class_p.setter
        def class_p(self, value: "obj_class_t"):
            ...

        @property
        def parent(self) -> "_obj_t":  # NOQA
            ...

        @parent.setter
        def parent(self, value: "_obj_t"):
            ...

        @property
        def spec_attr(self) -> "_obj_spec_attr_t":  # NOQA
            ...

        @spec_attr.setter
        def spec_attr(self, value: "_obj_spec_attr_t"):
            ...

        @property
        def styles(self) -> "_obj_style_t":  # NOQA
            ...

        @styles.setter
        def styles(self, value: "_obj_style_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def coords(self) -> "area_t":  # NOQA
            ...

        @coords.setter
        def coords(self, value: "area_t"):
            ...

        @property
        def flags(self) -> "obj_flag_t":  # NOQA
            ...

        @flags.setter
        def flags(self, value: "obj_flag_t"):
            ...

        @property
        def state(self) -> "state_t":  # NOQA
            ...

        @state.setter
        def state(self, value: "state_t"):
            ...

        @property
        def layout_inv(self) -> "uint16_t":  # NOQA
            ...

        @layout_inv.setter
        def layout_inv(self, value: "uint16_t"):
            ...

        @property
        def scr_layout_inv(self) -> "uint16_t":  # NOQA
            ...

        @scr_layout_inv.setter
        def scr_layout_inv(self, value: "uint16_t"):
            ...

        @property
        def skip_trans(self) -> "uint16_t":  # NOQA
            ...

        @skip_trans.setter
        def skip_trans(self, value: "uint16_t"):
            ...

        @property
        def style_cnt(self) -> "uint16_t":  # NOQA
            ...

        @style_cnt.setter
        def style_cnt(self, value: "uint16_t"):
            ...

        @property
        def h_layout(self) -> "uint16_t":  # NOQA
            ...

        @h_layout.setter
        def h_layout(self, value: "uint16_t"):
            ...

        @property
        def w_layout(self) -> "uint16_t":  # NOQA
            ...

        @w_layout.setter
        def w_layout(self, value: "uint16_t"):
            ...


class font_fmt_txt_glyph_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        bitmap_index: Optional["uint32_t"] = _DefaultArg, 
        adv_w: Optional["uint32_t"] = _DefaultArg, 
        box_w: Optional["uint16_t"] = _DefaultArg, 
        box_h: Optional["uint16_t"] = _DefaultArg, 
        ofs_x: Optional["int16_t"] = _DefaultArg, 
        ofs_y: Optional["int16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if bitmap_index != _DefaultArg:
            kwargs['bitmap_index'] = bitmap_index
        if adv_w != _DefaultArg:
            kwargs['adv_w'] = adv_w
        if box_w != _DefaultArg:
            kwargs['box_w'] = box_w
        if box_h != _DefaultArg:
            kwargs['box_h'] = box_h
        if ofs_x != _DefaultArg:
            kwargs['ofs_x'] = ofs_x
        if ofs_y != _DefaultArg:
            kwargs['ofs_y'] = ofs_y
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def bitmap_index(self) -> "uint32_t":  # NOQA
            ...

        @bitmap_index.setter
        def bitmap_index(self, value: "uint32_t"):
            ...

        @property
        def adv_w(self) -> "uint32_t":  # NOQA
            ...

        @adv_w.setter
        def adv_w(self, value: "uint32_t"):
            ...

        @property
        def box_w(self) -> "uint16_t":  # NOQA
            ...

        @box_w.setter
        def box_w(self, value: "uint16_t"):
            ...

        @property
        def box_h(self) -> "uint16_t":  # NOQA
            ...

        @box_h.setter
        def box_h(self, value: "uint16_t"):
            ...

        @property
        def ofs_x(self) -> "int16_t":  # NOQA
            ...

        @ofs_x.setter
        def ofs_x(self, value: "int16_t"):
            ...

        @property
        def ofs_y(self) -> "int16_t":  # NOQA
            ...

        @ofs_y.setter
        def ofs_y(self, value: "int16_t"):
            ...


class font_fmt_txt_cmap_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        range_start: Optional["uint32_t"] = _DefaultArg, 
        range_length: Optional["uint16_t"] = _DefaultArg, 
        glyph_id_start: Optional["uint16_t"] = _DefaultArg, 
        unicode_list: Optional["uint16_t"] = _DefaultArg, 
        glyph_id_ofs_list: Optional[Any] = _DefaultArg, 
        list_length: Optional["uint16_t"] = _DefaultArg, 
        type: Optional["font_fmt_txt_cmap_type_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if range_start != _DefaultArg:
            kwargs['range_start'] = range_start
        if range_length != _DefaultArg:
            kwargs['range_length'] = range_length
        if glyph_id_start != _DefaultArg:
            kwargs['glyph_id_start'] = glyph_id_start
        if unicode_list != _DefaultArg:
            kwargs['unicode_list'] = unicode_list
        if glyph_id_ofs_list != _DefaultArg:
            kwargs['glyph_id_ofs_list'] = glyph_id_ofs_list
        if list_length != _DefaultArg:
            kwargs['list_length'] = list_length
        if type != _DefaultArg:
            kwargs['type'] = type
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def range_start(self) -> "uint32_t":  # NOQA
            ...

        @range_start.setter
        def range_start(self, value: "uint32_t"):
            ...

        @property
        def range_length(self) -> "uint16_t":  # NOQA
            ...

        @range_length.setter
        def range_length(self, value: "uint16_t"):
            ...

        @property
        def glyph_id_start(self) -> "uint16_t":  # NOQA
            ...

        @glyph_id_start.setter
        def glyph_id_start(self, value: "uint16_t"):
            ...

        @property
        def unicode_list(self) -> "uint16_t":  # NOQA
            ...

        @unicode_list.setter
        def unicode_list(self, value: "uint16_t"):
            ...

        @property
        def glyph_id_ofs_list(self) -> Any:  # NOQA
            ...

        @glyph_id_ofs_list.setter
        def glyph_id_ofs_list(self, value: Any):
            ...

        @property
        def list_length(self) -> "uint16_t":  # NOQA
            ...

        @list_length.setter
        def list_length(self, value: "uint16_t"):
            ...

        @property
        def type(self) -> "font_fmt_txt_cmap_type_t":  # NOQA
            ...

        @type.setter
        def type(self, value: "font_fmt_txt_cmap_type_t"):
            ...


class font_fmt_txt_kern_pair_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        glyph_ids: Optional[Any] = _DefaultArg, 
        values: Optional["int8_t"] = _DefaultArg, 
        pair_cnt: Optional["uint32_t"] = _DefaultArg, 
        glyph_ids_size: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if glyph_ids != _DefaultArg:
            kwargs['glyph_ids'] = glyph_ids
        if values != _DefaultArg:
            kwargs['values'] = values
        if pair_cnt != _DefaultArg:
            kwargs['pair_cnt'] = pair_cnt
        if glyph_ids_size != _DefaultArg:
            kwargs['glyph_ids_size'] = glyph_ids_size
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def glyph_ids(self) -> Any:  # NOQA
            ...

        @glyph_ids.setter
        def glyph_ids(self, value: Any):
            ...

        @property
        def values(self) -> "int8_t":  # NOQA
            ...

        @values.setter
        def values(self, value: "int8_t"):
            ...

        @property
        def pair_cnt(self) -> "uint32_t":  # NOQA
            ...

        @pair_cnt.setter
        def pair_cnt(self, value: "uint32_t"):
            ...

        @property
        def glyph_ids_size(self) -> "uint32_t":  # NOQA
            ...

        @glyph_ids_size.setter
        def glyph_ids_size(self, value: "uint32_t"):
            ...


class font_fmt_txt_kern_classes_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        class_pair_values: Optional["int8_t"] = _DefaultArg, 
        left_class_mapping: Optional["uint8_t"] = _DefaultArg, 
        right_class_mapping: Optional["uint8_t"] = _DefaultArg, 
        left_class_cnt: Optional["uint8_t"] = _DefaultArg, 
        right_class_cnt: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if class_pair_values != _DefaultArg:
            kwargs['class_pair_values'] = class_pair_values
        if left_class_mapping != _DefaultArg:
            kwargs['left_class_mapping'] = left_class_mapping
        if right_class_mapping != _DefaultArg:
            kwargs['right_class_mapping'] = right_class_mapping
        if left_class_cnt != _DefaultArg:
            kwargs['left_class_cnt'] = left_class_cnt
        if right_class_cnt != _DefaultArg:
            kwargs['right_class_cnt'] = right_class_cnt
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def class_pair_values(self) -> "int8_t":  # NOQA
            ...

        @class_pair_values.setter
        def class_pair_values(self, value: "int8_t"):
            ...

        @property
        def left_class_mapping(self) -> "uint8_t":  # NOQA
            ...

        @left_class_mapping.setter
        def left_class_mapping(self, value: "uint8_t"):
            ...

        @property
        def right_class_mapping(self) -> "uint8_t":  # NOQA
            ...

        @right_class_mapping.setter
        def right_class_mapping(self, value: "uint8_t"):
            ...

        @property
        def left_class_cnt(self) -> "uint8_t":  # NOQA
            ...

        @left_class_cnt.setter
        def left_class_cnt(self, value: "uint8_t"):
            ...

        @property
        def right_class_cnt(self) -> "uint8_t":  # NOQA
            ...

        @right_class_cnt.setter
        def right_class_cnt(self, value: "uint8_t"):
            ...


class font_fmt_txt_glyph_cache_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        last_letter: Optional["uint32_t"] = _DefaultArg, 
        last_glyph_id: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if last_letter != _DefaultArg:
            kwargs['last_letter'] = last_letter
        if last_glyph_id != _DefaultArg:
            kwargs['last_glyph_id'] = last_glyph_id
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def last_letter(self) -> "uint32_t":  # NOQA
            ...

        @last_letter.setter
        def last_letter(self, value: "uint32_t"):
            ...

        @property
        def last_glyph_id(self) -> "uint32_t":  # NOQA
            ...

        @last_glyph_id.setter
        def last_glyph_id(self, value: "uint32_t"):
            ...


class font_fmt_txt_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        glyph_bitmap: Optional["uint8_t"] = _DefaultArg, 
        glyph_dsc: Optional["font_fmt_txt_glyph_dsc_t"] = _DefaultArg, 
        cmaps: Optional["font_fmt_txt_cmap_t"] = _DefaultArg, 
        kern_dsc: Optional[Any] = _DefaultArg, 
        kern_scale: Optional["uint16_t"] = _DefaultArg, 
        cmap_num: Optional["uint16_t"] = _DefaultArg, 
        bpp: Optional["uint16_t"] = _DefaultArg, 
        kern_classes: Optional["uint16_t"] = _DefaultArg, 
        bitmap_format: Optional["uint16_t"] = _DefaultArg, 
        cache: Optional["font_fmt_txt_glyph_cache_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if glyph_bitmap != _DefaultArg:
            kwargs['glyph_bitmap'] = glyph_bitmap
        if glyph_dsc != _DefaultArg:
            kwargs['glyph_dsc'] = glyph_dsc
        if cmaps != _DefaultArg:
            kwargs['cmaps'] = cmaps
        if kern_dsc != _DefaultArg:
            kwargs['kern_dsc'] = kern_dsc
        if kern_scale != _DefaultArg:
            kwargs['kern_scale'] = kern_scale
        if cmap_num != _DefaultArg:
            kwargs['cmap_num'] = cmap_num
        if bpp != _DefaultArg:
            kwargs['bpp'] = bpp
        if kern_classes != _DefaultArg:
            kwargs['kern_classes'] = kern_classes
        if bitmap_format != _DefaultArg:
            kwargs['bitmap_format'] = bitmap_format
        if cache != _DefaultArg:
            kwargs['cache'] = cache
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def glyph_bitmap(self) -> "uint8_t":  # NOQA
            ...

        @glyph_bitmap.setter
        def glyph_bitmap(self, value: "uint8_t"):
            ...

        @property
        def glyph_dsc(self) -> "font_fmt_txt_glyph_dsc_t":  # NOQA
            ...

        @glyph_dsc.setter
        def glyph_dsc(self, value: "font_fmt_txt_glyph_dsc_t"):
            ...

        @property
        def cmaps(self) -> "font_fmt_txt_cmap_t":  # NOQA
            ...

        @cmaps.setter
        def cmaps(self, value: "font_fmt_txt_cmap_t"):
            ...

        @property
        def kern_dsc(self) -> Any:  # NOQA
            ...

        @kern_dsc.setter
        def kern_dsc(self, value: Any):
            ...

        @property
        def kern_scale(self) -> "uint16_t":  # NOQA
            ...

        @kern_scale.setter
        def kern_scale(self, value: "uint16_t"):
            ...

        @property
        def cmap_num(self) -> "uint16_t":  # NOQA
            ...

        @cmap_num.setter
        def cmap_num(self, value: "uint16_t"):
            ...

        @property
        def bpp(self) -> "uint16_t":  # NOQA
            ...

        @bpp.setter
        def bpp(self, value: "uint16_t"):
            ...

        @property
        def kern_classes(self) -> "uint16_t":  # NOQA
            ...

        @kern_classes.setter
        def kern_classes(self, value: "uint16_t"):
            ...

        @property
        def bitmap_format(self) -> "uint16_t":  # NOQA
            ...

        @bitmap_format.setter
        def bitmap_format(self, value: "uint16_t"):
            ...

        @property
        def cache(self) -> "font_fmt_txt_glyph_cache_t":  # NOQA
            ...

        @cache.setter
        def cache(self, value: "font_fmt_txt_glyph_cache_t"):
            ...


class img_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        src: Optional[Any] = _DefaultArg, 
        offset: Optional["point_t"] = _DefaultArg, 
        w: Optional["coord_t"] = _DefaultArg, 
        h: Optional["coord_t"] = _DefaultArg, 
        angle: Optional["coord_t"] = _DefaultArg, 
        pivot: Optional["point_t"] = _DefaultArg, 
        zoom: Optional["coord_t"] = _DefaultArg, 
        src_type: Optional["uint8_t"] = _DefaultArg, 
        cf: Optional["uint8_t"] = _DefaultArg, 
        antialias: Optional["uint8_t"] = _DefaultArg, 
        obj_size_mode: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if src != _DefaultArg:
            kwargs['src'] = src
        if offset != _DefaultArg:
            kwargs['offset'] = offset
        if w != _DefaultArg:
            kwargs['w'] = w
        if h != _DefaultArg:
            kwargs['h'] = h
        if angle != _DefaultArg:
            kwargs['angle'] = angle
        if pivot != _DefaultArg:
            kwargs['pivot'] = pivot
        if zoom != _DefaultArg:
            kwargs['zoom'] = zoom
        if src_type != _DefaultArg:
            kwargs['src_type'] = src_type
        if cf != _DefaultArg:
            kwargs['cf'] = cf
        if antialias != _DefaultArg:
            kwargs['antialias'] = antialias
        if obj_size_mode != _DefaultArg:
            kwargs['obj_size_mode'] = obj_size_mode
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def src(self) -> Any:  # NOQA
            ...

        @src.setter
        def src(self, value: Any):
            ...

        @property
        def offset(self) -> "point_t":  # NOQA
            ...

        @offset.setter
        def offset(self, value: "point_t"):
            ...

        @property
        def w(self) -> "coord_t":  # NOQA
            ...

        @w.setter
        def w(self, value: "coord_t"):
            ...

        @property
        def h(self) -> "coord_t":  # NOQA
            ...

        @h.setter
        def h(self, value: "coord_t"):
            ...

        @property
        def angle(self) -> "coord_t":  # NOQA
            ...

        @angle.setter
        def angle(self, value: "coord_t"):
            ...

        @property
        def pivot(self) -> "point_t":  # NOQA
            ...

        @pivot.setter
        def pivot(self, value: "point_t"):
            ...

        @property
        def zoom(self) -> "coord_t":  # NOQA
            ...

        @zoom.setter
        def zoom(self, value: "coord_t"):
            ...

        @property
        def src_type(self) -> "uint8_t":  # NOQA
            ...

        @src_type.setter
        def src_type(self, value: "uint8_t"):
            ...

        @property
        def cf(self) -> "uint8_t":  # NOQA
            ...

        @cf.setter
        def cf(self, value: "uint8_t"):
            ...

        @property
        def antialias(self) -> "uint8_t":  # NOQA
            ...

        @antialias.setter
        def antialias(self, value: "uint8_t"):
            ...

        @property
        def obj_size_mode(self) -> "uint8_t":  # NOQA
            ...

        @obj_size_mode.setter
        def obj_size_mode(self, value: "uint8_t"):
            ...


class animimg_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        img: Optional["img_t"] = _DefaultArg, 
        anim: Optional["anim_t"] = _DefaultArg, 
        dsc: Optional[Any] = _DefaultArg, 
        pic_count: Optional["int8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if img != _DefaultArg:
            kwargs['img'] = img
        if anim != _DefaultArg:
            kwargs['anim'] = anim
        if dsc != _DefaultArg:
            kwargs['dsc'] = dsc
        if pic_count != _DefaultArg:
            kwargs['pic_count'] = pic_count
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def img(self) -> "img_t":  # NOQA
            ...

        @img.setter
        def img(self, value: "img_t"):
            ...

        @property
        def anim(self) -> "anim_t":  # NOQA
            ...

        @anim.setter
        def anim(self, value: "anim_t"):
            ...

        @property
        def dsc(self) -> Any:  # NOQA
            ...

        @dsc.setter
        def dsc(self, value: Any):
            ...

        @property
        def pic_count(self) -> "int8_t":  # NOQA
            ...

        @pic_count.setter
        def pic_count(self, value: "int8_t"):
            ...


class arc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        rotation: Optional["uint16_t"] = _DefaultArg, 
        indic_angle_start: Optional["uint16_t"] = _DefaultArg, 
        indic_angle_end: Optional["uint16_t"] = _DefaultArg, 
        bg_angle_start: Optional["uint16_t"] = _DefaultArg, 
        bg_angle_end: Optional["uint16_t"] = _DefaultArg, 
        value: Optional["int16_t"] = _DefaultArg, 
        min_value: Optional["int16_t"] = _DefaultArg, 
        max_value: Optional["int16_t"] = _DefaultArg, 
        dragging: Optional["uint16_t"] = _DefaultArg, 
        type: Optional["uint16_t"] = _DefaultArg, 
        min_close: Optional["uint16_t"] = _DefaultArg, 
        chg_rate: Optional["uint16_t"] = _DefaultArg, 
        last_tick: Optional["uint32_t"] = _DefaultArg, 
        last_angle: Optional["int16_t"] = _DefaultArg, 
        knob_offset: Optional["int16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if rotation != _DefaultArg:
            kwargs['rotation'] = rotation
        if indic_angle_start != _DefaultArg:
            kwargs['indic_angle_start'] = indic_angle_start
        if indic_angle_end != _DefaultArg:
            kwargs['indic_angle_end'] = indic_angle_end
        if bg_angle_start != _DefaultArg:
            kwargs['bg_angle_start'] = bg_angle_start
        if bg_angle_end != _DefaultArg:
            kwargs['bg_angle_end'] = bg_angle_end
        if value != _DefaultArg:
            kwargs['value'] = value
        if min_value != _DefaultArg:
            kwargs['min_value'] = min_value
        if max_value != _DefaultArg:
            kwargs['max_value'] = max_value
        if dragging != _DefaultArg:
            kwargs['dragging'] = dragging
        if type != _DefaultArg:
            kwargs['type'] = type
        if min_close != _DefaultArg:
            kwargs['min_close'] = min_close
        if chg_rate != _DefaultArg:
            kwargs['chg_rate'] = chg_rate
        if last_tick != _DefaultArg:
            kwargs['last_tick'] = last_tick
        if last_angle != _DefaultArg:
            kwargs['last_angle'] = last_angle
        if knob_offset != _DefaultArg:
            kwargs['knob_offset'] = knob_offset
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def rotation(self) -> "uint16_t":  # NOQA
            ...

        @rotation.setter
        def rotation(self, value: "uint16_t"):
            ...

        @property
        def indic_angle_start(self) -> "uint16_t":  # NOQA
            ...

        @indic_angle_start.setter
        def indic_angle_start(self, value: "uint16_t"):
            ...

        @property
        def indic_angle_end(self) -> "uint16_t":  # NOQA
            ...

        @indic_angle_end.setter
        def indic_angle_end(self, value: "uint16_t"):
            ...

        @property
        def bg_angle_start(self) -> "uint16_t":  # NOQA
            ...

        @bg_angle_start.setter
        def bg_angle_start(self, value: "uint16_t"):
            ...

        @property
        def bg_angle_end(self) -> "uint16_t":  # NOQA
            ...

        @bg_angle_end.setter
        def bg_angle_end(self, value: "uint16_t"):
            ...

        @property
        def value(self) -> "int16_t":  # NOQA
            ...

        @value.setter
        def value(self, value: "int16_t"):
            ...

        @property
        def min_value(self) -> "int16_t":  # NOQA
            ...

        @min_value.setter
        def min_value(self, value: "int16_t"):
            ...

        @property
        def max_value(self) -> "int16_t":  # NOQA
            ...

        @max_value.setter
        def max_value(self, value: "int16_t"):
            ...

        @property
        def dragging(self) -> "uint16_t":  # NOQA
            ...

        @dragging.setter
        def dragging(self, value: "uint16_t"):
            ...

        @property
        def type(self) -> "uint16_t":  # NOQA
            ...

        @type.setter
        def type(self, value: "uint16_t"):
            ...

        @property
        def min_close(self) -> "uint16_t":  # NOQA
            ...

        @min_close.setter
        def min_close(self, value: "uint16_t"):
            ...

        @property
        def chg_rate(self) -> "uint16_t":  # NOQA
            ...

        @chg_rate.setter
        def chg_rate(self, value: "uint16_t"):
            ...

        @property
        def last_tick(self) -> "uint32_t":  # NOQA
            ...

        @last_tick.setter
        def last_tick(self, value: "uint32_t"):
            ...

        @property
        def last_angle(self) -> "int16_t":  # NOQA
            ...

        @last_angle.setter
        def last_angle(self, value: "int16_t"):
            ...

        @property
        def knob_offset(self) -> "int16_t":  # NOQA
            ...

        @knob_offset.setter
        def knob_offset(self, value: "int16_t"):
            ...


class label_t(_Structure): 
    class _dot(_Union): 
        _special_types_ = {
            'tmp': list
        }
        
        def __init__(
            self, 
            tmp_ptr: Optional["char_t"] = _DefaultArg, 
            tmp: Optional[List[char_t]] = _DefaultArg
        ):
            _Union.__init__(self)
            kwargs = {}
            if tmp_ptr != _DefaultArg:
                kwargs['tmp_ptr'] = tmp_ptr
            if tmp != _DefaultArg:
                kwargs['tmp'] = tmp
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def tmp_ptr(self) -> "char_t":  # NOQA
                ...
    
            @tmp_ptr.setter
            def tmp_ptr(self, value: "char_t"):
                ...
    
            @property
            def tmp(self) -> List[char_t]:  # NOQA
                ...
    
            @tmp.setter
            def tmp(self, value: List[char_t]):
                ...

    setattr(_dot, '__SIZE__', _ctypes.sizeof(_dot))

    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        text: Optional["char_t"] = _DefaultArg, 
        dot: Optional[_dot] = _DefaultArg, 
        dot_end: Optional["uint32_t"] = _DefaultArg, 
        hint: Optional["draw_label_hint_t"] = _DefaultArg, 
        sel_start: Optional["uint32_t"] = _DefaultArg, 
        sel_end: Optional["uint32_t"] = _DefaultArg, 
        size_cache: Optional["point_t"] = _DefaultArg, 
        offset: Optional["point_t"] = _DefaultArg, 
        long_mode: Optional["label_long_mode_t"] = _DefaultArg, 
        static_txt: Optional["uint8_t"] = _DefaultArg, 
        recolor: Optional["uint8_t"] = _DefaultArg, 
        expand: Optional["uint8_t"] = _DefaultArg, 
        dot_tmp_alloc: Optional["uint8_t"] = _DefaultArg, 
        invalid_size_cache: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if text != _DefaultArg:
            kwargs['text'] = text
        if dot != _DefaultArg:
            kwargs['dot'] = dot
        if dot_end != _DefaultArg:
            kwargs['dot_end'] = dot_end
        if hint != _DefaultArg:
            kwargs['hint'] = hint
        if sel_start != _DefaultArg:
            kwargs['sel_start'] = sel_start
        if sel_end != _DefaultArg:
            kwargs['sel_end'] = sel_end
        if size_cache != _DefaultArg:
            kwargs['size_cache'] = size_cache
        if offset != _DefaultArg:
            kwargs['offset'] = offset
        if long_mode != _DefaultArg:
            kwargs['long_mode'] = long_mode
        if static_txt != _DefaultArg:
            kwargs['static_txt'] = static_txt
        if recolor != _DefaultArg:
            kwargs['recolor'] = recolor
        if expand != _DefaultArg:
            kwargs['expand'] = expand
        if dot_tmp_alloc != _DefaultArg:
            kwargs['dot_tmp_alloc'] = dot_tmp_alloc
        if invalid_size_cache != _DefaultArg:
            kwargs['invalid_size_cache'] = invalid_size_cache
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def text(self) -> "char_t":  # NOQA
            ...

        @text.setter
        def text(self, value: "char_t"):
            ...

        @property
        def dot(self) -> _dot:  # NOQA
            ...

        @dot.setter
        def dot(self, value: _dot):
            ...

        @property
        def dot_end(self) -> "uint32_t":  # NOQA
            ...

        @dot_end.setter
        def dot_end(self, value: "uint32_t"):
            ...

        @property
        def hint(self) -> "draw_label_hint_t":  # NOQA
            ...

        @hint.setter
        def hint(self, value: "draw_label_hint_t"):
            ...

        @property
        def sel_start(self) -> "uint32_t":  # NOQA
            ...

        @sel_start.setter
        def sel_start(self, value: "uint32_t"):
            ...

        @property
        def sel_end(self) -> "uint32_t":  # NOQA
            ...

        @sel_end.setter
        def sel_end(self, value: "uint32_t"):
            ...

        @property
        def size_cache(self) -> "point_t":  # NOQA
            ...

        @size_cache.setter
        def size_cache(self, value: "point_t"):
            ...

        @property
        def offset(self) -> "point_t":  # NOQA
            ...

        @offset.setter
        def offset(self, value: "point_t"):
            ...

        @property
        def long_mode(self) -> "label_long_mode_t":  # NOQA
            ...

        @long_mode.setter
        def long_mode(self, value: "label_long_mode_t"):
            ...

        @property
        def static_txt(self) -> "uint8_t":  # NOQA
            ...

        @static_txt.setter
        def static_txt(self, value: "uint8_t"):
            ...

        @property
        def recolor(self) -> "uint8_t":  # NOQA
            ...

        @recolor.setter
        def recolor(self, value: "uint8_t"):
            ...

        @property
        def expand(self) -> "uint8_t":  # NOQA
            ...

        @expand.setter
        def expand(self, value: "uint8_t"):
            ...

        @property
        def dot_tmp_alloc(self) -> "uint8_t":  # NOQA
            ...

        @dot_tmp_alloc.setter
        def dot_tmp_alloc(self, value: "uint8_t"):
            ...

        @property
        def invalid_size_cache(self) -> "uint8_t":  # NOQA
            ...

        @invalid_size_cache.setter
        def invalid_size_cache(self, value: "uint8_t"):
            ...


class _bar_anim_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        bar: Optional["obj_t"] = _DefaultArg, 
        anim_start: Optional["int32_t"] = _DefaultArg, 
        anim_end: Optional["int32_t"] = _DefaultArg, 
        anim_state: Optional["int32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if bar != _DefaultArg:
            kwargs['bar'] = bar
        if anim_start != _DefaultArg:
            kwargs['anim_start'] = anim_start
        if anim_end != _DefaultArg:
            kwargs['anim_end'] = anim_end
        if anim_state != _DefaultArg:
            kwargs['anim_state'] = anim_state
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def bar(self) -> "obj_t":  # NOQA
            ...

        @bar.setter
        def bar(self, value: "obj_t"):
            ...

        @property
        def anim_start(self) -> "int32_t":  # NOQA
            ...

        @anim_start.setter
        def anim_start(self, value: "int32_t"):
            ...

        @property
        def anim_end(self) -> "int32_t":  # NOQA
            ...

        @anim_end.setter
        def anim_end(self, value: "int32_t"):
            ...

        @property
        def anim_state(self) -> "int32_t":  # NOQA
            ...

        @anim_state.setter
        def anim_state(self, value: "int32_t"):
            ...


class bar_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        cur_value: Optional["int32_t"] = _DefaultArg, 
        min_value: Optional["int32_t"] = _DefaultArg, 
        max_value: Optional["int32_t"] = _DefaultArg, 
        start_value: Optional["int32_t"] = _DefaultArg, 
        indic_area: Optional["area_t"] = _DefaultArg, 
        cur_value_anim: Optional["_bar_anim_t"] = _DefaultArg, 
        start_value_anim: Optional["_bar_anim_t"] = _DefaultArg, 
        mode: Optional["bar_mode_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if cur_value != _DefaultArg:
            kwargs['cur_value'] = cur_value
        if min_value != _DefaultArg:
            kwargs['min_value'] = min_value
        if max_value != _DefaultArg:
            kwargs['max_value'] = max_value
        if start_value != _DefaultArg:
            kwargs['start_value'] = start_value
        if indic_area != _DefaultArg:
            kwargs['indic_area'] = indic_area
        if cur_value_anim != _DefaultArg:
            kwargs['cur_value_anim'] = cur_value_anim
        if start_value_anim != _DefaultArg:
            kwargs['start_value_anim'] = start_value_anim
        if mode != _DefaultArg:
            kwargs['mode'] = mode
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def cur_value(self) -> "int32_t":  # NOQA
            ...

        @cur_value.setter
        def cur_value(self, value: "int32_t"):
            ...

        @property
        def min_value(self) -> "int32_t":  # NOQA
            ...

        @min_value.setter
        def min_value(self, value: "int32_t"):
            ...

        @property
        def max_value(self) -> "int32_t":  # NOQA
            ...

        @max_value.setter
        def max_value(self, value: "int32_t"):
            ...

        @property
        def start_value(self) -> "int32_t":  # NOQA
            ...

        @start_value.setter
        def start_value(self, value: "int32_t"):
            ...

        @property
        def indic_area(self) -> "area_t":  # NOQA
            ...

        @indic_area.setter
        def indic_area(self, value: "area_t"):
            ...

        @property
        def cur_value_anim(self) -> "_bar_anim_t":  # NOQA
            ...

        @cur_value_anim.setter
        def cur_value_anim(self, value: "_bar_anim_t"):
            ...

        @property
        def start_value_anim(self) -> "_bar_anim_t":  # NOQA
            ...

        @start_value_anim.setter
        def start_value_anim(self, value: "_bar_anim_t"):
            ...

        @property
        def mode(self) -> "bar_mode_t":  # NOQA
            ...

        @mode.setter
        def mode(self, value: "bar_mode_t"):
            ...


class btn_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...


class btnmatrix_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        map_p: Optional["char_t"] = _DefaultArg, 
        button_areas: Optional["area_t"] = _DefaultArg, 
        ctrl_bits: Optional["btnmatrix_ctrl_t"] = _DefaultArg, 
        btn_cnt: Optional["uint16_t"] = _DefaultArg, 
        row_cnt: Optional["uint16_t"] = _DefaultArg, 
        btn_id_sel: Optional["uint16_t"] = _DefaultArg, 
        one_check: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if map_p != _DefaultArg:
            kwargs['map_p'] = map_p
        if button_areas != _DefaultArg:
            kwargs['button_areas'] = button_areas
        if ctrl_bits != _DefaultArg:
            kwargs['ctrl_bits'] = ctrl_bits
        if btn_cnt != _DefaultArg:
            kwargs['btn_cnt'] = btn_cnt
        if row_cnt != _DefaultArg:
            kwargs['row_cnt'] = row_cnt
        if btn_id_sel != _DefaultArg:
            kwargs['btn_id_sel'] = btn_id_sel
        if one_check != _DefaultArg:
            kwargs['one_check'] = one_check
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def map_p(self) -> "char_t":  # NOQA
            ...

        @map_p.setter
        def map_p(self, value: "char_t"):
            ...

        @property
        def button_areas(self) -> "area_t":  # NOQA
            ...

        @button_areas.setter
        def button_areas(self, value: "area_t"):
            ...

        @property
        def ctrl_bits(self) -> "btnmatrix_ctrl_t":  # NOQA
            ...

        @ctrl_bits.setter
        def ctrl_bits(self, value: "btnmatrix_ctrl_t"):
            ...

        @property
        def btn_cnt(self) -> "uint16_t":  # NOQA
            ...

        @btn_cnt.setter
        def btn_cnt(self, value: "uint16_t"):
            ...

        @property
        def row_cnt(self) -> "uint16_t":  # NOQA
            ...

        @row_cnt.setter
        def row_cnt(self, value: "uint16_t"):
            ...

        @property
        def btn_id_sel(self) -> "uint16_t":  # NOQA
            ...

        @btn_id_sel.setter
        def btn_id_sel(self, value: "uint16_t"):
            ...

        @property
        def one_check(self) -> "uint8_t":  # NOQA
            ...

        @one_check.setter
        def one_check(self, value: "uint8_t"):
            ...


class calendar_date_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        year: Optional["uint16_t"] = _DefaultArg, 
        month: Optional["int8_t"] = _DefaultArg, 
        day: Optional["int8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if year != _DefaultArg:
            kwargs['year'] = year
        if month != _DefaultArg:
            kwargs['month'] = month
        if day != _DefaultArg:
            kwargs['day'] = day
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def year(self) -> "uint16_t":  # NOQA
            ...

        @year.setter
        def year(self, value: "uint16_t"):
            ...

        @property
        def month(self) -> "int8_t":  # NOQA
            ...

        @month.setter
        def month(self, value: "int8_t"):
            ...

        @property
        def day(self) -> "int8_t":  # NOQA
            ...

        @day.setter
        def day(self, value: "int8_t"):
            ...


class calendar_t(_Structure): 
    _special_types_ = {
        'map': list,
        'nums': list
    }
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        btnm: Optional["obj_t"] = _DefaultArg, 
        today: Optional["calendar_date_t"] = _DefaultArg, 
        showed_date: Optional["calendar_date_t"] = _DefaultArg, 
        highlighted_dates: Optional["calendar_date_t"] = _DefaultArg, 
        highlighted_dates_num: Optional["uint16_t"] = _DefaultArg, 
        map: Optional[List[char_t]] = _DefaultArg, 
        nums: Optional[List[List[char_t]]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if btnm != _DefaultArg:
            kwargs['btnm'] = btnm
        if today != _DefaultArg:
            kwargs['today'] = today
        if showed_date != _DefaultArg:
            kwargs['showed_date'] = showed_date
        if highlighted_dates != _DefaultArg:
            kwargs['highlighted_dates'] = highlighted_dates
        if highlighted_dates_num != _DefaultArg:
            kwargs['highlighted_dates_num'] = highlighted_dates_num
        if map != _DefaultArg:
            kwargs['map'] = map
        if nums != _DefaultArg:
            kwargs['nums'] = nums
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def btnm(self) -> "obj_t":  # NOQA
            ...

        @btnm.setter
        def btnm(self, value: "obj_t"):
            ...

        @property
        def today(self) -> "calendar_date_t":  # NOQA
            ...

        @today.setter
        def today(self, value: "calendar_date_t"):
            ...

        @property
        def showed_date(self) -> "calendar_date_t":  # NOQA
            ...

        @showed_date.setter
        def showed_date(self, value: "calendar_date_t"):
            ...

        @property
        def highlighted_dates(self) -> "calendar_date_t":  # NOQA
            ...

        @highlighted_dates.setter
        def highlighted_dates(self, value: "calendar_date_t"):
            ...

        @property
        def highlighted_dates_num(self) -> "uint16_t":  # NOQA
            ...

        @highlighted_dates_num.setter
        def highlighted_dates_num(self, value: "uint16_t"):
            ...

        @property
        def map(self) -> List[char_t]:  # NOQA
            ...

        @map.setter
        def map(self, value: List[char_t]):
            ...

        @property
        def nums(self) -> List[List[char_t]]:  # NOQA
            ...

        @nums.setter
        def nums(self, value: List[List[char_t]]):
            ...


class canvas_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        img: Optional["img_t"] = _DefaultArg, 
        dsc: Optional["img_dsc_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if img != _DefaultArg:
            kwargs['img'] = img
        if dsc != _DefaultArg:
            kwargs['dsc'] = dsc
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def img(self) -> "img_t":  # NOQA
            ...

        @img.setter
        def img(self, value: "img_t"):
            ...

        @property
        def dsc(self) -> "img_dsc_t":  # NOQA
            ...

        @dsc.setter
        def dsc(self, value: "img_dsc_t"):
            ...


class chart_series_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        x_points: Optional["coord_t"] = _DefaultArg, 
        y_points: Optional["coord_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        start_point: Optional["uint16_t"] = _DefaultArg, 
        hidden: Optional["uint8_t"] = _DefaultArg, 
        x_ext_buf_assigned: Optional["uint8_t"] = _DefaultArg, 
        y_ext_buf_assigned: Optional["uint8_t"] = _DefaultArg, 
        x_axis_sec: Optional["uint8_t"] = _DefaultArg, 
        y_axis_sec: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if x_points != _DefaultArg:
            kwargs['x_points'] = x_points
        if y_points != _DefaultArg:
            kwargs['y_points'] = y_points
        if color != _DefaultArg:
            kwargs['color'] = color
        if start_point != _DefaultArg:
            kwargs['start_point'] = start_point
        if hidden != _DefaultArg:
            kwargs['hidden'] = hidden
        if x_ext_buf_assigned != _DefaultArg:
            kwargs['x_ext_buf_assigned'] = x_ext_buf_assigned
        if y_ext_buf_assigned != _DefaultArg:
            kwargs['y_ext_buf_assigned'] = y_ext_buf_assigned
        if x_axis_sec != _DefaultArg:
            kwargs['x_axis_sec'] = x_axis_sec
        if y_axis_sec != _DefaultArg:
            kwargs['y_axis_sec'] = y_axis_sec
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def x_points(self) -> "coord_t":  # NOQA
            ...

        @x_points.setter
        def x_points(self, value: "coord_t"):
            ...

        @property
        def y_points(self) -> "coord_t":  # NOQA
            ...

        @y_points.setter
        def y_points(self, value: "coord_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def start_point(self) -> "uint16_t":  # NOQA
            ...

        @start_point.setter
        def start_point(self, value: "uint16_t"):
            ...

        @property
        def hidden(self) -> "uint8_t":  # NOQA
            ...

        @hidden.setter
        def hidden(self, value: "uint8_t"):
            ...

        @property
        def x_ext_buf_assigned(self) -> "uint8_t":  # NOQA
            ...

        @x_ext_buf_assigned.setter
        def x_ext_buf_assigned(self, value: "uint8_t"):
            ...

        @property
        def y_ext_buf_assigned(self) -> "uint8_t":  # NOQA
            ...

        @y_ext_buf_assigned.setter
        def y_ext_buf_assigned(self, value: "uint8_t"):
            ...

        @property
        def x_axis_sec(self) -> "uint8_t":  # NOQA
            ...

        @x_axis_sec.setter
        def x_axis_sec(self, value: "uint8_t"):
            ...

        @property
        def y_axis_sec(self) -> "uint8_t":  # NOQA
            ...

        @y_axis_sec.setter
        def y_axis_sec(self, value: "uint8_t"):
            ...


class chart_cursor_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        pos: Optional["point_t"] = _DefaultArg, 
        point_id: Optional["coord_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        ser: Optional["chart_series_t"] = _DefaultArg, 
        dir: Optional["dir_t"] = _DefaultArg, 
        pos_set: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if pos != _DefaultArg:
            kwargs['pos'] = pos
        if point_id != _DefaultArg:
            kwargs['point_id'] = point_id
        if color != _DefaultArg:
            kwargs['color'] = color
        if ser != _DefaultArg:
            kwargs['ser'] = ser
        if dir != _DefaultArg:
            kwargs['dir'] = dir
        if pos_set != _DefaultArg:
            kwargs['pos_set'] = pos_set
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def pos(self) -> "point_t":  # NOQA
            ...

        @pos.setter
        def pos(self, value: "point_t"):
            ...

        @property
        def point_id(self) -> "coord_t":  # NOQA
            ...

        @point_id.setter
        def point_id(self, value: "coord_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def ser(self) -> "chart_series_t":  # NOQA
            ...

        @ser.setter
        def ser(self, value: "chart_series_t"):
            ...

        @property
        def dir(self) -> "dir_t":  # NOQA
            ...

        @dir.setter
        def dir(self, value: "dir_t"):
            ...

        @property
        def pos_set(self) -> "uint8_t":  # NOQA
            ...

        @pos_set.setter
        def pos_set(self, value: "uint8_t"):
            ...


class chart_tick_dsc_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        major_len: Optional["coord_t"] = _DefaultArg, 
        minor_len: Optional["coord_t"] = _DefaultArg, 
        draw_size: Optional["coord_t"] = _DefaultArg, 
        minor_cnt: Optional["uint32_t"] = _DefaultArg, 
        major_cnt: Optional["uint32_t"] = _DefaultArg, 
        label_en: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if major_len != _DefaultArg:
            kwargs['major_len'] = major_len
        if minor_len != _DefaultArg:
            kwargs['minor_len'] = minor_len
        if draw_size != _DefaultArg:
            kwargs['draw_size'] = draw_size
        if minor_cnt != _DefaultArg:
            kwargs['minor_cnt'] = minor_cnt
        if major_cnt != _DefaultArg:
            kwargs['major_cnt'] = major_cnt
        if label_en != _DefaultArg:
            kwargs['label_en'] = label_en
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def major_len(self) -> "coord_t":  # NOQA
            ...

        @major_len.setter
        def major_len(self, value: "coord_t"):
            ...

        @property
        def minor_len(self) -> "coord_t":  # NOQA
            ...

        @minor_len.setter
        def minor_len(self, value: "coord_t"):
            ...

        @property
        def draw_size(self) -> "coord_t":  # NOQA
            ...

        @draw_size.setter
        def draw_size(self, value: "coord_t"):
            ...

        @property
        def minor_cnt(self) -> "uint32_t":  # NOQA
            ...

        @minor_cnt.setter
        def minor_cnt(self, value: "uint32_t"):
            ...

        @property
        def major_cnt(self) -> "uint32_t":  # NOQA
            ...

        @major_cnt.setter
        def major_cnt(self, value: "uint32_t"):
            ...

        @property
        def label_en(self) -> "uint32_t":  # NOQA
            ...

        @label_en.setter
        def label_en(self, value: "uint32_t"):
            ...


class chart_t(_Structure): 
    _special_types_ = {
        'tick': list,
        'ymin': list,
        'ymax': list,
        'xmin': list,
        'xmax': list
    }
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        series_ll: Optional["ll_t"] = _DefaultArg, 
        cursor_ll: Optional["ll_t"] = _DefaultArg, 
        tick: Optional[List["chart_tick_dsc_t"]] = _DefaultArg, 
        ymin: Optional[List["coord_t"]] = _DefaultArg, 
        ymax: Optional[List["coord_t"]] = _DefaultArg, 
        xmin: Optional[List["coord_t"]] = _DefaultArg, 
        xmax: Optional[List["coord_t"]] = _DefaultArg, 
        pressed_point_id: Optional["coord_t"] = _DefaultArg, 
        hdiv_cnt: Optional["uint16_t"] = _DefaultArg, 
        vdiv_cnt: Optional["uint16_t"] = _DefaultArg, 
        point_cnt: Optional["uint16_t"] = _DefaultArg, 
        zoom_x: Optional["uint16_t"] = _DefaultArg, 
        zoom_y: Optional["uint16_t"] = _DefaultArg, 
        type: Optional["chart_type_t"] = _DefaultArg, 
        update_mode: Optional["chart_update_mode_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if series_ll != _DefaultArg:
            kwargs['series_ll'] = series_ll
        if cursor_ll != _DefaultArg:
            kwargs['cursor_ll'] = cursor_ll
        if tick != _DefaultArg:
            kwargs['tick'] = tick
        if ymin != _DefaultArg:
            kwargs['ymin'] = ymin
        if ymax != _DefaultArg:
            kwargs['ymax'] = ymax
        if xmin != _DefaultArg:
            kwargs['xmin'] = xmin
        if xmax != _DefaultArg:
            kwargs['xmax'] = xmax
        if pressed_point_id != _DefaultArg:
            kwargs['pressed_point_id'] = pressed_point_id
        if hdiv_cnt != _DefaultArg:
            kwargs['hdiv_cnt'] = hdiv_cnt
        if vdiv_cnt != _DefaultArg:
            kwargs['vdiv_cnt'] = vdiv_cnt
        if point_cnt != _DefaultArg:
            kwargs['point_cnt'] = point_cnt
        if zoom_x != _DefaultArg:
            kwargs['zoom_x'] = zoom_x
        if zoom_y != _DefaultArg:
            kwargs['zoom_y'] = zoom_y
        if type != _DefaultArg:
            kwargs['type'] = type
        if update_mode != _DefaultArg:
            kwargs['update_mode'] = update_mode
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def series_ll(self) -> "ll_t":  # NOQA
            ...

        @series_ll.setter
        def series_ll(self, value: "ll_t"):
            ...

        @property
        def cursor_ll(self) -> "ll_t":  # NOQA
            ...

        @cursor_ll.setter
        def cursor_ll(self, value: "ll_t"):
            ...

        @property
        def tick(self) -> List["chart_tick_dsc_t"]:  # NOQA
            ...

        @tick.setter
        def tick(self, value: List["chart_tick_dsc_t"]):
            ...

        @property
        def ymin(self) -> List["coord_t"]:  # NOQA
            ...

        @ymin.setter
        def ymin(self, value: List["coord_t"]):
            ...

        @property
        def ymax(self) -> List["coord_t"]:  # NOQA
            ...

        @ymax.setter
        def ymax(self, value: List["coord_t"]):
            ...

        @property
        def xmin(self) -> List["coord_t"]:  # NOQA
            ...

        @xmin.setter
        def xmin(self, value: List["coord_t"]):
            ...

        @property
        def xmax(self) -> List["coord_t"]:  # NOQA
            ...

        @xmax.setter
        def xmax(self, value: List["coord_t"]):
            ...

        @property
        def pressed_point_id(self) -> "coord_t":  # NOQA
            ...

        @pressed_point_id.setter
        def pressed_point_id(self, value: "coord_t"):
            ...

        @property
        def hdiv_cnt(self) -> "uint16_t":  # NOQA
            ...

        @hdiv_cnt.setter
        def hdiv_cnt(self, value: "uint16_t"):
            ...

        @property
        def vdiv_cnt(self) -> "uint16_t":  # NOQA
            ...

        @vdiv_cnt.setter
        def vdiv_cnt(self, value: "uint16_t"):
            ...

        @property
        def point_cnt(self) -> "uint16_t":  # NOQA
            ...

        @point_cnt.setter
        def point_cnt(self, value: "uint16_t"):
            ...

        @property
        def zoom_x(self) -> "uint16_t":  # NOQA
            ...

        @zoom_x.setter
        def zoom_x(self, value: "uint16_t"):
            ...

        @property
        def zoom_y(self) -> "uint16_t":  # NOQA
            ...

        @zoom_y.setter
        def zoom_y(self, value: "uint16_t"):
            ...

        @property
        def type(self) -> "chart_type_t":  # NOQA
            ...

        @type.setter
        def type(self, value: "chart_type_t"):
            ...

        @property
        def update_mode(self) -> "chart_update_mode_t":  # NOQA
            ...

        @update_mode.setter
        def update_mode(self, value: "chart_update_mode_t"):
            ...


class checkbox_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        txt: Optional["char_t"] = _DefaultArg, 
        static_txt: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if txt != _DefaultArg:
            kwargs['txt'] = txt
        if static_txt != _DefaultArg:
            kwargs['static_txt'] = static_txt
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def txt(self) -> "char_t":  # NOQA
            ...

        @txt.setter
        def txt(self, value: "char_t"):
            ...

        @property
        def static_txt(self) -> "uint32_t":  # NOQA
            ...

        @static_txt.setter
        def static_txt(self, value: "uint32_t"):
            ...


class dropdown_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        list: Optional["obj_t"] = _DefaultArg, 
        text: Optional["char_t"] = _DefaultArg, 
        symbol: Optional[Any] = _DefaultArg, 
        options: Optional["char_t"] = _DefaultArg, 
        option_cnt: Optional["uint16_t"] = _DefaultArg, 
        sel_opt_id: Optional["uint16_t"] = _DefaultArg, 
        sel_opt_id_orig: Optional["uint16_t"] = _DefaultArg, 
        pr_opt_id: Optional["uint16_t"] = _DefaultArg, 
        dir: Optional["dir_t"] = _DefaultArg, 
        static_txt: Optional["uint8_t"] = _DefaultArg, 
        selected_highlight: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if list != _DefaultArg:
            kwargs['list'] = list
        if text != _DefaultArg:
            kwargs['text'] = text
        if symbol != _DefaultArg:
            kwargs['symbol'] = symbol
        if options != _DefaultArg:
            kwargs['options'] = options
        if option_cnt != _DefaultArg:
            kwargs['option_cnt'] = option_cnt
        if sel_opt_id != _DefaultArg:
            kwargs['sel_opt_id'] = sel_opt_id
        if sel_opt_id_orig != _DefaultArg:
            kwargs['sel_opt_id_orig'] = sel_opt_id_orig
        if pr_opt_id != _DefaultArg:
            kwargs['pr_opt_id'] = pr_opt_id
        if dir != _DefaultArg:
            kwargs['dir'] = dir
        if static_txt != _DefaultArg:
            kwargs['static_txt'] = static_txt
        if selected_highlight != _DefaultArg:
            kwargs['selected_highlight'] = selected_highlight
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def list(self) -> "obj_t":  # NOQA
            ...

        @list.setter
        def list(self, value: "obj_t"):
            ...

        @property
        def text(self) -> "char_t":  # NOQA
            ...

        @text.setter
        def text(self, value: "char_t"):
            ...

        @property
        def symbol(self) -> Any:  # NOQA
            ...

        @symbol.setter
        def symbol(self, value: Any):
            ...

        @property
        def options(self) -> "char_t":  # NOQA
            ...

        @options.setter
        def options(self, value: "char_t"):
            ...

        @property
        def option_cnt(self) -> "uint16_t":  # NOQA
            ...

        @option_cnt.setter
        def option_cnt(self, value: "uint16_t"):
            ...

        @property
        def sel_opt_id(self) -> "uint16_t":  # NOQA
            ...

        @sel_opt_id.setter
        def sel_opt_id(self, value: "uint16_t"):
            ...

        @property
        def sel_opt_id_orig(self) -> "uint16_t":  # NOQA
            ...

        @sel_opt_id_orig.setter
        def sel_opt_id_orig(self, value: "uint16_t"):
            ...

        @property
        def pr_opt_id(self) -> "uint16_t":  # NOQA
            ...

        @pr_opt_id.setter
        def pr_opt_id(self, value: "uint16_t"):
            ...

        @property
        def dir(self) -> "dir_t":  # NOQA
            ...

        @dir.setter
        def dir(self, value: "dir_t"):
            ...

        @property
        def static_txt(self) -> "uint8_t":  # NOQA
            ...

        @static_txt.setter
        def static_txt(self, value: "uint8_t"):
            ...

        @property
        def selected_highlight(self) -> "uint8_t":  # NOQA
            ...

        @selected_highlight.setter
        def selected_highlight(self, value: "uint8_t"):
            ...


class dropdown_list_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        dropdown: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if dropdown != _DefaultArg:
            kwargs['dropdown'] = dropdown
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def dropdown(self) -> "obj_t":  # NOQA
            ...

        @dropdown.setter
        def dropdown(self, value: "obj_t"):
            ...


class imgbtn_src_info_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        img_src: Optional[Any] = _DefaultArg, 
        header: Optional["img_header_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if img_src != _DefaultArg:
            kwargs['img_src'] = img_src
        if header != _DefaultArg:
            kwargs['header'] = header
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def img_src(self) -> Any:  # NOQA
            ...

        @img_src.setter
        def img_src(self, value: Any):
            ...

        @property
        def header(self) -> "img_header_t":  # NOQA
            ...

        @header.setter
        def header(self, value: "img_header_t"):
            ...


class imgbtn_t(_Structure): 
    _special_types_ = {
        'src_mid': list,
        'src_left': list,
        'src_right': list
    }
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        src_mid: Optional[List["imgbtn_src_info_t"]] = _DefaultArg, 
        src_left: Optional[List["imgbtn_src_info_t"]] = _DefaultArg, 
        src_right: Optional[List["imgbtn_src_info_t"]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if src_mid != _DefaultArg:
            kwargs['src_mid'] = src_mid
        if src_left != _DefaultArg:
            kwargs['src_left'] = src_left
        if src_right != _DefaultArg:
            kwargs['src_right'] = src_right
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def src_mid(self) -> List["imgbtn_src_info_t"]:  # NOQA
            ...

        @src_mid.setter
        def src_mid(self, value: List["imgbtn_src_info_t"]):
            ...

        @property
        def src_left(self) -> List["imgbtn_src_info_t"]:  # NOQA
            ...

        @src_left.setter
        def src_left(self, value: List["imgbtn_src_info_t"]):
            ...

        @property
        def src_right(self) -> List["imgbtn_src_info_t"]:  # NOQA
            ...

        @src_right.setter
        def src_right(self, value: List["imgbtn_src_info_t"]):
            ...


class keyboard_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        btnm: Optional["btnmatrix_t"] = _DefaultArg, 
        ta: Optional["obj_t"] = _DefaultArg, 
        mode: Optional["keyboard_mode_t"] = _DefaultArg, 
        popovers: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if btnm != _DefaultArg:
            kwargs['btnm'] = btnm
        if ta != _DefaultArg:
            kwargs['ta'] = ta
        if mode != _DefaultArg:
            kwargs['mode'] = mode
        if popovers != _DefaultArg:
            kwargs['popovers'] = popovers
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def btnm(self) -> "btnmatrix_t":  # NOQA
            ...

        @btnm.setter
        def btnm(self, value: "btnmatrix_t"):
            ...

        @property
        def ta(self) -> "obj_t":  # NOQA
            ...

        @ta.setter
        def ta(self, value: "obj_t"):
            ...

        @property
        def mode(self) -> "keyboard_mode_t":  # NOQA
            ...

        @mode.setter
        def mode(self, value: "keyboard_mode_t"):
            ...

        @property
        def popovers(self) -> "uint8_t":  # NOQA
            ...

        @popovers.setter
        def popovers(self, value: "uint8_t"):
            ...


class led_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        bright: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if color != _DefaultArg:
            kwargs['color'] = color
        if bright != _DefaultArg:
            kwargs['bright'] = bright
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def color(self) -> "color_t":  # NOQA
            ...

        @color.setter
        def color(self, value: "color_t"):
            ...

        @property
        def bright(self) -> "uint8_t":  # NOQA
            ...

        @bright.setter
        def bright(self, value: "uint8_t"):
            ...


class line_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        point_array: Optional["point_t"] = _DefaultArg, 
        point_num: Optional["uint16_t"] = _DefaultArg, 
        y_inv: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if point_array != _DefaultArg:
            kwargs['point_array'] = point_array
        if point_num != _DefaultArg:
            kwargs['point_num'] = point_num
        if y_inv != _DefaultArg:
            kwargs['y_inv'] = y_inv
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def point_array(self) -> "point_t":  # NOQA
            ...

        @point_array.setter
        def point_array(self, value: "point_t"):
            ...

        @property
        def point_num(self) -> "uint16_t":  # NOQA
            ...

        @point_num.setter
        def point_num(self, value: "uint16_t"):
            ...

        @property
        def y_inv(self) -> "uint8_t":  # NOQA
            ...

        @y_inv.setter
        def y_inv(self, value: "uint8_t"):
            ...


class menu_load_page_event_data_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        menu: Optional["obj_t"] = _DefaultArg, 
        page: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if menu != _DefaultArg:
            kwargs['menu'] = menu
        if page != _DefaultArg:
            kwargs['page'] = page
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def menu(self) -> "obj_t":  # NOQA
            ...

        @menu.setter
        def menu(self, value: "obj_t"):
            ...

        @property
        def page(self) -> "obj_t":  # NOQA
            ...

        @page.setter
        def page(self, value: "obj_t"):
            ...


class menu_history_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        page: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if page != _DefaultArg:
            kwargs['page'] = page
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def page(self) -> "obj_t":  # NOQA
            ...

        @page.setter
        def page(self, value: "obj_t"):
            ...


class menu_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        storage: Optional["obj_t"] = _DefaultArg, 
        main: Optional["obj_t"] = _DefaultArg, 
        main_page: Optional["obj_t"] = _DefaultArg, 
        main_header: Optional["obj_t"] = _DefaultArg, 
        main_header_back_btn: Optional["obj_t"] = _DefaultArg, 
        main_header_title: Optional["obj_t"] = _DefaultArg, 
        sidebar: Optional["obj_t"] = _DefaultArg, 
        sidebar_page: Optional["obj_t"] = _DefaultArg, 
        sidebar_header: Optional["obj_t"] = _DefaultArg, 
        sidebar_header_back_btn: Optional["obj_t"] = _DefaultArg, 
        sidebar_header_title: Optional["obj_t"] = _DefaultArg, 
        selected_tab: Optional["obj_t"] = _DefaultArg, 
        history_ll: Optional["ll_t"] = _DefaultArg, 
        cur_depth: Optional["uint8_t"] = _DefaultArg, 
        prev_depth: Optional["uint8_t"] = _DefaultArg, 
        sidebar_generated: Optional["uint8_t"] = _DefaultArg, 
        mode_header: Optional["menu_mode_header_t"] = _DefaultArg, 
        mode_root_back_btn: Optional["menu_mode_root_back_btn_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if storage != _DefaultArg:
            kwargs['storage'] = storage
        if main != _DefaultArg:
            kwargs['main'] = main
        if main_page != _DefaultArg:
            kwargs['main_page'] = main_page
        if main_header != _DefaultArg:
            kwargs['main_header'] = main_header
        if main_header_back_btn != _DefaultArg:
            kwargs['main_header_back_btn'] = main_header_back_btn
        if main_header_title != _DefaultArg:
            kwargs['main_header_title'] = main_header_title
        if sidebar != _DefaultArg:
            kwargs['sidebar'] = sidebar
        if sidebar_page != _DefaultArg:
            kwargs['sidebar_page'] = sidebar_page
        if sidebar_header != _DefaultArg:
            kwargs['sidebar_header'] = sidebar_header
        if sidebar_header_back_btn != _DefaultArg:
            kwargs['sidebar_header_back_btn'] = sidebar_header_back_btn
        if sidebar_header_title != _DefaultArg:
            kwargs['sidebar_header_title'] = sidebar_header_title
        if selected_tab != _DefaultArg:
            kwargs['selected_tab'] = selected_tab
        if history_ll != _DefaultArg:
            kwargs['history_ll'] = history_ll
        if cur_depth != _DefaultArg:
            kwargs['cur_depth'] = cur_depth
        if prev_depth != _DefaultArg:
            kwargs['prev_depth'] = prev_depth
        if sidebar_generated != _DefaultArg:
            kwargs['sidebar_generated'] = sidebar_generated
        if mode_header != _DefaultArg:
            kwargs['mode_header'] = mode_header
        if mode_root_back_btn != _DefaultArg:
            kwargs['mode_root_back_btn'] = mode_root_back_btn
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def storage(self) -> "obj_t":  # NOQA
            ...

        @storage.setter
        def storage(self, value: "obj_t"):
            ...

        @property
        def main(self) -> "obj_t":  # NOQA
            ...

        @main.setter
        def main(self, value: "obj_t"):
            ...

        @property
        def main_page(self) -> "obj_t":  # NOQA
            ...

        @main_page.setter
        def main_page(self, value: "obj_t"):
            ...

        @property
        def main_header(self) -> "obj_t":  # NOQA
            ...

        @main_header.setter
        def main_header(self, value: "obj_t"):
            ...

        @property
        def main_header_back_btn(self) -> "obj_t":  # NOQA
            ...

        @main_header_back_btn.setter
        def main_header_back_btn(self, value: "obj_t"):
            ...

        @property
        def main_header_title(self) -> "obj_t":  # NOQA
            ...

        @main_header_title.setter
        def main_header_title(self, value: "obj_t"):
            ...

        @property
        def sidebar(self) -> "obj_t":  # NOQA
            ...

        @sidebar.setter
        def sidebar(self, value: "obj_t"):
            ...

        @property
        def sidebar_page(self) -> "obj_t":  # NOQA
            ...

        @sidebar_page.setter
        def sidebar_page(self, value: "obj_t"):
            ...

        @property
        def sidebar_header(self) -> "obj_t":  # NOQA
            ...

        @sidebar_header.setter
        def sidebar_header(self, value: "obj_t"):
            ...

        @property
        def sidebar_header_back_btn(self) -> "obj_t":  # NOQA
            ...

        @sidebar_header_back_btn.setter
        def sidebar_header_back_btn(self, value: "obj_t"):
            ...

        @property
        def sidebar_header_title(self) -> "obj_t":  # NOQA
            ...

        @sidebar_header_title.setter
        def sidebar_header_title(self, value: "obj_t"):
            ...

        @property
        def selected_tab(self) -> "obj_t":  # NOQA
            ...

        @selected_tab.setter
        def selected_tab(self, value: "obj_t"):
            ...

        @property
        def history_ll(self) -> "ll_t":  # NOQA
            ...

        @history_ll.setter
        def history_ll(self, value: "ll_t"):
            ...

        @property
        def cur_depth(self) -> "uint8_t":  # NOQA
            ...

        @cur_depth.setter
        def cur_depth(self, value: "uint8_t"):
            ...

        @property
        def prev_depth(self) -> "uint8_t":  # NOQA
            ...

        @prev_depth.setter
        def prev_depth(self, value: "uint8_t"):
            ...

        @property
        def sidebar_generated(self) -> "uint8_t":  # NOQA
            ...

        @sidebar_generated.setter
        def sidebar_generated(self, value: "uint8_t"):
            ...

        @property
        def mode_header(self) -> "menu_mode_header_t":  # NOQA
            ...

        @mode_header.setter
        def mode_header(self, value: "menu_mode_header_t"):
            ...

        @property
        def mode_root_back_btn(self) -> "menu_mode_root_back_btn_t":  # NOQA
            ...

        @mode_root_back_btn.setter
        def mode_root_back_btn(self, value: "menu_mode_root_back_btn_t"):
            ...


class menu_page_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        title: Optional["char_t"] = _DefaultArg, 
        static_title: Optional[bool_t] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if title != _DefaultArg:
            kwargs['title'] = title
        if static_title != _DefaultArg:
            kwargs['static_title'] = static_title
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def title(self) -> "char_t":  # NOQA
            ...

        @title.setter
        def title(self, value: "char_t"):
            ...

        @property
        def static_title(self) -> _type_bool_t:  # NOQA
            ...

        @static_title.setter
        def static_title(self, value: _type_bool_t):
            ...


class meter_indicator_t(_Structure): 
    class _type_data(_Union): 
        class _needle_img(_Structure): 
            _special_types_ = {}
            
            def __init__(
                self, 
                src: Optional[Any] = _DefaultArg, 
                pivot: Optional["point_t"] = _DefaultArg
            ):
                _Structure.__init__(self)
                kwargs = {}
                if src != _DefaultArg:
                    kwargs['src'] = src
                if pivot != _DefaultArg:
                    kwargs['pivot'] = pivot
                for key, value in kwargs.items():
                    setattr(self, key, value)
                
            if TYPE_CHECKING:
        
                @property
                def src(self) -> Any:  # NOQA
                    ...
        
                @src.setter
                def src(self, value: Any):
                    ...
        
                @property
                def pivot(self) -> "point_t":  # NOQA
                    ...
        
                @pivot.setter
                def pivot(self, value: "point_t"):
                    ...
    
        setattr(_needle_img, '__SIZE__', _ctypes.sizeof(_needle_img))
    
        class _needle_line(_Structure): 
            _special_types_ = {}
            
            def __init__(
                self, 
                width: Optional["uint16_t"] = _DefaultArg, 
                r_mod: Optional["int16_t"] = _DefaultArg, 
                color: Optional["color_t"] = _DefaultArg
            ):
                _Structure.__init__(self)
                kwargs = {}
                if width != _DefaultArg:
                    kwargs['width'] = width
                if r_mod != _DefaultArg:
                    kwargs['r_mod'] = r_mod
                if color != _DefaultArg:
                    kwargs['color'] = color
                for key, value in kwargs.items():
                    setattr(self, key, value)
                
            if TYPE_CHECKING:
        
                @property
                def width(self) -> "uint16_t":  # NOQA
                    ...
        
                @width.setter
                def width(self, value: "uint16_t"):
                    ...
        
                @property
                def r_mod(self) -> "int16_t":  # NOQA
                    ...
        
                @r_mod.setter
                def r_mod(self, value: "int16_t"):
                    ...
        
                @property
                def color(self) -> "color_t":  # NOQA
                    ...
        
                @color.setter
                def color(self, value: "color_t"):
                    ...
    
        setattr(_needle_line, '__SIZE__', _ctypes.sizeof(_needle_line))
    
        class _arc(_Structure): 
            _special_types_ = {}
            
            def __init__(
                self, 
                width: Optional["uint16_t"] = _DefaultArg, 
                src: Optional[Any] = _DefaultArg, 
                color: Optional["color_t"] = _DefaultArg, 
                r_mod: Optional["int16_t"] = _DefaultArg
            ):
                _Structure.__init__(self)
                kwargs = {}
                if width != _DefaultArg:
                    kwargs['width'] = width
                if src != _DefaultArg:
                    kwargs['src'] = src
                if color != _DefaultArg:
                    kwargs['color'] = color
                if r_mod != _DefaultArg:
                    kwargs['r_mod'] = r_mod
                for key, value in kwargs.items():
                    setattr(self, key, value)
                
            if TYPE_CHECKING:
        
                @property
                def width(self) -> "uint16_t":  # NOQA
                    ...
        
                @width.setter
                def width(self, value: "uint16_t"):
                    ...
        
                @property
                def src(self) -> Any:  # NOQA
                    ...
        
                @src.setter
                def src(self, value: Any):
                    ...
        
                @property
                def color(self) -> "color_t":  # NOQA
                    ...
        
                @color.setter
                def color(self, value: "color_t"):
                    ...
        
                @property
                def r_mod(self) -> "int16_t":  # NOQA
                    ...
        
                @r_mod.setter
                def r_mod(self, value: "int16_t"):
                    ...
    
        setattr(_arc, '__SIZE__', _ctypes.sizeof(_arc))
    
        class _scale_lines(_Structure): 
            _special_types_ = {}
            
            def __init__(
                self, 
                width_mod: Optional["int16_t"] = _DefaultArg, 
                color_start: Optional["color_t"] = _DefaultArg, 
                color_end: Optional["color_t"] = _DefaultArg, 
                local_grad: Optional["uint8_t"] = _DefaultArg
            ):
                _Structure.__init__(self)
                kwargs = {}
                if width_mod != _DefaultArg:
                    kwargs['width_mod'] = width_mod
                if color_start != _DefaultArg:
                    kwargs['color_start'] = color_start
                if color_end != _DefaultArg:
                    kwargs['color_end'] = color_end
                if local_grad != _DefaultArg:
                    kwargs['local_grad'] = local_grad
                for key, value in kwargs.items():
                    setattr(self, key, value)
                
            if TYPE_CHECKING:
        
                @property
                def width_mod(self) -> "int16_t":  # NOQA
                    ...
        
                @width_mod.setter
                def width_mod(self, value: "int16_t"):
                    ...
        
                @property
                def color_start(self) -> "color_t":  # NOQA
                    ...
        
                @color_start.setter
                def color_start(self, value: "color_t"):
                    ...
        
                @property
                def color_end(self) -> "color_t":  # NOQA
                    ...
        
                @color_end.setter
                def color_end(self, value: "color_t"):
                    ...
        
                @property
                def local_grad(self) -> "uint8_t":  # NOQA
                    ...
        
                @local_grad.setter
                def local_grad(self, value: "uint8_t"):
                    ...
    
        setattr(_scale_lines, '__SIZE__', _ctypes.sizeof(_scale_lines))
    
        _special_types_ = {}
        
        def __init__(
            self, 
            needle_img: Optional[_needle_img] = _DefaultArg, 
            needle_line: Optional[_needle_line] = _DefaultArg, 
            arc: Optional[_arc] = _DefaultArg, 
            scale_lines: Optional[_scale_lines] = _DefaultArg
        ):
            _Union.__init__(self)
            kwargs = {}
            if needle_img != _DefaultArg:
                kwargs['needle_img'] = needle_img
            if needle_line != _DefaultArg:
                kwargs['needle_line'] = needle_line
            if arc != _DefaultArg:
                kwargs['arc'] = arc
            if scale_lines != _DefaultArg:
                kwargs['scale_lines'] = scale_lines
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def needle_img(self) -> _needle_img:  # NOQA
                ...
    
            @needle_img.setter
            def needle_img(self, value: _needle_img):
                ...
    
            @property
            def needle_line(self) -> _needle_line:  # NOQA
                ...
    
            @needle_line.setter
            def needle_line(self, value: _needle_line):
                ...
    
            @property
            def arc(self) -> _arc:  # NOQA
                ...
    
            @arc.setter
            def arc(self, value: _arc):
                ...
    
            @property
            def scale_lines(self) -> _scale_lines:  # NOQA
                ...
    
            @scale_lines.setter
            def scale_lines(self, value: _scale_lines):
                ...

    setattr(_type_data, '__SIZE__', _ctypes.sizeof(_type_data))

    _special_types_ = {}
    
    def __init__(
        self, 
        type: Optional["meter_indicator_type_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        start_value: Optional["int32_t"] = _DefaultArg, 
        end_value: Optional["int32_t"] = _DefaultArg, 
        type_data: Optional[_type_data] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if type != _DefaultArg:
            kwargs['type'] = type
        if opa != _DefaultArg:
            kwargs['opa'] = opa
        if start_value != _DefaultArg:
            kwargs['start_value'] = start_value
        if end_value != _DefaultArg:
            kwargs['end_value'] = end_value
        if type_data != _DefaultArg:
            kwargs['type_data'] = type_data
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def type(self) -> "meter_indicator_type_t":  # NOQA
            ...

        @type.setter
        def type(self, value: "meter_indicator_type_t"):
            ...

        @property
        def opa(self) -> "opa_t":  # NOQA
            ...

        @opa.setter
        def opa(self, value: "opa_t"):
            ...

        @property
        def start_value(self) -> "int32_t":  # NOQA
            ...

        @start_value.setter
        def start_value(self, value: "int32_t"):
            ...

        @property
        def end_value(self) -> "int32_t":  # NOQA
            ...

        @end_value.setter
        def end_value(self, value: "int32_t"):
            ...

        @property
        def type_data(self) -> _type_data:  # NOQA
            ...

        @type_data.setter
        def type_data(self, value: _type_data):
            ...


class meter_t(_Structure): 
    class _scale(_Structure): 
        _special_types_ = {}
        
        def __init__(
            self, 
            tick_color: Optional["color_t"] = _DefaultArg, 
            tick_cnt: Optional["uint16_t"] = _DefaultArg, 
            tick_length: Optional["uint16_t"] = _DefaultArg, 
            tick_width: Optional["uint16_t"] = _DefaultArg, 
            tick_major_color: Optional["color_t"] = _DefaultArg, 
            tick_major_nth: Optional["uint16_t"] = _DefaultArg, 
            tick_major_length: Optional["uint16_t"] = _DefaultArg, 
            tick_major_width: Optional["uint16_t"] = _DefaultArg, 
            label_gap: Optional["int16_t"] = _DefaultArg, 
            label_color: Optional["int16_t"] = _DefaultArg, 
            min: Optional["int32_t"] = _DefaultArg, 
            max: Optional["int32_t"] = _DefaultArg, 
            r_mod: Optional["int16_t"] = _DefaultArg, 
            angle_range: Optional["uint16_t"] = _DefaultArg, 
            rotation: Optional["int16_t"] = _DefaultArg
        ):
            _Structure.__init__(self)
            kwargs = {}
            if tick_color != _DefaultArg:
                kwargs['tick_color'] = tick_color
            if tick_cnt != _DefaultArg:
                kwargs['tick_cnt'] = tick_cnt
            if tick_length != _DefaultArg:
                kwargs['tick_length'] = tick_length
            if tick_width != _DefaultArg:
                kwargs['tick_width'] = tick_width
            if tick_major_color != _DefaultArg:
                kwargs['tick_major_color'] = tick_major_color
            if tick_major_nth != _DefaultArg:
                kwargs['tick_major_nth'] = tick_major_nth
            if tick_major_length != _DefaultArg:
                kwargs['tick_major_length'] = tick_major_length
            if tick_major_width != _DefaultArg:
                kwargs['tick_major_width'] = tick_major_width
            if label_gap != _DefaultArg:
                kwargs['label_gap'] = label_gap
            if label_color != _DefaultArg:
                kwargs['label_color'] = label_color
            if min != _DefaultArg:
                kwargs['min'] = min
            if max != _DefaultArg:
                kwargs['max'] = max
            if r_mod != _DefaultArg:
                kwargs['r_mod'] = r_mod
            if angle_range != _DefaultArg:
                kwargs['angle_range'] = angle_range
            if rotation != _DefaultArg:
                kwargs['rotation'] = rotation
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def tick_color(self) -> "color_t":  # NOQA
                ...
    
            @tick_color.setter
            def tick_color(self, value: "color_t"):
                ...
    
            @property
            def tick_cnt(self) -> "uint16_t":  # NOQA
                ...
    
            @tick_cnt.setter
            def tick_cnt(self, value: "uint16_t"):
                ...
    
            @property
            def tick_length(self) -> "uint16_t":  # NOQA
                ...
    
            @tick_length.setter
            def tick_length(self, value: "uint16_t"):
                ...
    
            @property
            def tick_width(self) -> "uint16_t":  # NOQA
                ...
    
            @tick_width.setter
            def tick_width(self, value: "uint16_t"):
                ...
    
            @property
            def tick_major_color(self) -> "color_t":  # NOQA
                ...
    
            @tick_major_color.setter
            def tick_major_color(self, value: "color_t"):
                ...
    
            @property
            def tick_major_nth(self) -> "uint16_t":  # NOQA
                ...
    
            @tick_major_nth.setter
            def tick_major_nth(self, value: "uint16_t"):
                ...
    
            @property
            def tick_major_length(self) -> "uint16_t":  # NOQA
                ...
    
            @tick_major_length.setter
            def tick_major_length(self, value: "uint16_t"):
                ...
    
            @property
            def tick_major_width(self) -> "uint16_t":  # NOQA
                ...
    
            @tick_major_width.setter
            def tick_major_width(self, value: "uint16_t"):
                ...
    
            @property
            def label_gap(self) -> "int16_t":  # NOQA
                ...
    
            @label_gap.setter
            def label_gap(self, value: "int16_t"):
                ...
    
            @property
            def label_color(self) -> "int16_t":  # NOQA
                ...
    
            @label_color.setter
            def label_color(self, value: "int16_t"):
                ...
    
            @property
            def min(self) -> "int32_t":  # NOQA
                ...
    
            @min.setter
            def min(self, value: "int32_t"):
                ...
    
            @property
            def max(self) -> "int32_t":  # NOQA
                ...
    
            @max.setter
            def max(self, value: "int32_t"):
                ...
    
            @property
            def r_mod(self) -> "int16_t":  # NOQA
                ...
    
            @r_mod.setter
            def r_mod(self, value: "int16_t"):
                ...
    
            @property
            def angle_range(self) -> "uint16_t":  # NOQA
                ...
    
            @angle_range.setter
            def angle_range(self, value: "uint16_t"):
                ...
    
            @property
            def rotation(self) -> "int16_t":  # NOQA
                ...
    
            @rotation.setter
            def rotation(self, value: "int16_t"):
                ...

    setattr(_scale, '__SIZE__', _ctypes.sizeof(_scale))

    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        scale: Optional[_scale] = _DefaultArg, 
        indicator_ll: Optional["ll_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if scale != _DefaultArg:
            kwargs['scale'] = scale
        if indicator_ll != _DefaultArg:
            kwargs['indicator_ll'] = indicator_ll
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def scale(self) -> _scale:  # NOQA
            ...

        @scale.setter
        def scale(self, value: _scale):
            ...

        @property
        def indicator_ll(self) -> "ll_t":  # NOQA
            ...

        @indicator_ll.setter
        def indicator_ll(self, value: "ll_t"):
            ...


class msgbox_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        title: Optional["obj_t"] = _DefaultArg, 
        close_btn: Optional["obj_t"] = _DefaultArg, 
        content: Optional["obj_t"] = _DefaultArg, 
        text: Optional["obj_t"] = _DefaultArg, 
        btns: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if title != _DefaultArg:
            kwargs['title'] = title
        if close_btn != _DefaultArg:
            kwargs['close_btn'] = close_btn
        if content != _DefaultArg:
            kwargs['content'] = content
        if text != _DefaultArg:
            kwargs['text'] = text
        if btns != _DefaultArg:
            kwargs['btns'] = btns
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def title(self) -> "obj_t":  # NOQA
            ...

        @title.setter
        def title(self, value: "obj_t"):
            ...

        @property
        def close_btn(self) -> "obj_t":  # NOQA
            ...

        @close_btn.setter
        def close_btn(self, value: "obj_t"):
            ...

        @property
        def content(self) -> "obj_t":  # NOQA
            ...

        @content.setter
        def content(self, value: "obj_t"):
            ...

        @property
        def text(self) -> "obj_t":  # NOQA
            ...

        @text.setter
        def text(self, value: "obj_t"):
            ...

        @property
        def btns(self) -> "obj_t":  # NOQA
            ...

        @btns.setter
        def btns(self, value: "obj_t"):
            ...


class roller_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        option_cnt: Optional["uint16_t"] = _DefaultArg, 
        sel_opt_id: Optional["uint16_t"] = _DefaultArg, 
        sel_opt_id_ori: Optional["uint16_t"] = _DefaultArg, 
        inf_page_cnt: Optional["uint32_t"] = _DefaultArg, 
        mode: Optional["roller_mode_t"] = _DefaultArg, 
        moved: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if option_cnt != _DefaultArg:
            kwargs['option_cnt'] = option_cnt
        if sel_opt_id != _DefaultArg:
            kwargs['sel_opt_id'] = sel_opt_id
        if sel_opt_id_ori != _DefaultArg:
            kwargs['sel_opt_id_ori'] = sel_opt_id_ori
        if inf_page_cnt != _DefaultArg:
            kwargs['inf_page_cnt'] = inf_page_cnt
        if mode != _DefaultArg:
            kwargs['mode'] = mode
        if moved != _DefaultArg:
            kwargs['moved'] = moved
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def option_cnt(self) -> "uint16_t":  # NOQA
            ...

        @option_cnt.setter
        def option_cnt(self, value: "uint16_t"):
            ...

        @property
        def sel_opt_id(self) -> "uint16_t":  # NOQA
            ...

        @sel_opt_id.setter
        def sel_opt_id(self, value: "uint16_t"):
            ...

        @property
        def sel_opt_id_ori(self) -> "uint16_t":  # NOQA
            ...

        @sel_opt_id_ori.setter
        def sel_opt_id_ori(self, value: "uint16_t"):
            ...

        @property
        def inf_page_cnt(self) -> "uint32_t":  # NOQA
            ...

        @inf_page_cnt.setter
        def inf_page_cnt(self, value: "uint32_t"):
            ...

        @property
        def mode(self) -> "roller_mode_t":  # NOQA
            ...

        @mode.setter
        def mode(self, value: "roller_mode_t"):
            ...

        @property
        def moved(self) -> "uint32_t":  # NOQA
            ...

        @moved.setter
        def moved(self, value: "uint32_t"):
            ...


class slider_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        bar: Optional["bar_t"] = _DefaultArg, 
        left_knob_area: Optional["area_t"] = _DefaultArg, 
        right_knob_area: Optional["area_t"] = _DefaultArg, 
        pressed_point: Optional["point_t"] = _DefaultArg, 
        value_to_set: Optional["int32_t"] = _DefaultArg, 
        dragging: Optional["uint8_t"] = _DefaultArg, 
        left_knob_focus: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if bar != _DefaultArg:
            kwargs['bar'] = bar
        if left_knob_area != _DefaultArg:
            kwargs['left_knob_area'] = left_knob_area
        if right_knob_area != _DefaultArg:
            kwargs['right_knob_area'] = right_knob_area
        if pressed_point != _DefaultArg:
            kwargs['pressed_point'] = pressed_point
        if value_to_set != _DefaultArg:
            kwargs['value_to_set'] = value_to_set
        if dragging != _DefaultArg:
            kwargs['dragging'] = dragging
        if left_knob_focus != _DefaultArg:
            kwargs['left_knob_focus'] = left_knob_focus
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def bar(self) -> "bar_t":  # NOQA
            ...

        @bar.setter
        def bar(self, value: "bar_t"):
            ...

        @property
        def left_knob_area(self) -> "area_t":  # NOQA
            ...

        @left_knob_area.setter
        def left_knob_area(self, value: "area_t"):
            ...

        @property
        def right_knob_area(self) -> "area_t":  # NOQA
            ...

        @right_knob_area.setter
        def right_knob_area(self, value: "area_t"):
            ...

        @property
        def pressed_point(self) -> "point_t":  # NOQA
            ...

        @pressed_point.setter
        def pressed_point(self, value: "point_t"):
            ...

        @property
        def value_to_set(self) -> "int32_t":  # NOQA
            ...

        @value_to_set.setter
        def value_to_set(self, value: "int32_t"):
            ...

        @property
        def dragging(self) -> "uint8_t":  # NOQA
            ...

        @dragging.setter
        def dragging(self, value: "uint8_t"):
            ...

        @property
        def left_knob_focus(self) -> "uint8_t":  # NOQA
            ...

        @left_knob_focus.setter
        def left_knob_focus(self, value: "uint8_t"):
            ...


class span_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        txt: Optional["char_t"] = _DefaultArg, 
        spangroup: Optional["obj_t"] = _DefaultArg, 
        style: Optional["style_t"] = _DefaultArg, 
        static_flag: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if txt != _DefaultArg:
            kwargs['txt'] = txt
        if spangroup != _DefaultArg:
            kwargs['spangroup'] = spangroup
        if style != _DefaultArg:
            kwargs['style'] = style
        if static_flag != _DefaultArg:
            kwargs['static_flag'] = static_flag
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def txt(self) -> "char_t":  # NOQA
            ...

        @txt.setter
        def txt(self, value: "char_t"):
            ...

        @property
        def spangroup(self) -> "obj_t":  # NOQA
            ...

        @spangroup.setter
        def spangroup(self, value: "obj_t"):
            ...

        @property
        def style(self) -> "style_t":  # NOQA
            ...

        @style.setter
        def style(self, value: "style_t"):
            ...

        @property
        def static_flag(self) -> "uint8_t":  # NOQA
            ...

        @static_flag.setter
        def static_flag(self, value: "uint8_t"):
            ...


class spangroup_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        lines: Optional["int32_t"] = _DefaultArg, 
        indent: Optional["coord_t"] = _DefaultArg, 
        cache_w: Optional["coord_t"] = _DefaultArg, 
        cache_h: Optional["coord_t"] = _DefaultArg, 
        child_ll: Optional["ll_t"] = _DefaultArg, 
        mode: Optional["uint8_t"] = _DefaultArg, 
        overflow: Optional["uint8_t"] = _DefaultArg, 
        refresh: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if lines != _DefaultArg:
            kwargs['lines'] = lines
        if indent != _DefaultArg:
            kwargs['indent'] = indent
        if cache_w != _DefaultArg:
            kwargs['cache_w'] = cache_w
        if cache_h != _DefaultArg:
            kwargs['cache_h'] = cache_h
        if child_ll != _DefaultArg:
            kwargs['child_ll'] = child_ll
        if mode != _DefaultArg:
            kwargs['mode'] = mode
        if overflow != _DefaultArg:
            kwargs['overflow'] = overflow
        if refresh != _DefaultArg:
            kwargs['refresh'] = refresh
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def lines(self) -> "int32_t":  # NOQA
            ...

        @lines.setter
        def lines(self, value: "int32_t"):
            ...

        @property
        def indent(self) -> "coord_t":  # NOQA
            ...

        @indent.setter
        def indent(self, value: "coord_t"):
            ...

        @property
        def cache_w(self) -> "coord_t":  # NOQA
            ...

        @cache_w.setter
        def cache_w(self, value: "coord_t"):
            ...

        @property
        def cache_h(self) -> "coord_t":  # NOQA
            ...

        @cache_h.setter
        def cache_h(self, value: "coord_t"):
            ...

        @property
        def child_ll(self) -> "ll_t":  # NOQA
            ...

        @child_ll.setter
        def child_ll(self, value: "ll_t"):
            ...

        @property
        def mode(self) -> "uint8_t":  # NOQA
            ...

        @mode.setter
        def mode(self, value: "uint8_t"):
            ...

        @property
        def overflow(self) -> "uint8_t":  # NOQA
            ...

        @overflow.setter
        def overflow(self, value: "uint8_t"):
            ...

        @property
        def refresh(self) -> "uint8_t":  # NOQA
            ...

        @refresh.setter
        def refresh(self, value: "uint8_t"):
            ...


class textarea_t(_Structure): 
    class _cursor(_Structure): 
        _special_types_ = {}
        
        def __init__(
            self, 
            valid_x: Optional["coord_t"] = _DefaultArg, 
            pos: Optional["uint32_t"] = _DefaultArg, 
            area: Optional["area_t"] = _DefaultArg, 
            txt_byte_pos: Optional["uint32_t"] = _DefaultArg, 
            show: Optional["uint8_t"] = _DefaultArg, 
            click_pos: Optional["uint8_t"] = _DefaultArg
        ):
            _Structure.__init__(self)
            kwargs = {}
            if valid_x != _DefaultArg:
                kwargs['valid_x'] = valid_x
            if pos != _DefaultArg:
                kwargs['pos'] = pos
            if area != _DefaultArg:
                kwargs['area'] = area
            if txt_byte_pos != _DefaultArg:
                kwargs['txt_byte_pos'] = txt_byte_pos
            if show != _DefaultArg:
                kwargs['show'] = show
            if click_pos != _DefaultArg:
                kwargs['click_pos'] = click_pos
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def valid_x(self) -> "coord_t":  # NOQA
                ...
    
            @valid_x.setter
            def valid_x(self, value: "coord_t"):
                ...
    
            @property
            def pos(self) -> "uint32_t":  # NOQA
                ...
    
            @pos.setter
            def pos(self, value: "uint32_t"):
                ...
    
            @property
            def area(self) -> "area_t":  # NOQA
                ...
    
            @area.setter
            def area(self, value: "area_t"):
                ...
    
            @property
            def txt_byte_pos(self) -> "uint32_t":  # NOQA
                ...
    
            @txt_byte_pos.setter
            def txt_byte_pos(self, value: "uint32_t"):
                ...
    
            @property
            def show(self) -> "uint8_t":  # NOQA
                ...
    
            @show.setter
            def show(self, value: "uint8_t"):
                ...
    
            @property
            def click_pos(self) -> "uint8_t":  # NOQA
                ...
    
            @click_pos.setter
            def click_pos(self, value: "uint8_t"):
                ...

    setattr(_cursor, '__SIZE__', _ctypes.sizeof(_cursor))

    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        label: Optional["obj_t"] = _DefaultArg, 
        placeholder_txt: Optional["char_t"] = _DefaultArg, 
        pwd_tmp: Optional["char_t"] = _DefaultArg, 
        pwd_bullet: Optional["char_t"] = _DefaultArg, 
        accepted_chars: Optional["char_t"] = _DefaultArg, 
        max_length: Optional["uint32_t"] = _DefaultArg, 
        pwd_show_time: Optional["uint16_t"] = _DefaultArg, 
        cursor: Optional[_cursor] = _DefaultArg, 
        sel_start: Optional["uint32_t"] = _DefaultArg, 
        sel_end: Optional["uint32_t"] = _DefaultArg, 
        text_sel_in_prog: Optional["uint8_t"] = _DefaultArg, 
        text_sel_en: Optional["uint8_t"] = _DefaultArg, 
        pwd_mode: Optional["uint8_t"] = _DefaultArg, 
        one_line: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if label != _DefaultArg:
            kwargs['label'] = label
        if placeholder_txt != _DefaultArg:
            kwargs['placeholder_txt'] = placeholder_txt
        if pwd_tmp != _DefaultArg:
            kwargs['pwd_tmp'] = pwd_tmp
        if pwd_bullet != _DefaultArg:
            kwargs['pwd_bullet'] = pwd_bullet
        if accepted_chars != _DefaultArg:
            kwargs['accepted_chars'] = accepted_chars
        if max_length != _DefaultArg:
            kwargs['max_length'] = max_length
        if pwd_show_time != _DefaultArg:
            kwargs['pwd_show_time'] = pwd_show_time
        if cursor != _DefaultArg:
            kwargs['cursor'] = cursor
        if sel_start != _DefaultArg:
            kwargs['sel_start'] = sel_start
        if sel_end != _DefaultArg:
            kwargs['sel_end'] = sel_end
        if text_sel_in_prog != _DefaultArg:
            kwargs['text_sel_in_prog'] = text_sel_in_prog
        if text_sel_en != _DefaultArg:
            kwargs['text_sel_en'] = text_sel_en
        if pwd_mode != _DefaultArg:
            kwargs['pwd_mode'] = pwd_mode
        if one_line != _DefaultArg:
            kwargs['one_line'] = one_line
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def label(self) -> "obj_t":  # NOQA
            ...

        @label.setter
        def label(self, value: "obj_t"):
            ...

        @property
        def placeholder_txt(self) -> "char_t":  # NOQA
            ...

        @placeholder_txt.setter
        def placeholder_txt(self, value: "char_t"):
            ...

        @property
        def pwd_tmp(self) -> "char_t":  # NOQA
            ...

        @pwd_tmp.setter
        def pwd_tmp(self, value: "char_t"):
            ...

        @property
        def pwd_bullet(self) -> "char_t":  # NOQA
            ...

        @pwd_bullet.setter
        def pwd_bullet(self, value: "char_t"):
            ...

        @property
        def accepted_chars(self) -> "char_t":  # NOQA
            ...

        @accepted_chars.setter
        def accepted_chars(self, value: "char_t"):
            ...

        @property
        def max_length(self) -> "uint32_t":  # NOQA
            ...

        @max_length.setter
        def max_length(self, value: "uint32_t"):
            ...

        @property
        def pwd_show_time(self) -> "uint16_t":  # NOQA
            ...

        @pwd_show_time.setter
        def pwd_show_time(self, value: "uint16_t"):
            ...

        @property
        def cursor(self) -> _cursor:  # NOQA
            ...

        @cursor.setter
        def cursor(self, value: _cursor):
            ...

        @property
        def sel_start(self) -> "uint32_t":  # NOQA
            ...

        @sel_start.setter
        def sel_start(self, value: "uint32_t"):
            ...

        @property
        def sel_end(self) -> "uint32_t":  # NOQA
            ...

        @sel_end.setter
        def sel_end(self, value: "uint32_t"):
            ...

        @property
        def text_sel_in_prog(self) -> "uint8_t":  # NOQA
            ...

        @text_sel_in_prog.setter
        def text_sel_in_prog(self, value: "uint8_t"):
            ...

        @property
        def text_sel_en(self) -> "uint8_t":  # NOQA
            ...

        @text_sel_en.setter
        def text_sel_en(self, value: "uint8_t"):
            ...

        @property
        def pwd_mode(self) -> "uint8_t":  # NOQA
            ...

        @pwd_mode.setter
        def pwd_mode(self, value: "uint8_t"):
            ...

        @property
        def one_line(self) -> "uint8_t":  # NOQA
            ...

        @one_line.setter
        def one_line(self, value: "uint8_t"):
            ...


class spinbox_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        ta: Optional["textarea_t"] = _DefaultArg, 
        value: Optional["int32_t"] = _DefaultArg, 
        range_max: Optional["int32_t"] = _DefaultArg, 
        range_min: Optional["int32_t"] = _DefaultArg, 
        step: Optional["int32_t"] = _DefaultArg, 
        digit_count: Optional["uint16_t"] = _DefaultArg, 
        dec_point_pos: Optional["uint16_t"] = _DefaultArg, 
        rollover: Optional["uint16_t"] = _DefaultArg, 
        digit_step_dir: Optional["uint16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if ta != _DefaultArg:
            kwargs['ta'] = ta
        if value != _DefaultArg:
            kwargs['value'] = value
        if range_max != _DefaultArg:
            kwargs['range_max'] = range_max
        if range_min != _DefaultArg:
            kwargs['range_min'] = range_min
        if step != _DefaultArg:
            kwargs['step'] = step
        if digit_count != _DefaultArg:
            kwargs['digit_count'] = digit_count
        if dec_point_pos != _DefaultArg:
            kwargs['dec_point_pos'] = dec_point_pos
        if rollover != _DefaultArg:
            kwargs['rollover'] = rollover
        if digit_step_dir != _DefaultArg:
            kwargs['digit_step_dir'] = digit_step_dir
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def ta(self) -> "textarea_t":  # NOQA
            ...

        @ta.setter
        def ta(self, value: "textarea_t"):
            ...

        @property
        def value(self) -> "int32_t":  # NOQA
            ...

        @value.setter
        def value(self, value: "int32_t"):
            ...

        @property
        def range_max(self) -> "int32_t":  # NOQA
            ...

        @range_max.setter
        def range_max(self, value: "int32_t"):
            ...

        @property
        def range_min(self) -> "int32_t":  # NOQA
            ...

        @range_min.setter
        def range_min(self, value: "int32_t"):
            ...

        @property
        def step(self) -> "int32_t":  # NOQA
            ...

        @step.setter
        def step(self, value: "int32_t"):
            ...

        @property
        def digit_count(self) -> "uint16_t":  # NOQA
            ...

        @digit_count.setter
        def digit_count(self, value: "uint16_t"):
            ...

        @property
        def dec_point_pos(self) -> "uint16_t":  # NOQA
            ...

        @dec_point_pos.setter
        def dec_point_pos(self, value: "uint16_t"):
            ...

        @property
        def rollover(self) -> "uint16_t":  # NOQA
            ...

        @rollover.setter
        def rollover(self, value: "uint16_t"):
            ...

        @property
        def digit_step_dir(self) -> "uint16_t":  # NOQA
            ...

        @digit_step_dir.setter
        def digit_step_dir(self, value: "uint16_t"):
            ...


class switch_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        anim_state: Optional["int32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if anim_state != _DefaultArg:
            kwargs['anim_state'] = anim_state
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def anim_state(self) -> "int32_t":  # NOQA
            ...

        @anim_state.setter
        def anim_state(self, value: "int32_t"):
            ...


class table_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        col_cnt: Optional["uint16_t"] = _DefaultArg, 
        row_cnt: Optional["uint16_t"] = _DefaultArg, 
        cell_data: Optional["char_t"] = _DefaultArg, 
        row_h: Optional["coord_t"] = _DefaultArg, 
        col_w: Optional["coord_t"] = _DefaultArg, 
        col_act: Optional["uint16_t"] = _DefaultArg, 
        row_act: Optional["uint16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if col_cnt != _DefaultArg:
            kwargs['col_cnt'] = col_cnt
        if row_cnt != _DefaultArg:
            kwargs['row_cnt'] = row_cnt
        if cell_data != _DefaultArg:
            kwargs['cell_data'] = cell_data
        if row_h != _DefaultArg:
            kwargs['row_h'] = row_h
        if col_w != _DefaultArg:
            kwargs['col_w'] = col_w
        if col_act != _DefaultArg:
            kwargs['col_act'] = col_act
        if row_act != _DefaultArg:
            kwargs['row_act'] = row_act
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def col_cnt(self) -> "uint16_t":  # NOQA
            ...

        @col_cnt.setter
        def col_cnt(self, value: "uint16_t"):
            ...

        @property
        def row_cnt(self) -> "uint16_t":  # NOQA
            ...

        @row_cnt.setter
        def row_cnt(self, value: "uint16_t"):
            ...

        @property
        def cell_data(self) -> "char_t":  # NOQA
            ...

        @cell_data.setter
        def cell_data(self, value: "char_t"):
            ...

        @property
        def row_h(self) -> "coord_t":  # NOQA
            ...

        @row_h.setter
        def row_h(self, value: "coord_t"):
            ...

        @property
        def col_w(self) -> "coord_t":  # NOQA
            ...

        @col_w.setter
        def col_w(self, value: "coord_t"):
            ...

        @property
        def col_act(self) -> "uint16_t":  # NOQA
            ...

        @col_act.setter
        def col_act(self, value: "uint16_t"):
            ...

        @property
        def row_act(self) -> "uint16_t":  # NOQA
            ...

        @row_act.setter
        def row_act(self, value: "uint16_t"):
            ...


class tabview_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        map: Optional["char_t"] = _DefaultArg, 
        tab_cnt: Optional["uint16_t"] = _DefaultArg, 
        tab_cur: Optional["uint16_t"] = _DefaultArg, 
        tab_pos: Optional["dir_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if map != _DefaultArg:
            kwargs['map'] = map
        if tab_cnt != _DefaultArg:
            kwargs['tab_cnt'] = tab_cnt
        if tab_cur != _DefaultArg:
            kwargs['tab_cur'] = tab_cur
        if tab_pos != _DefaultArg:
            kwargs['tab_pos'] = tab_pos
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def map(self) -> "char_t":  # NOQA
            ...

        @map.setter
        def map(self, value: "char_t"):
            ...

        @property
        def tab_cnt(self) -> "uint16_t":  # NOQA
            ...

        @tab_cnt.setter
        def tab_cnt(self, value: "uint16_t"):
            ...

        @property
        def tab_cur(self) -> "uint16_t":  # NOQA
            ...

        @tab_cur.setter
        def tab_cur(self, value: "uint16_t"):
            ...

        @property
        def tab_pos(self) -> "dir_t":  # NOQA
            ...

        @tab_pos.setter
        def tab_pos(self, value: "dir_t"):
            ...


class tileview_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        tile_act: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if tile_act != _DefaultArg:
            kwargs['tile_act'] = tile_act
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def tile_act(self) -> "obj_t":  # NOQA
            ...

        @tile_act.setter
        def tile_act(self, value: "obj_t"):
            ...


class tileview_tile_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        dir: Optional["dir_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if dir != _DefaultArg:
            kwargs['dir'] = dir
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def dir(self) -> "dir_t":  # NOQA
            ...

        @dir.setter
        def dir(self, value: "dir_t"):
            ...


class win_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...


class msg_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        id: Optional["msg_id_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        _priv_data: Optional[Any] = _DefaultArg, 
        payload: Optional[Any] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if id != _DefaultArg:
            kwargs['id'] = id
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if _priv_data != _DefaultArg:
            kwargs['_priv_data'] = _priv_data
        if payload != _DefaultArg:
            kwargs['payload'] = payload
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def id(self) -> "msg_id_t":  # NOQA
            ...

        @id.setter
        def id(self, value: "msg_id_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def _priv_data(self) -> Any:  # NOQA
            ...

        @_priv_data.setter
        def _priv_data(self, value: Any):
            ...

        @property
        def payload(self) -> Any:  # NOQA
            ...

        @payload.setter
        def payload(self, value: Any):
            ...


class pinyin_dict_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        py: Optional["char_t"] = _DefaultArg, 
        py_mb: Optional["char_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if py != _DefaultArg:
            kwargs['py'] = py
        if py_mb != _DefaultArg:
            kwargs['py_mb'] = py_mb
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def py(self) -> "char_t":  # NOQA
            ...

        @py.setter
        def py(self, value: "char_t"):
            ...

        @property
        def py_mb(self) -> "char_t":  # NOQA
            ...

        @py_mb.setter
        def py_mb(self, value: "char_t"):
            ...


class ime_pinyin_k9_py_str_t(_Structure): 
    _special_types_ = {
        'py_str': list
    }
    
    def __init__(
        self, 
        py_str: Optional[List[char_t]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if py_str != _DefaultArg:
            kwargs['py_str'] = py_str
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def py_str(self) -> List[char_t]:  # NOQA
            ...

        @py_str.setter
        def py_str(self, value: List[char_t]):
            ...


class ime_pinyin_t(_Structure): 
    _special_types_ = {
        'input_char': list,
        'k9_input_str': list,
        'py_num': list,
        'py_pos': list
    }
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        kb: Optional["obj_t"] = _DefaultArg, 
        cand_panel: Optional["obj_t"] = _DefaultArg, 
        dict: Optional["pinyin_dict_t"] = _DefaultArg, 
        k9_legal_py_ll: Optional["ll_t"] = _DefaultArg, 
        cand_str: Optional["char_t"] = _DefaultArg, 
        input_char: Optional[List[char_t]] = _DefaultArg, 
        k9_input_str: Optional[List[char_t]] = _DefaultArg, 
        k9_py_ll_pos: Optional["uint16_t"] = _DefaultArg, 
        k9_legal_py_count: Optional["uint16_t"] = _DefaultArg, 
        k9_input_str_len: Optional["uint16_t"] = _DefaultArg, 
        ta_count: Optional["uint16_t"] = _DefaultArg, 
        cand_num: Optional["uint16_t"] = _DefaultArg, 
        py_page: Optional["uint16_t"] = _DefaultArg, 
        py_num: Optional[List[uint16_t]] = _DefaultArg, 
        py_pos: Optional[List[uint16_t]] = _DefaultArg, 
        mode: Optional["ime_pinyin_mode_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if kb != _DefaultArg:
            kwargs['kb'] = kb
        if cand_panel != _DefaultArg:
            kwargs['cand_panel'] = cand_panel
        if dict != _DefaultArg:
            kwargs['dict'] = dict
        if k9_legal_py_ll != _DefaultArg:
            kwargs['k9_legal_py_ll'] = k9_legal_py_ll
        if cand_str != _DefaultArg:
            kwargs['cand_str'] = cand_str
        if input_char != _DefaultArg:
            kwargs['input_char'] = input_char
        if k9_input_str != _DefaultArg:
            kwargs['k9_input_str'] = k9_input_str
        if k9_py_ll_pos != _DefaultArg:
            kwargs['k9_py_ll_pos'] = k9_py_ll_pos
        if k9_legal_py_count != _DefaultArg:
            kwargs['k9_legal_py_count'] = k9_legal_py_count
        if k9_input_str_len != _DefaultArg:
            kwargs['k9_input_str_len'] = k9_input_str_len
        if ta_count != _DefaultArg:
            kwargs['ta_count'] = ta_count
        if cand_num != _DefaultArg:
            kwargs['cand_num'] = cand_num
        if py_page != _DefaultArg:
            kwargs['py_page'] = py_page
        if py_num != _DefaultArg:
            kwargs['py_num'] = py_num
        if py_pos != _DefaultArg:
            kwargs['py_pos'] = py_pos
        if mode != _DefaultArg:
            kwargs['mode'] = mode
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def kb(self) -> "obj_t":  # NOQA
            ...

        @kb.setter
        def kb(self, value: "obj_t"):
            ...

        @property
        def cand_panel(self) -> "obj_t":  # NOQA
            ...

        @cand_panel.setter
        def cand_panel(self, value: "obj_t"):
            ...

        @property
        def dict(self) -> "pinyin_dict_t":  # NOQA
            ...

        @dict.setter
        def dict(self, value: "pinyin_dict_t"):
            ...

        @property
        def k9_legal_py_ll(self) -> "ll_t":  # NOQA
            ...

        @k9_legal_py_ll.setter
        def k9_legal_py_ll(self, value: "ll_t"):
            ...

        @property
        def cand_str(self) -> "char_t":  # NOQA
            ...

        @cand_str.setter
        def cand_str(self, value: "char_t"):
            ...

        @property
        def input_char(self) -> List[char_t]:  # NOQA
            ...

        @input_char.setter
        def input_char(self, value: List[char_t]):
            ...

        @property
        def k9_input_str(self) -> List[char_t]:  # NOQA
            ...

        @k9_input_str.setter
        def k9_input_str(self, value: List[char_t]):
            ...

        @property
        def k9_py_ll_pos(self) -> "uint16_t":  # NOQA
            ...

        @k9_py_ll_pos.setter
        def k9_py_ll_pos(self, value: "uint16_t"):
            ...

        @property
        def k9_legal_py_count(self) -> "uint16_t":  # NOQA
            ...

        @k9_legal_py_count.setter
        def k9_legal_py_count(self, value: "uint16_t"):
            ...

        @property
        def k9_input_str_len(self) -> "uint16_t":  # NOQA
            ...

        @k9_input_str_len.setter
        def k9_input_str_len(self, value: "uint16_t"):
            ...

        @property
        def ta_count(self) -> "uint16_t":  # NOQA
            ...

        @ta_count.setter
        def ta_count(self, value: "uint16_t"):
            ...

        @property
        def cand_num(self) -> "uint16_t":  # NOQA
            ...

        @cand_num.setter
        def cand_num(self, value: "uint16_t"):
            ...

        @property
        def py_page(self) -> "uint16_t":  # NOQA
            ...

        @py_page.setter
        def py_page(self, value: "uint16_t"):
            ...

        @property
        def py_num(self) -> List[uint16_t]:  # NOQA
            ...

        @py_num.setter
        def py_num(self, value: List[uint16_t]):
            ...

        @property
        def py_pos(self) -> List[uint16_t]:  # NOQA
            ...

        @py_pos.setter
        def py_pos(self, value: List[uint16_t]):
            ...

        @property
        def mode(self) -> "ime_pinyin_mode_t":  # NOQA
            ...

        @mode.setter
        def mode(self, value: "ime_pinyin_mode_t"):
            ...


class file_explorer_t(_Structure): 
    _special_types_ = {
        'current_path': list
    }
    
    def __init__(
        self, 
        obj: Optional["obj_t"] = _DefaultArg, 
        cont: Optional["obj_t"] = _DefaultArg, 
        head_area: Optional["obj_t"] = _DefaultArg, 
        browser_area: Optional["obj_t"] = _DefaultArg, 
        file_table: Optional["obj_t"] = _DefaultArg, 
        path_label: Optional["obj_t"] = _DefaultArg, 
        quick_access_area: Optional["obj_t"] = _DefaultArg, 
        list_device: Optional["obj_t"] = _DefaultArg, 
        list_places: Optional["obj_t"] = _DefaultArg, 
        home_dir: Optional["char_t"] = _DefaultArg, 
        music_dir: Optional["char_t"] = _DefaultArg, 
        pictures_dir: Optional["char_t"] = _DefaultArg, 
        video_dir: Optional["char_t"] = _DefaultArg, 
        docs_dir: Optional["char_t"] = _DefaultArg, 
        fs_dir: Optional["char_t"] = _DefaultArg, 
        sel_fn: Optional["char_t"] = _DefaultArg, 
        current_path: Optional[List[char_t]] = _DefaultArg, 
        sort: Optional["file_explorer_sort_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if obj != _DefaultArg:
            kwargs['obj'] = obj
        if cont != _DefaultArg:
            kwargs['cont'] = cont
        if head_area != _DefaultArg:
            kwargs['head_area'] = head_area
        if browser_area != _DefaultArg:
            kwargs['browser_area'] = browser_area
        if file_table != _DefaultArg:
            kwargs['file_table'] = file_table
        if path_label != _DefaultArg:
            kwargs['path_label'] = path_label
        if quick_access_area != _DefaultArg:
            kwargs['quick_access_area'] = quick_access_area
        if list_device != _DefaultArg:
            kwargs['list_device'] = list_device
        if list_places != _DefaultArg:
            kwargs['list_places'] = list_places
        if home_dir != _DefaultArg:
            kwargs['home_dir'] = home_dir
        if music_dir != _DefaultArg:
            kwargs['music_dir'] = music_dir
        if pictures_dir != _DefaultArg:
            kwargs['pictures_dir'] = pictures_dir
        if video_dir != _DefaultArg:
            kwargs['video_dir'] = video_dir
        if docs_dir != _DefaultArg:
            kwargs['docs_dir'] = docs_dir
        if fs_dir != _DefaultArg:
            kwargs['fs_dir'] = fs_dir
        if sel_fn != _DefaultArg:
            kwargs['sel_fn'] = sel_fn
        if current_path != _DefaultArg:
            kwargs['current_path'] = current_path
        if sort != _DefaultArg:
            kwargs['sort'] = sort
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def obj(self) -> "obj_t":  # NOQA
            ...

        @obj.setter
        def obj(self, value: "obj_t"):
            ...

        @property
        def cont(self) -> "obj_t":  # NOQA
            ...

        @cont.setter
        def cont(self, value: "obj_t"):
            ...

        @property
        def head_area(self) -> "obj_t":  # NOQA
            ...

        @head_area.setter
        def head_area(self, value: "obj_t"):
            ...

        @property
        def browser_area(self) -> "obj_t":  # NOQA
            ...

        @browser_area.setter
        def browser_area(self, value: "obj_t"):
            ...

        @property
        def file_table(self) -> "obj_t":  # NOQA
            ...

        @file_table.setter
        def file_table(self, value: "obj_t"):
            ...

        @property
        def path_label(self) -> "obj_t":  # NOQA
            ...

        @path_label.setter
        def path_label(self, value: "obj_t"):
            ...

        @property
        def quick_access_area(self) -> "obj_t":  # NOQA
            ...

        @quick_access_area.setter
        def quick_access_area(self, value: "obj_t"):
            ...

        @property
        def list_device(self) -> "obj_t":  # NOQA
            ...

        @list_device.setter
        def list_device(self, value: "obj_t"):
            ...

        @property
        def list_places(self) -> "obj_t":  # NOQA
            ...

        @list_places.setter
        def list_places(self, value: "obj_t"):
            ...

        @property
        def home_dir(self) -> "char_t":  # NOQA
            ...

        @home_dir.setter
        def home_dir(self, value: "char_t"):
            ...

        @property
        def music_dir(self) -> "char_t":  # NOQA
            ...

        @music_dir.setter
        def music_dir(self, value: "char_t"):
            ...

        @property
        def pictures_dir(self) -> "char_t":  # NOQA
            ...

        @pictures_dir.setter
        def pictures_dir(self, value: "char_t"):
            ...

        @property
        def video_dir(self) -> "char_t":  # NOQA
            ...

        @video_dir.setter
        def video_dir(self, value: "char_t"):
            ...

        @property
        def docs_dir(self) -> "char_t":  # NOQA
            ...

        @docs_dir.setter
        def docs_dir(self, value: "char_t"):
            ...

        @property
        def fs_dir(self) -> "char_t":  # NOQA
            ...

        @fs_dir.setter
        def fs_dir(self, value: "char_t"):
            ...

        @property
        def sel_fn(self) -> "char_t":  # NOQA
            ...

        @sel_fn.setter
        def sel_fn(self, value: "char_t"):
            ...

        @property
        def current_path(self) -> List[char_t]:  # NOQA
            ...

        @current_path.setter
        def current_path(self, value: List[char_t]):
            ...

        @property
        def sort(self) -> "file_explorer_sort_t":  # NOQA
            ...

        @sort.setter
        def sort(self, value: "file_explorer_sort_t"):
            ...


class barcode_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        canvas: Optional["canvas_t"] = _DefaultArg, 
        dark_color: Optional["color_t"] = _DefaultArg, 
        light_color: Optional["color_t"] = _DefaultArg, 
        scale: Optional["uint16_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if canvas != _DefaultArg:
            kwargs['canvas'] = canvas
        if dark_color != _DefaultArg:
            kwargs['dark_color'] = dark_color
        if light_color != _DefaultArg:
            kwargs['light_color'] = light_color
        if scale != _DefaultArg:
            kwargs['scale'] = scale
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def canvas(self) -> "canvas_t":  # NOQA
            ...

        @canvas.setter
        def canvas(self, value: "canvas_t"):
            ...

        @property
        def dark_color(self) -> "color_t":  # NOQA
            ...

        @dark_color.setter
        def dark_color(self, value: "color_t"):
            ...

        @property
        def light_color(self) -> "color_t":  # NOQA
            ...

        @light_color.setter
        def light_color(self, value: "color_t"):
            ...

        @property
        def scale(self) -> "uint16_t":  # NOQA
            ...

        @scale.setter
        def scale(self, value: "uint16_t"):
            ...


class _gd_Palette(_Structure): 
    _special_types_ = {
        'colors': list
    }
    
    def __init__(
        self, 
        size: Optional["int_t"] = _DefaultArg, 
        colors: Optional[List[uint8_t]] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if size != _DefaultArg:
            kwargs['size'] = size
        if colors != _DefaultArg:
            kwargs['colors'] = colors
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def size(self) -> "int_t":  # NOQA
            ...

        @size.setter
        def size(self, value: "int_t"):
            ...

        @property
        def colors(self) -> List[uint8_t]:  # NOQA
            ...

        @colors.setter
        def colors(self, value: List[uint8_t]):
            ...


class _gd_GCE(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        delay: Optional["uint16_t"] = _DefaultArg, 
        tindex: Optional["uint8_t"] = _DefaultArg, 
        disposal: Optional["uint8_t"] = _DefaultArg, 
        input: Optional["int_t"] = _DefaultArg, 
        transparency: Optional["int_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if delay != _DefaultArg:
            kwargs['delay'] = delay
        if tindex != _DefaultArg:
            kwargs['tindex'] = tindex
        if disposal != _DefaultArg:
            kwargs['disposal'] = disposal
        if input != _DefaultArg:
            kwargs['input'] = input
        if transparency != _DefaultArg:
            kwargs['transparency'] = transparency
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def delay(self) -> "uint16_t":  # NOQA
            ...

        @delay.setter
        def delay(self, value: "uint16_t"):
            ...

        @property
        def tindex(self) -> "uint8_t":  # NOQA
            ...

        @tindex.setter
        def tindex(self, value: "uint8_t"):
            ...

        @property
        def disposal(self) -> "uint8_t":  # NOQA
            ...

        @disposal.setter
        def disposal(self, value: "uint8_t"):
            ...

        @property
        def input(self) -> "int_t":  # NOQA
            ...

        @input.setter
        def input(self, value: "int_t"):
            ...

        @property
        def transparency(self) -> "int_t":  # NOQA
            ...

        @transparency.setter
        def transparency(self, value: "int_t"):
            ...


class _gd_GIF(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        fd: Optional["fs_file_t"] = _DefaultArg, 
        data: Optional["char_t"] = _DefaultArg, 
        is_file: Optional["uint8_t"] = _DefaultArg, 
        f_rw_p: Optional["uint32_t"] = _DefaultArg, 
        anim_start: Optional["int32_t"] = _DefaultArg, 
        width: Optional["uint16_t"] = _DefaultArg, 
        height: Optional["uint16_t"] = _DefaultArg, 
        depth: Optional["uint16_t"] = _DefaultArg, 
        loop_count: Optional["int32_t"] = _DefaultArg, 
        gce: Optional["gd_GCE"] = _DefaultArg, 
        palette: Optional["gd_Palette"] = _DefaultArg, 
        lct: Optional["gd_Palette"] = _DefaultArg, 
        gct: Optional["gd_Palette"] = _DefaultArg, 
        plain_text: Optional[Callable[["_gd_GIF", "uint16_t", "uint16_t", "uint16_t", "uint16_t", "uint8_t", "uint8_t", "uint8_t", "uint8_t"], "void_t"]] = _DefaultArg, 
        comment: Optional[Callable[["_gd_GIF"], "void_t"]] = _DefaultArg, 
        application: Optional[Callable[["_gd_GIF", "char_t", "char_t"], "void_t"]] = _DefaultArg, 
        fx: Optional["uint16_t"] = _DefaultArg, 
        fy: Optional["uint16_t"] = _DefaultArg, 
        fw: Optional["uint16_t"] = _DefaultArg, 
        fh: Optional["uint16_t"] = _DefaultArg, 
        bgindex: Optional["uint8_t"] = _DefaultArg, 
        canvas: Optional["uint8_t"] = _DefaultArg, 
        frame: Optional["uint8_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if fd != _DefaultArg:
            kwargs['fd'] = fd
        if data != _DefaultArg:
            kwargs['data'] = data
        if is_file != _DefaultArg:
            kwargs['is_file'] = is_file
        if f_rw_p != _DefaultArg:
            kwargs['f_rw_p'] = f_rw_p
        if anim_start != _DefaultArg:
            kwargs['anim_start'] = anim_start
        if width != _DefaultArg:
            kwargs['width'] = width
        if height != _DefaultArg:
            kwargs['height'] = height
        if depth != _DefaultArg:
            kwargs['depth'] = depth
        if loop_count != _DefaultArg:
            kwargs['loop_count'] = loop_count
        if gce != _DefaultArg:
            kwargs['gce'] = gce
        if palette != _DefaultArg:
            kwargs['palette'] = palette
        if lct != _DefaultArg:
            kwargs['lct'] = lct
        if gct != _DefaultArg:
            kwargs['gct'] = gct
        if plain_text != _DefaultArg:
            kwargs['plain_text'] = plain_text
        if comment != _DefaultArg:
            kwargs['comment'] = comment
        if application != _DefaultArg:
            kwargs['application'] = application
        if fx != _DefaultArg:
            kwargs['fx'] = fx
        if fy != _DefaultArg:
            kwargs['fy'] = fy
        if fw != _DefaultArg:
            kwargs['fw'] = fw
        if fh != _DefaultArg:
            kwargs['fh'] = fh
        if bgindex != _DefaultArg:
            kwargs['bgindex'] = bgindex
        if canvas != _DefaultArg:
            kwargs['canvas'] = canvas
        if frame != _DefaultArg:
            kwargs['frame'] = frame
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def fd(self) -> "fs_file_t":  # NOQA
            ...

        @fd.setter
        def fd(self, value: "fs_file_t"):
            ...

        @property
        def data(self) -> "char_t":  # NOQA
            ...

        @data.setter
        def data(self, value: "char_t"):
            ...

        @property
        def is_file(self) -> "uint8_t":  # NOQA
            ...

        @is_file.setter
        def is_file(self, value: "uint8_t"):
            ...

        @property
        def f_rw_p(self) -> "uint32_t":  # NOQA
            ...

        @f_rw_p.setter
        def f_rw_p(self, value: "uint32_t"):
            ...

        @property
        def anim_start(self) -> "int32_t":  # NOQA
            ...

        @anim_start.setter
        def anim_start(self, value: "int32_t"):
            ...

        @property
        def width(self) -> "uint16_t":  # NOQA
            ...

        @width.setter
        def width(self, value: "uint16_t"):
            ...

        @property
        def height(self) -> "uint16_t":  # NOQA
            ...

        @height.setter
        def height(self, value: "uint16_t"):
            ...

        @property
        def depth(self) -> "uint16_t":  # NOQA
            ...

        @depth.setter
        def depth(self, value: "uint16_t"):
            ...

        @property
        def loop_count(self) -> "int32_t":  # NOQA
            ...

        @loop_count.setter
        def loop_count(self, value: "int32_t"):
            ...

        @property
        def gce(self) -> "gd_GCE":  # NOQA
            ...

        @gce.setter
        def gce(self, value: "gd_GCE"):
            ...

        @property
        def palette(self) -> "gd_Palette":  # NOQA
            ...

        @palette.setter
        def palette(self, value: "gd_Palette"):
            ...

        @property
        def lct(self) -> "gd_Palette":  # NOQA
            ...

        @lct.setter
        def lct(self, value: "gd_Palette"):
            ...

        @property
        def gct(self) -> "gd_Palette":  # NOQA
            ...

        @gct.setter
        def gct(self, value: "gd_Palette"):
            ...

        @property
        def plain_text(self) -> Callable[["_gd_GIF", "uint16_t", "uint16_t", "uint16_t", "uint16_t", "uint8_t", "uint8_t", "uint8_t", "uint8_t"], "void_t"]:  # NOQA
            ...

        @plain_text.setter
        def plain_text(self, value: Callable[["_gd_GIF", "uint16_t", "uint16_t", "uint16_t", "uint16_t", "uint8_t", "uint8_t", "uint8_t", "uint8_t"], "void_t"]):
            ...

        @property
        def comment(self) -> Callable[["_gd_GIF"], "void_t"]:  # NOQA
            ...

        @comment.setter
        def comment(self, value: Callable[["_gd_GIF"], "void_t"]):
            ...

        @property
        def application(self) -> Callable[["_gd_GIF", "char_t", "char_t"], "void_t"]:  # NOQA
            ...

        @application.setter
        def application(self, value: Callable[["_gd_GIF", "char_t", "char_t"], "void_t"]):
            ...

        @property
        def fx(self) -> "uint16_t":  # NOQA
            ...

        @fx.setter
        def fx(self, value: "uint16_t"):
            ...

        @property
        def fy(self) -> "uint16_t":  # NOQA
            ...

        @fy.setter
        def fy(self, value: "uint16_t"):
            ...

        @property
        def fw(self) -> "uint16_t":  # NOQA
            ...

        @fw.setter
        def fw(self, value: "uint16_t"):
            ...

        @property
        def fh(self) -> "uint16_t":  # NOQA
            ...

        @fh.setter
        def fh(self, value: "uint16_t"):
            ...

        @property
        def bgindex(self) -> "uint8_t":  # NOQA
            ...

        @bgindex.setter
        def bgindex(self, value: "uint8_t"):
            ...

        @property
        def canvas(self) -> "uint8_t":  # NOQA
            ...

        @canvas.setter
        def canvas(self, value: "uint8_t"):
            ...

        @property
        def frame(self) -> "uint8_t":  # NOQA
            ...

        @frame.setter
        def frame(self, value: "uint8_t"):
            ...


class gif_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        img: Optional["img_t"] = _DefaultArg, 
        gif: Optional["gd_GIF"] = _DefaultArg, 
        timer: Optional["timer_t"] = _DefaultArg, 
        imgdsc: Optional["img_dsc_t"] = _DefaultArg, 
        last_call: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if img != _DefaultArg:
            kwargs['img'] = img
        if gif != _DefaultArg:
            kwargs['gif'] = gif
        if timer != _DefaultArg:
            kwargs['timer'] = timer
        if imgdsc != _DefaultArg:
            kwargs['imgdsc'] = imgdsc
        if last_call != _DefaultArg:
            kwargs['last_call'] = last_call
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def img(self) -> "img_t":  # NOQA
            ...

        @img.setter
        def img(self, value: "img_t"):
            ...

        @property
        def gif(self) -> "gd_GIF":  # NOQA
            ...

        @gif.setter
        def gif(self, value: "gd_GIF"):
            ...

        @property
        def timer(self) -> "timer_t":  # NOQA
            ...

        @timer.setter
        def timer(self, value: "timer_t"):
            ...

        @property
        def imgdsc(self) -> "img_dsc_t":  # NOQA
            ...

        @imgdsc.setter
        def imgdsc(self, value: "img_dsc_t"):
            ...

        @property
        def last_call(self) -> "uint32_t":  # NOQA
            ...

        @last_call.setter
        def last_call(self, value: "uint32_t"):
            ...


class qrcode_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        canvas: Optional["canvas_t"] = _DefaultArg, 
        dark_color: Optional["color_t"] = _DefaultArg, 
        light_color: Optional["color_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if canvas != _DefaultArg:
            kwargs['canvas'] = canvas
        if dark_color != _DefaultArg:
            kwargs['dark_color'] = dark_color
        if light_color != _DefaultArg:
            kwargs['light_color'] = light_color
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def canvas(self) -> "canvas_t":  # NOQA
            ...

        @canvas.setter
        def canvas(self, value: "canvas_t"):
            ...

        @property
        def dark_color(self) -> "color_t":  # NOQA
            ...

        @dark_color.setter
        def dark_color(self, value: "color_t"):
            ...

        @property
        def light_color(self) -> "color_t":  # NOQA
            ...

        @light_color.setter
        def light_color(self, value: "color_t"):
            ...


class _theme_t(_Structure): 
    _special_types_ = {}
    
    def __init__(
        self, 
        apply_cb: Optional["theme_apply_cb_t"] = _DefaultArg, 
        parent: Optional["_theme_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        disp: Optional["_disp_t"] = _DefaultArg, 
        color_primary: Optional["color_t"] = _DefaultArg, 
        color_secondary: Optional["color_t"] = _DefaultArg, 
        font_small: Optional["font_t"] = _DefaultArg, 
        font_normal: Optional["font_t"] = _DefaultArg, 
        font_large: Optional["font_t"] = _DefaultArg, 
        flags: Optional["uint32_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if apply_cb != _DefaultArg:
            kwargs['apply_cb'] = apply_cb
        if parent != _DefaultArg:
            kwargs['parent'] = parent
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if disp != _DefaultArg:
            kwargs['disp'] = disp
        if color_primary != _DefaultArg:
            kwargs['color_primary'] = color_primary
        if color_secondary != _DefaultArg:
            kwargs['color_secondary'] = color_secondary
        if font_small != _DefaultArg:
            kwargs['font_small'] = font_small
        if font_normal != _DefaultArg:
            kwargs['font_normal'] = font_normal
        if font_large != _DefaultArg:
            kwargs['font_large'] = font_large
        if flags != _DefaultArg:
            kwargs['flags'] = flags
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def apply_cb(self) -> "theme_apply_cb_t":  # NOQA
            ...

        @apply_cb.setter
        def apply_cb(self, value: "theme_apply_cb_t"):
            ...

        @property
        def parent(self) -> "_theme_t":  # NOQA
            ...

        @parent.setter
        def parent(self, value: "_theme_t"):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def disp(self) -> "_disp_t":  # NOQA
            ...

        @disp.setter
        def disp(self, value: "_disp_t"):
            ...

        @property
        def color_primary(self) -> "color_t":  # NOQA
            ...

        @color_primary.setter
        def color_primary(self, value: "color_t"):
            ...

        @property
        def color_secondary(self) -> "color_t":  # NOQA
            ...

        @color_secondary.setter
        def color_secondary(self, value: "color_t"):
            ...

        @property
        def font_small(self) -> "font_t":  # NOQA
            ...

        @font_small.setter
        def font_small(self, value: "font_t"):
            ...

        @property
        def font_normal(self) -> "font_t":  # NOQA
            ...

        @font_normal.setter
        def font_normal(self, value: "font_t"):
            ...

        @property
        def font_large(self) -> "font_t":  # NOQA
            ...

        @font_large.setter
        def font_large(self, value: "font_t"):
            ...

        @property
        def flags(self) -> "uint32_t":  # NOQA
            ...

        @flags.setter
        def flags(self, value: "uint32_t"):
            ...


class _disp_t(_Structure): 
    _special_types_ = {
        'inv_areas': list,
        'inv_area_joined': list
    }
    
    def __init__(
        self, 
        hor_res: Optional["coord_t"] = _DefaultArg, 
        ver_res: Optional["coord_t"] = _DefaultArg, 
        physical_hor_res: Optional["coord_t"] = _DefaultArg, 
        physical_ver_res: Optional["coord_t"] = _DefaultArg, 
        offset_x: Optional["coord_t"] = _DefaultArg, 
        offset_y: Optional["coord_t"] = _DefaultArg, 
        dpi: Optional["uint32_t"] = _DefaultArg, 
        draw_buf_1: Optional[Any] = _DefaultArg, 
        draw_buf_2: Optional[Any] = _DefaultArg, 
        draw_buf_act: Optional[Any] = _DefaultArg, 
        draw_buf_size: Optional["uint32_t"] = _DefaultArg, 
        flush_cb: Optional["disp_flush_cb_t"] = _DefaultArg, 
        flushing: Optional["int_t"] = _DefaultArg, 
        flushing_last: Optional["int_t"] = _DefaultArg, 
        last_area: Optional["uint32_t"] = _DefaultArg, 
        last_part: Optional["uint32_t"] = _DefaultArg, 
        render_mode: Optional["disp_render_mode_t"] = _DefaultArg, 
        antialiasing: Optional["uint32_t"] = _DefaultArg, 
        rendering_in_progress: Optional["uint32_t"] = _DefaultArg, 
        color_format: Optional["color_format_t"] = _DefaultArg, 
        inv_areas: Optional[List["area_t"]] = _DefaultArg, 
        inv_area_joined: Optional[List[uint8_t]] = _DefaultArg, 
        inv_p: Optional["uint16_t"] = _DefaultArg, 
        inv_en_cnt: Optional["int32_t"] = _DefaultArg, 
        layer_head: Optional["layer_t"] = _DefaultArg, 
        layer_init: Optional[Callable[["_disp_t"], "_layer_t"]] = _DefaultArg, 
        layer_deinit: Optional[Callable[["_disp_t", "_layer_t"], "void_t"]] = _DefaultArg, 
        screens: Optional["_obj_t"] = _DefaultArg, 
        act_scr: Optional["_obj_t"] = _DefaultArg, 
        prev_scr: Optional["_obj_t"] = _DefaultArg, 
        scr_to_load: Optional["_obj_t"] = _DefaultArg, 
        bottom_layer: Optional["_obj_t"] = _DefaultArg, 
        top_layer: Optional["_obj_t"] = _DefaultArg, 
        sys_layer: Optional["_obj_t"] = _DefaultArg, 
        screen_cnt: Optional["uint32_t"] = _DefaultArg, 
        draw_prev_over_act: Optional["uint8_t"] = _DefaultArg, 
        del_prev: Optional["uint8_t"] = _DefaultArg, 
        driver_data: Optional[Any] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        event_list: Optional["event_list_t"] = _DefaultArg, 
        sw_rotate: Optional["uint32_t"] = _DefaultArg, 
        rotation: Optional["uint32_t"] = _DefaultArg, 
        theme: Optional["_theme_t"] = _DefaultArg, 
        refr_timer: Optional["timer_t"] = _DefaultArg, 
        last_activity_time: Optional["uint32_t"] = _DefaultArg, 
        refreshed_area: Optional["area_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if hor_res != _DefaultArg:
            kwargs['hor_res'] = hor_res
        if ver_res != _DefaultArg:
            kwargs['ver_res'] = ver_res
        if physical_hor_res != _DefaultArg:
            kwargs['physical_hor_res'] = physical_hor_res
        if physical_ver_res != _DefaultArg:
            kwargs['physical_ver_res'] = physical_ver_res
        if offset_x != _DefaultArg:
            kwargs['offset_x'] = offset_x
        if offset_y != _DefaultArg:
            kwargs['offset_y'] = offset_y
        if dpi != _DefaultArg:
            kwargs['dpi'] = dpi
        if draw_buf_1 != _DefaultArg:
            kwargs['draw_buf_1'] = draw_buf_1
        if draw_buf_2 != _DefaultArg:
            kwargs['draw_buf_2'] = draw_buf_2
        if draw_buf_act != _DefaultArg:
            kwargs['draw_buf_act'] = draw_buf_act
        if draw_buf_size != _DefaultArg:
            kwargs['draw_buf_size'] = draw_buf_size
        if flush_cb != _DefaultArg:
            kwargs['flush_cb'] = flush_cb
        if flushing != _DefaultArg:
            kwargs['flushing'] = flushing
        if flushing_last != _DefaultArg:
            kwargs['flushing_last'] = flushing_last
        if last_area != _DefaultArg:
            kwargs['last_area'] = last_area
        if last_part != _DefaultArg:
            kwargs['last_part'] = last_part
        if render_mode != _DefaultArg:
            kwargs['render_mode'] = render_mode
        if antialiasing != _DefaultArg:
            kwargs['antialiasing'] = antialiasing
        if rendering_in_progress != _DefaultArg:
            kwargs['rendering_in_progress'] = rendering_in_progress
        if color_format != _DefaultArg:
            kwargs['color_format'] = color_format
        if inv_areas != _DefaultArg:
            kwargs['inv_areas'] = inv_areas
        if inv_area_joined != _DefaultArg:
            kwargs['inv_area_joined'] = inv_area_joined
        if inv_p != _DefaultArg:
            kwargs['inv_p'] = inv_p
        if inv_en_cnt != _DefaultArg:
            kwargs['inv_en_cnt'] = inv_en_cnt
        if layer_head != _DefaultArg:
            kwargs['layer_head'] = layer_head
        if layer_init != _DefaultArg:
            kwargs['layer_init'] = layer_init
        if layer_deinit != _DefaultArg:
            kwargs['layer_deinit'] = layer_deinit
        if screens != _DefaultArg:
            kwargs['screens'] = screens
        if act_scr != _DefaultArg:
            kwargs['act_scr'] = act_scr
        if prev_scr != _DefaultArg:
            kwargs['prev_scr'] = prev_scr
        if scr_to_load != _DefaultArg:
            kwargs['scr_to_load'] = scr_to_load
        if bottom_layer != _DefaultArg:
            kwargs['bottom_layer'] = bottom_layer
        if top_layer != _DefaultArg:
            kwargs['top_layer'] = top_layer
        if sys_layer != _DefaultArg:
            kwargs['sys_layer'] = sys_layer
        if screen_cnt != _DefaultArg:
            kwargs['screen_cnt'] = screen_cnt
        if draw_prev_over_act != _DefaultArg:
            kwargs['draw_prev_over_act'] = draw_prev_over_act
        if del_prev != _DefaultArg:
            kwargs['del_prev'] = del_prev
        if driver_data != _DefaultArg:
            kwargs['driver_data'] = driver_data
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if event_list != _DefaultArg:
            kwargs['event_list'] = event_list
        if sw_rotate != _DefaultArg:
            kwargs['sw_rotate'] = sw_rotate
        if rotation != _DefaultArg:
            kwargs['rotation'] = rotation
        if theme != _DefaultArg:
            kwargs['theme'] = theme
        if refr_timer != _DefaultArg:
            kwargs['refr_timer'] = refr_timer
        if last_activity_time != _DefaultArg:
            kwargs['last_activity_time'] = last_activity_time
        if refreshed_area != _DefaultArg:
            kwargs['refreshed_area'] = refreshed_area
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def hor_res(self) -> "coord_t":  # NOQA
            ...

        @hor_res.setter
        def hor_res(self, value: "coord_t"):
            ...

        @property
        def ver_res(self) -> "coord_t":  # NOQA
            ...

        @ver_res.setter
        def ver_res(self, value: "coord_t"):
            ...

        @property
        def physical_hor_res(self) -> "coord_t":  # NOQA
            ...

        @physical_hor_res.setter
        def physical_hor_res(self, value: "coord_t"):
            ...

        @property
        def physical_ver_res(self) -> "coord_t":  # NOQA
            ...

        @physical_ver_res.setter
        def physical_ver_res(self, value: "coord_t"):
            ...

        @property
        def offset_x(self) -> "coord_t":  # NOQA
            ...

        @offset_x.setter
        def offset_x(self, value: "coord_t"):
            ...

        @property
        def offset_y(self) -> "coord_t":  # NOQA
            ...

        @offset_y.setter
        def offset_y(self, value: "coord_t"):
            ...

        @property
        def dpi(self) -> "uint32_t":  # NOQA
            ...

        @dpi.setter
        def dpi(self, value: "uint32_t"):
            ...

        @property
        def draw_buf_1(self) -> Any:  # NOQA
            ...

        @draw_buf_1.setter
        def draw_buf_1(self, value: Any):
            ...

        @property
        def draw_buf_2(self) -> Any:  # NOQA
            ...

        @draw_buf_2.setter
        def draw_buf_2(self, value: Any):
            ...

        @property
        def draw_buf_act(self) -> Any:  # NOQA
            ...

        @draw_buf_act.setter
        def draw_buf_act(self, value: Any):
            ...

        @property
        def draw_buf_size(self) -> "uint32_t":  # NOQA
            ...

        @draw_buf_size.setter
        def draw_buf_size(self, value: "uint32_t"):
            ...

        @property
        def flush_cb(self) -> "disp_flush_cb_t":  # NOQA
            ...

        @flush_cb.setter
        def flush_cb(self, value: "disp_flush_cb_t"):
            ...

        @property
        def flushing(self) -> "int_t":  # NOQA
            ...

        @flushing.setter
        def flushing(self, value: "int_t"):
            ...

        @property
        def flushing_last(self) -> "int_t":  # NOQA
            ...

        @flushing_last.setter
        def flushing_last(self, value: "int_t"):
            ...

        @property
        def last_area(self) -> "uint32_t":  # NOQA
            ...

        @last_area.setter
        def last_area(self, value: "uint32_t"):
            ...

        @property
        def last_part(self) -> "uint32_t":  # NOQA
            ...

        @last_part.setter
        def last_part(self, value: "uint32_t"):
            ...

        @property
        def render_mode(self) -> "disp_render_mode_t":  # NOQA
            ...

        @render_mode.setter
        def render_mode(self, value: "disp_render_mode_t"):
            ...

        @property
        def antialiasing(self) -> "uint32_t":  # NOQA
            ...

        @antialiasing.setter
        def antialiasing(self, value: "uint32_t"):
            ...

        @property
        def rendering_in_progress(self) -> "uint32_t":  # NOQA
            ...

        @rendering_in_progress.setter
        def rendering_in_progress(self, value: "uint32_t"):
            ...

        @property
        def color_format(self) -> "color_format_t":  # NOQA
            ...

        @color_format.setter
        def color_format(self, value: "color_format_t"):
            ...

        @property
        def inv_areas(self) -> List["area_t"]:  # NOQA
            ...

        @inv_areas.setter
        def inv_areas(self, value: List["area_t"]):
            ...

        @property
        def inv_area_joined(self) -> List[uint8_t]:  # NOQA
            ...

        @inv_area_joined.setter
        def inv_area_joined(self, value: List[uint8_t]):
            ...

        @property
        def inv_p(self) -> "uint16_t":  # NOQA
            ...

        @inv_p.setter
        def inv_p(self, value: "uint16_t"):
            ...

        @property
        def inv_en_cnt(self) -> "int32_t":  # NOQA
            ...

        @inv_en_cnt.setter
        def inv_en_cnt(self, value: "int32_t"):
            ...

        @property
        def layer_head(self) -> "layer_t":  # NOQA
            ...

        @layer_head.setter
        def layer_head(self, value: "layer_t"):
            ...

        @property
        def layer_init(self) -> Callable[["_disp_t"], "_layer_t"]:  # NOQA
            ...

        @layer_init.setter
        def layer_init(self, value: Callable[["_disp_t"], "_layer_t"]):
            ...

        @property
        def layer_deinit(self) -> Callable[["_disp_t", "_layer_t"], "void_t"]:  # NOQA
            ...

        @layer_deinit.setter
        def layer_deinit(self, value: Callable[["_disp_t", "_layer_t"], "void_t"]):
            ...

        @property
        def screens(self) -> "_obj_t":  # NOQA
            ...

        @screens.setter
        def screens(self, value: "_obj_t"):
            ...

        @property
        def act_scr(self) -> "_obj_t":  # NOQA
            ...

        @act_scr.setter
        def act_scr(self, value: "_obj_t"):
            ...

        @property
        def prev_scr(self) -> "_obj_t":  # NOQA
            ...

        @prev_scr.setter
        def prev_scr(self, value: "_obj_t"):
            ...

        @property
        def scr_to_load(self) -> "_obj_t":  # NOQA
            ...

        @scr_to_load.setter
        def scr_to_load(self, value: "_obj_t"):
            ...

        @property
        def bottom_layer(self) -> "_obj_t":  # NOQA
            ...

        @bottom_layer.setter
        def bottom_layer(self, value: "_obj_t"):
            ...

        @property
        def top_layer(self) -> "_obj_t":  # NOQA
            ...

        @top_layer.setter
        def top_layer(self, value: "_obj_t"):
            ...

        @property
        def sys_layer(self) -> "_obj_t":  # NOQA
            ...

        @sys_layer.setter
        def sys_layer(self, value: "_obj_t"):
            ...

        @property
        def screen_cnt(self) -> "uint32_t":  # NOQA
            ...

        @screen_cnt.setter
        def screen_cnt(self, value: "uint32_t"):
            ...

        @property
        def draw_prev_over_act(self) -> "uint8_t":  # NOQA
            ...

        @draw_prev_over_act.setter
        def draw_prev_over_act(self, value: "uint8_t"):
            ...

        @property
        def del_prev(self) -> "uint8_t":  # NOQA
            ...

        @del_prev.setter
        def del_prev(self, value: "uint8_t"):
            ...

        @property
        def driver_data(self) -> Any:  # NOQA
            ...

        @driver_data.setter
        def driver_data(self, value: Any):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def event_list(self) -> "event_list_t":  # NOQA
            ...

        @event_list.setter
        def event_list(self, value: "event_list_t"):
            ...

        @property
        def sw_rotate(self) -> "uint32_t":  # NOQA
            ...

        @sw_rotate.setter
        def sw_rotate(self, value: "uint32_t"):
            ...

        @property
        def rotation(self) -> "uint32_t":  # NOQA
            ...

        @rotation.setter
        def rotation(self, value: "uint32_t"):
            ...

        @property
        def theme(self) -> "_theme_t":  # NOQA
            ...

        @theme.setter
        def theme(self, value: "_theme_t"):
            ...

        @property
        def refr_timer(self) -> "timer_t":  # NOQA
            ...

        @refr_timer.setter
        def refr_timer(self, value: "timer_t"):
            ...

        @property
        def last_activity_time(self) -> "uint32_t":  # NOQA
            ...

        @last_activity_time.setter
        def last_activity_time(self, value: "uint32_t"):
            ...

        @property
        def refreshed_area(self) -> "area_t":  # NOQA
            ...

        @refreshed_area.setter
        def refreshed_area(self, value: "area_t"):
            ...


class _indev_t(_Structure): 
    class _pointer(_Structure): 
        _special_types_ = {}
        
        def __init__(
            self, 
            act_point: Optional["point_t"] = _DefaultArg, 
            last_point: Optional["point_t"] = _DefaultArg, 
            last_raw_point: Optional["point_t"] = _DefaultArg, 
            vect: Optional["point_t"] = _DefaultArg, 
            scroll_sum: Optional["point_t"] = _DefaultArg, 
            scroll_throw_vect: Optional["point_t"] = _DefaultArg, 
            scroll_throw_vect_ori: Optional["point_t"] = _DefaultArg, 
            act_obj: Optional["_obj_t"] = _DefaultArg, 
            last_obj: Optional["_obj_t"] = _DefaultArg, 
            scroll_obj: Optional["_obj_t"] = _DefaultArg, 
            last_pressed: Optional["_obj_t"] = _DefaultArg, 
            scroll_area: Optional["area_t"] = _DefaultArg, 
            gesture_sum: Optional["point_t"] = _DefaultArg, 
            scroll_dir: Optional["dir_t"] = _DefaultArg, 
            gesture_dir: Optional["dir_t"] = _DefaultArg, 
            gesture_sent: Optional["uint8_t"] = _DefaultArg
        ):
            _Structure.__init__(self)
            kwargs = {}
            if act_point != _DefaultArg:
                kwargs['act_point'] = act_point
            if last_point != _DefaultArg:
                kwargs['last_point'] = last_point
            if last_raw_point != _DefaultArg:
                kwargs['last_raw_point'] = last_raw_point
            if vect != _DefaultArg:
                kwargs['vect'] = vect
            if scroll_sum != _DefaultArg:
                kwargs['scroll_sum'] = scroll_sum
            if scroll_throw_vect != _DefaultArg:
                kwargs['scroll_throw_vect'] = scroll_throw_vect
            if scroll_throw_vect_ori != _DefaultArg:
                kwargs['scroll_throw_vect_ori'] = scroll_throw_vect_ori
            if act_obj != _DefaultArg:
                kwargs['act_obj'] = act_obj
            if last_obj != _DefaultArg:
                kwargs['last_obj'] = last_obj
            if scroll_obj != _DefaultArg:
                kwargs['scroll_obj'] = scroll_obj
            if last_pressed != _DefaultArg:
                kwargs['last_pressed'] = last_pressed
            if scroll_area != _DefaultArg:
                kwargs['scroll_area'] = scroll_area
            if gesture_sum != _DefaultArg:
                kwargs['gesture_sum'] = gesture_sum
            if scroll_dir != _DefaultArg:
                kwargs['scroll_dir'] = scroll_dir
            if gesture_dir != _DefaultArg:
                kwargs['gesture_dir'] = gesture_dir
            if gesture_sent != _DefaultArg:
                kwargs['gesture_sent'] = gesture_sent
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def act_point(self) -> "point_t":  # NOQA
                ...
    
            @act_point.setter
            def act_point(self, value: "point_t"):
                ...
    
            @property
            def last_point(self) -> "point_t":  # NOQA
                ...
    
            @last_point.setter
            def last_point(self, value: "point_t"):
                ...
    
            @property
            def last_raw_point(self) -> "point_t":  # NOQA
                ...
    
            @last_raw_point.setter
            def last_raw_point(self, value: "point_t"):
                ...
    
            @property
            def vect(self) -> "point_t":  # NOQA
                ...
    
            @vect.setter
            def vect(self, value: "point_t"):
                ...
    
            @property
            def scroll_sum(self) -> "point_t":  # NOQA
                ...
    
            @scroll_sum.setter
            def scroll_sum(self, value: "point_t"):
                ...
    
            @property
            def scroll_throw_vect(self) -> "point_t":  # NOQA
                ...
    
            @scroll_throw_vect.setter
            def scroll_throw_vect(self, value: "point_t"):
                ...
    
            @property
            def scroll_throw_vect_ori(self) -> "point_t":  # NOQA
                ...
    
            @scroll_throw_vect_ori.setter
            def scroll_throw_vect_ori(self, value: "point_t"):
                ...
    
            @property
            def act_obj(self) -> "_obj_t":  # NOQA
                ...
    
            @act_obj.setter
            def act_obj(self, value: "_obj_t"):
                ...
    
            @property
            def last_obj(self) -> "_obj_t":  # NOQA
                ...
    
            @last_obj.setter
            def last_obj(self, value: "_obj_t"):
                ...
    
            @property
            def scroll_obj(self) -> "_obj_t":  # NOQA
                ...
    
            @scroll_obj.setter
            def scroll_obj(self, value: "_obj_t"):
                ...
    
            @property
            def last_pressed(self) -> "_obj_t":  # NOQA
                ...
    
            @last_pressed.setter
            def last_pressed(self, value: "_obj_t"):
                ...
    
            @property
            def scroll_area(self) -> "area_t":  # NOQA
                ...
    
            @scroll_area.setter
            def scroll_area(self, value: "area_t"):
                ...
    
            @property
            def gesture_sum(self) -> "point_t":  # NOQA
                ...
    
            @gesture_sum.setter
            def gesture_sum(self, value: "point_t"):
                ...
    
            @property
            def scroll_dir(self) -> "dir_t":  # NOQA
                ...
    
            @scroll_dir.setter
            def scroll_dir(self, value: "dir_t"):
                ...
    
            @property
            def gesture_dir(self) -> "dir_t":  # NOQA
                ...
    
            @gesture_dir.setter
            def gesture_dir(self, value: "dir_t"):
                ...
    
            @property
            def gesture_sent(self) -> "uint8_t":  # NOQA
                ...
    
            @gesture_sent.setter
            def gesture_sent(self, value: "uint8_t"):
                ...

    setattr(_pointer, '__SIZE__', _ctypes.sizeof(_pointer))

    class _keypad(_Structure): 
        _special_types_ = {}
        
        def __init__(
            self, 
            last_state: Optional["indev_state_t"] = _DefaultArg, 
            last_key: Optional["uint32_t"] = _DefaultArg
        ):
            _Structure.__init__(self)
            kwargs = {}
            if last_state != _DefaultArg:
                kwargs['last_state'] = last_state
            if last_key != _DefaultArg:
                kwargs['last_key'] = last_key
            for key, value in kwargs.items():
                setattr(self, key, value)
            
        if TYPE_CHECKING:
    
            @property
            def last_state(self) -> "indev_state_t":  # NOQA
                ...
    
            @last_state.setter
            def last_state(self, value: "indev_state_t"):
                ...
    
            @property
            def last_key(self) -> "uint32_t":  # NOQA
                ...
    
            @last_key.setter
            def last_key(self, value: "uint32_t"):
                ...

    setattr(_keypad, '__SIZE__', _ctypes.sizeof(_keypad))

    _special_types_ = {}
    
    def __init__(
        self, 
        type: Optional["indev_type_t"] = _DefaultArg, 
        read_cb: Optional["indev_read_cb_t"] = _DefaultArg, 
        feedback_cb: Optional[Callable[["_indev_t", "uint8_t"], "void_t"]] = _DefaultArg, 
        state: Optional["indev_state_t"] = _DefaultArg, 
        long_pr_sent: Optional["uint8_t"] = _DefaultArg, 
        reset_query: Optional["uint8_t"] = _DefaultArg, 
        disabled: Optional["uint8_t"] = _DefaultArg, 
        wait_until_release: Optional["uint8_t"] = _DefaultArg, 
        pr_timestamp: Optional["uint32_t"] = _DefaultArg, 
        longpr_rep_timestamp: Optional["uint32_t"] = _DefaultArg, 
        driver_data: Optional[Any] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        disp: Optional["_disp_t"] = _DefaultArg, 
        read_timer: Optional["timer_t"] = _DefaultArg, 
        scroll_limit: Optional["uint8_t"] = _DefaultArg, 
        scroll_throw: Optional["uint8_t"] = _DefaultArg, 
        gesture_min_velocity: Optional["uint8_t"] = _DefaultArg, 
        gesture_limit: Optional["uint8_t"] = _DefaultArg, 
        long_press_time: Optional["uint16_t"] = _DefaultArg, 
        long_press_repeat_time: Optional["uint16_t"] = _DefaultArg, 
        pointer: Optional[_pointer] = _DefaultArg, 
        keypad: Optional[_keypad] = _DefaultArg, 
        cursor: Optional["_obj_t"] = _DefaultArg, 
        group: Optional["_group_t"] = _DefaultArg, 
        btn_points: Optional["point_t"] = _DefaultArg
    ):
        _Structure.__init__(self)
        kwargs = {}
        if type != _DefaultArg:
            kwargs['type'] = type
        if read_cb != _DefaultArg:
            kwargs['read_cb'] = read_cb
        if feedback_cb != _DefaultArg:
            kwargs['feedback_cb'] = feedback_cb
        if state != _DefaultArg:
            kwargs['state'] = state
        if long_pr_sent != _DefaultArg:
            kwargs['long_pr_sent'] = long_pr_sent
        if reset_query != _DefaultArg:
            kwargs['reset_query'] = reset_query
        if disabled != _DefaultArg:
            kwargs['disabled'] = disabled
        if wait_until_release != _DefaultArg:
            kwargs['wait_until_release'] = wait_until_release
        if pr_timestamp != _DefaultArg:
            kwargs['pr_timestamp'] = pr_timestamp
        if longpr_rep_timestamp != _DefaultArg:
            kwargs['longpr_rep_timestamp'] = longpr_rep_timestamp
        if driver_data != _DefaultArg:
            kwargs['driver_data'] = driver_data
        if user_data != _DefaultArg:
            kwargs['user_data'] = user_data
        if disp != _DefaultArg:
            kwargs['disp'] = disp
        if read_timer != _DefaultArg:
            kwargs['read_timer'] = read_timer
        if scroll_limit != _DefaultArg:
            kwargs['scroll_limit'] = scroll_limit
        if scroll_throw != _DefaultArg:
            kwargs['scroll_throw'] = scroll_throw
        if gesture_min_velocity != _DefaultArg:
            kwargs['gesture_min_velocity'] = gesture_min_velocity
        if gesture_limit != _DefaultArg:
            kwargs['gesture_limit'] = gesture_limit
        if long_press_time != _DefaultArg:
            kwargs['long_press_time'] = long_press_time
        if long_press_repeat_time != _DefaultArg:
            kwargs['long_press_repeat_time'] = long_press_repeat_time
        if pointer != _DefaultArg:
            kwargs['pointer'] = pointer
        if keypad != _DefaultArg:
            kwargs['keypad'] = keypad
        if cursor != _DefaultArg:
            kwargs['cursor'] = cursor
        if group != _DefaultArg:
            kwargs['group'] = group
        if btn_points != _DefaultArg:
            kwargs['btn_points'] = btn_points
        for key, value in kwargs.items():
            setattr(self, key, value)
        
    if TYPE_CHECKING:

        @property
        def type(self) -> "indev_type_t":  # NOQA
            ...

        @type.setter
        def type(self, value: "indev_type_t"):
            ...

        @property
        def read_cb(self) -> "indev_read_cb_t":  # NOQA
            ...

        @read_cb.setter
        def read_cb(self, value: "indev_read_cb_t"):
            ...

        @property
        def feedback_cb(self) -> Callable[["_indev_t", "uint8_t"], "void_t"]:  # NOQA
            ...

        @feedback_cb.setter
        def feedback_cb(self, value: Callable[["_indev_t", "uint8_t"], "void_t"]):
            ...

        @property
        def state(self) -> "indev_state_t":  # NOQA
            ...

        @state.setter
        def state(self, value: "indev_state_t"):
            ...

        @property
        def long_pr_sent(self) -> "uint8_t":  # NOQA
            ...

        @long_pr_sent.setter
        def long_pr_sent(self, value: "uint8_t"):
            ...

        @property
        def reset_query(self) -> "uint8_t":  # NOQA
            ...

        @reset_query.setter
        def reset_query(self, value: "uint8_t"):
            ...

        @property
        def disabled(self) -> "uint8_t":  # NOQA
            ...

        @disabled.setter
        def disabled(self, value: "uint8_t"):
            ...

        @property
        def wait_until_release(self) -> "uint8_t":  # NOQA
            ...

        @wait_until_release.setter
        def wait_until_release(self, value: "uint8_t"):
            ...

        @property
        def pr_timestamp(self) -> "uint32_t":  # NOQA
            ...

        @pr_timestamp.setter
        def pr_timestamp(self, value: "uint32_t"):
            ...

        @property
        def longpr_rep_timestamp(self) -> "uint32_t":  # NOQA
            ...

        @longpr_rep_timestamp.setter
        def longpr_rep_timestamp(self, value: "uint32_t"):
            ...

        @property
        def driver_data(self) -> Any:  # NOQA
            ...

        @driver_data.setter
        def driver_data(self, value: Any):
            ...

        @property
        def user_data(self) -> Any:  # NOQA
            ...

        @user_data.setter
        def user_data(self, value: Any):
            ...

        @property
        def disp(self) -> "_disp_t":  # NOQA
            ...

        @disp.setter
        def disp(self, value: "_disp_t"):
            ...

        @property
        def read_timer(self) -> "timer_t":  # NOQA
            ...

        @read_timer.setter
        def read_timer(self, value: "timer_t"):
            ...

        @property
        def scroll_limit(self) -> "uint8_t":  # NOQA
            ...

        @scroll_limit.setter
        def scroll_limit(self, value: "uint8_t"):
            ...

        @property
        def scroll_throw(self) -> "uint8_t":  # NOQA
            ...

        @scroll_throw.setter
        def scroll_throw(self, value: "uint8_t"):
            ...

        @property
        def gesture_min_velocity(self) -> "uint8_t":  # NOQA
            ...

        @gesture_min_velocity.setter
        def gesture_min_velocity(self, value: "uint8_t"):
            ...

        @property
        def gesture_limit(self) -> "uint8_t":  # NOQA
            ...

        @gesture_limit.setter
        def gesture_limit(self, value: "uint8_t"):
            ...

        @property
        def long_press_time(self) -> "uint16_t":  # NOQA
            ...

        @long_press_time.setter
        def long_press_time(self, value: "uint16_t"):
            ...

        @property
        def long_press_repeat_time(self) -> "uint16_t":  # NOQA
            ...

        @long_press_repeat_time.setter
        def long_press_repeat_time(self, value: "uint16_t"):
            ...

        @property
        def pointer(self) -> _pointer:  # NOQA
            ...

        @pointer.setter
        def pointer(self, value: _pointer):
            ...

        @property
        def keypad(self) -> _keypad:  # NOQA
            ...

        @keypad.setter
        def keypad(self, value: _keypad):
            ...

        @property
        def cursor(self) -> "_obj_t":  # NOQA
            ...

        @cursor.setter
        def cursor(self, value: "_obj_t"):
            ...

        @property
        def group(self) -> "_group_t":  # NOQA
            ...

        @group.setter
        def group(self, value: "_group_t"):
            ...

        @property
        def btn_points(self) -> "point_t":  # NOQA
            ...

        @btn_points.setter
        def btn_points(self, value: "point_t"):
            ...
  # NOQA
# ************************************************


# ******************  TYPEDEFS  ******************
None
timer_t = _timer_t
anim_bezier3_para_t = _anim_bezier3_para_t
anim_t = _anim_t
font_t = _font_t
color_filter_dsc_t = _color_filter_dsc_t
event_t = _event_t
fs_drv_t = _fs_drv_t
img_decoder_t = _img_decoder_t
img_decoder_dsc_t = _img_decoder_dsc_t
draw_task_t = _draw_task_t
draw_unit_t = _draw_unit_t
layer_t = _layer_t
grad_color_t = color_t
grad_t = _gradient_cache_t
draw_label_hint_t = _draw_label_hint_t
draw_img_dsc_t = _draw_img_dsc_t
disp_t = _disp_t
obj_class_t = _obj_class_t
group_t = _group_t
indev_t = _indev_t
obj_t = _obj_t
gd_Palette = _gd_Palette
gd_GCE = _gd_GCE
gd_GIF = _gd_GIF
theme_t = _theme_t  # NOQA
# ************************************************

log_print_g_cb_t = CFUNCTYPE(None, log_level_t, _ctypes.POINTER(char_t))
timer_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_timer_t))
async_cb_t = CFUNCTYPE(None, void_t)
anim_path_cb_t = CFUNCTYPE(int32_t, _ctypes.POINTER(_anim_t))
anim_exec_xcb_t = CFUNCTYPE(None, void_t, int32_t)
anim_custom_exec_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_anim_t), int32_t)
anim_ready_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_anim_t))
anim_start_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_anim_t))
anim_get_value_cb_t = CFUNCTYPE(int32_t, _ctypes.POINTER(_anim_t))
anim_deleted_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_anim_t))
color_filter_cb_t = CFUNCTYPE(
    color_t,
    _ctypes.POINTER(_color_filter_dsc_t),
    color_t,
    opa_t
)
event_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_event_t))
img_decoder_info_f_t = CFUNCTYPE(
    res_t,
    _ctypes.POINTER(_img_decoder_t),
    void_t,
    _ctypes.POINTER(img_header_t)
)
img_decoder_open_f_t = CFUNCTYPE(
    res_t,
    _ctypes.POINTER(_img_decoder_t),
    _ctypes.POINTER(_img_decoder_dsc_t)
)
img_decoder_read_line_f_t = CFUNCTYPE(
    res_t,
    _ctypes.POINTER(_img_decoder_t),
    _ctypes.POINTER(_img_decoder_dsc_t),
    coord_t,
    coord_t,
    coord_t,
    _ctypes.POINTER(uint8_t)
)
img_decoder_close_f_t = CFUNCTYPE(
    None,
    _ctypes.POINTER(_img_decoder_t),
    _ctypes.POINTER(_img_decoder_dsc_t)
)
draw_letter_cb_t = CFUNCTYPE(
    None,
    _ctypes.POINTER(_draw_unit_t),
    _ctypes.POINTER(draw_glyph_dsc_t),
    _ctypes.POINTER(draw_fill_dsc_t),
    _ctypes.POINTER(area_t)
)
disp_flush_cb_t = CFUNCTYPE(
    None,
    _ctypes.POINTER(_disp_t),
    _ctypes.POINTER(area_t),
    _ctypes.POINTER(uint8_t)
)
obj_tree_walk_cb_t = CFUNCTYPE(
    obj_tree_walk_res_t,
    _ctypes.POINTER(_obj_t),
    void_t
)
layout_update_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_obj_t), void_t)
obj_class_event_cb_t = CFUNCTYPE(
    None,
    _ctypes.POINTER(_obj_class_t),
    _ctypes.POINTER(_event_t)
)
group_focus_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_group_t))
group_edge_cb_t = CFUNCTYPE(None, _ctypes.POINTER(_group_t), bool_t)
indev_read_cb_t = CFUNCTYPE(
    None,
    _ctypes.POINTER(_indev_t),
    _ctypes.POINTER(indev_data_t)
)
btnmatrix_btn_draw_cb_t = CFUNCTYPE(
    bool_t,
    _ctypes.POINTER(_obj_t),
    uint32_t,
    _ctypes.POINTER(area_t),
    _ctypes.POINTER(area_t)
)
imgfont_get_path_cb_t = CFUNCTYPE(
    void_t,
    _ctypes.POINTER(_font_t),
    uint32_t,
    uint32_t,
    _ctypes.POINTER(coord_t),
    void_t
)
msg_subscribe_cb_t = CFUNCTYPE(None, _ctypes.POINTER(msg_t))
theme_apply_cb_t = CFUNCTYPE(
    None,
    _ctypes.POINTER(_theme_t),
    _ctypes.POINTER(_obj_t)
)  # NOQA

# ***************  STRUCT FIELDS  ****************
mem_monitor_t._fields_ = [
    ('total_size', uint32_t),
    ('free_cnt', uint32_t),
    ('free_size', uint32_t),
    ('free_biggest_size', uint32_t),
    ('used_cnt', uint32_t),
    ('max_used', uint32_t),
    ('used_pct', uint8_t),
    ('frag_pct', uint8_t)
]


_timer_t._fields_ = [
    ('period', uint32_t),
    ('last_run', uint32_t),
    ('timer_cb', timer_cb_t),
    ('user_data', void_t),
    ('repeat_count', int32_t),
    ('paused', uint32_t, 1)
]


sqrt_res_t._fields_ = [
    ('i', uint16_t),
    ('f', uint16_t)
]


_anim_bezier3_para_t._fields_ = [
    ('x1', int16_t),
    ('y1', int16_t),
    ('x2', int16_t),
    ('y2', int16_t)
]


_anim_path_para_t._fields_ = [
    ('bezier3', _anim_bezier3_para_t)
]


_anim_t._fields_ = [
    ('var', void_t),
    ('exec_cb', anim_exec_xcb_t),
    ('start_cb', anim_start_cb_t),
    ('ready_cb', anim_ready_cb_t),
    ('deleted_cb', anim_deleted_cb_t),
    ('get_value_cb', anim_get_value_cb_t),
    ('user_data', void_t),
    ('path_cb', anim_path_cb_t),
    ('start_value', int32_t),
    ('current_value', int32_t),
    ('end_value', int32_t),
    ('time', int32_t),
    ('act_time', int32_t),
    ('playback_delay', uint32_t),
    ('playback_time', uint32_t),
    ('repeat_delay', uint32_t),
    ('repeat_cnt', uint16_t),
    ('early_apply', uint8_t, 1),
    ('last_timer_run', uint32_t),
    ('playback_now', uint8_t, 1),
    ('run_round', uint8_t, 1),
    ('start_cb_called', uint8_t, 1)
]


anim_timeline_dsc_t._fields_ = [
    ('anim', _anim_t),
    ('start_time', uint32_t)
]


anim_timeline_t._fields_ = [
    ('anim_dsc', _ctypes.POINTER(anim_timeline_dsc_t)),
    ('anim_dsc_cnt', uint32_t),
    ('reverse', bool_t)
]


point_t._fields_ = [
    ('x', coord_t),
    ('y', coord_t)
]


area_t._fields_ = [
    ('x1', coord_t),
    ('y1', coord_t),
    ('x2', coord_t),
    ('y2', coord_t)
]


font_glyph_dsc_t._fields_ = [
    ('resolved_font', _ctypes.POINTER(_font_t)),
    ('adv_w', uint16_t),
    ('box_w', uint16_t),
    ('box_h', uint16_t),
    ('ofs_x', int16_t),
    ('ofs_y', int16_t),
    ('bpp', uint8_t, 4),
    ('is_placeholder', uint8_t, 1)
]


_font_t._fields_ = [
    ('get_glyph_dsc', CFUNCTYPE(bool_t, _ctypes.POINTER(_font_t), _ctypes.POINTER(font_glyph_dsc_t), uint32_t, uint32_t)),
    ('get_glyph_bitmap', CFUNCTYPE(_ctypes.POINTER(uint8_t), _ctypes.POINTER(_font_t), uint32_t, _ctypes.POINTER(uint8_t))),
    ('line_height', coord_t),
    ('base_line', coord_t),
    ('subpx', uint8_t, 2),
    ('underline_position', int8_t),
    ('underline_thickness', int8_t),
    ('dsc', void_t),
    ('fallback', _ctypes.POINTER(_font_t)),
    ('user_data', void_t)
]


color_t._fields_ = [
    ('blue', uint8_t),
    ('green', uint8_t),
    ('red', uint8_t)
]


color16_t._fields_ = [
    ('blue', uint16_t, 5),
    ('green', uint16_t, 6),
    ('red', uint16_t, 5)
]


color32_t._fields_ = [
    ('blue', uint8_t),
    ('green', uint8_t),
    ('red', uint8_t),
    ('alpha', uint8_t)
]


color_hsv_t._fields_ = [
    ('h', uint16_t),
    ('s', uint8_t),
    ('v', uint8_t)
]


_color_filter_dsc_t._fields_ = [
    ('filter_cb', color_filter_cb_t),
    ('user_data', void_t)
]


gradient_stop_t._fields_ = [
    ('color', color_t),
    ('opa', opa_t),
    ('frac', uint8_t)
]


grad_dsc_t._fields_ = [
    ('stops', _ctypes.POINTER(gradient_stop_t)),
    ('stops_count', uint8_t),
    ('dir', grad_dir_t, 3),
    ('dither', dither_mode_t, 3)
]


style_value_t._fields_ = [
    ('num', int32_t),
    ('ptr', void_t),
    ('color', color_t)
]


style_transition_dsc_t._fields_ = [
    ('props', _ctypes.POINTER(style_prop_t)),
    ('user_data', void_t),
    ('path_xcb', anim_path_cb_t),
    ('time', uint32_t),
    ('delay', uint32_t)
]


style_const_prop_t._fields_ = [
    ('prop_ptr', _ctypes.POINTER(style_prop_t)),
    ('value', style_value_t)
]


style_t._v_p._fields_ = [
    ('value1', style_value_t),
    ('values_and_props', _ctypes.POINTER(uint8_t)),
    ('const_props', _ctypes.POINTER(style_const_prop_t))
]


style_t._fields_ = [
    ('v_p', style_t._v_p),
    ('prop1', uint16_t),
    ('has_group', uint8_t),
    ('prop_cnt', uint8_t)
]


event_dsc_t._fields_ = [
    ('cb', event_cb_t),
    ('user_data', void_t),
    ('filter', uint32_t)
]


event_list_t._fields_ = [
    ('dsc', _ctypes.POINTER(event_dsc_t)),
    ('cnt', uint32_t)
]


_event_t._fields_ = [
    ('current_target', void_t),
    ('original_target', void_t),
    ('code', event_code_t),
    ('user_data', void_t),
    ('param', void_t),
    ('prev', _ctypes.POINTER(_event_t)),
    ('deleted', uint8_t, 1),
    ('stop_processing', uint8_t, 1),
    ('stop_bubbling', uint8_t, 1)
]


img_header_t._fields_ = [
    ('cf', uint32_t, 5),
    ('always_zero', uint32_t, 3),
    ('reserved', uint32_t, 2),
    ('w', uint32_t, 11),
    ('h', uint32_t, 11)
]


img_dsc_t._fields_ = [
    ('header', img_header_t),
    ('data_size', uint32_t),
    ('data', _ctypes.POINTER(uint8_t))
]


_fs_drv_t._fields_ = [
    ('letter', char_t),
    ('cache_size', uint16_t),
    ('ready_cb', CFUNCTYPE(bool_t, _ctypes.POINTER(_fs_drv_t))),
    ('open_cb', CFUNCTYPE(void_t, _ctypes.POINTER(_fs_drv_t), _ctypes.POINTER(char_t), fs_mode_t)),
    ('close_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t)),
    ('read_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t, void_t, uint32_t, _ctypes.POINTER(uint32_t))),
    ('write_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t, void_t, uint32_t, _ctypes.POINTER(uint32_t))),
    ('seek_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t, uint32_t, fs_whence_t)),
    ('tell_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t, _ctypes.POINTER(uint32_t))),
    ('dir_open_cb', CFUNCTYPE(void_t, _ctypes.POINTER(_fs_drv_t), _ctypes.POINTER(char_t))),
    ('dir_read_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t, _ctypes.POINTER(char_t))),
    ('dir_close_cb', CFUNCTYPE(fs_res_t, _ctypes.POINTER(_fs_drv_t), void_t)),
    ('user_data', void_t)
]


fs_file_cache_t._fields_ = [
    ('start', uint32_t),
    ('end', uint32_t),
    ('file_position', uint32_t),
    ('buffer', void_t)
]


fs_file_t._fields_ = [
    ('file_d', void_t),
    ('drv', _ctypes.POINTER(_fs_drv_t)),
    ('cache', _ctypes.POINTER(fs_file_cache_t))
]


fs_dir_t._fields_ = [
    ('dir_d', void_t),
    ('drv', _ctypes.POINTER(_fs_drv_t))
]


_img_decoder_t._fields_ = [
    ('info_cb', img_decoder_info_f_t),
    ('open_cb', img_decoder_open_f_t),
    ('read_line_cb', img_decoder_read_line_f_t),
    ('close_cb', img_decoder_close_f_t),
    ('user_data', void_t)
]


_img_decoder_dsc_t._fields_ = [
    ('decoder', _ctypes.POINTER(_img_decoder_t)),
    ('src', void_t),
    ('color', color_t),
    ('frame_id', int32_t),
    ('src_type', img_src_t),
    ('header', img_header_t),
    ('img_data', _ctypes.POINTER(uint8_t)),
    ('palette', _ctypes.POINTER(color32_t)),
    ('palette_size', uint32_t),
    ('time_to_open', uint32_t),
    ('error_msg', _ctypes.POINTER(char_t)),
    ('user_data', void_t)
]


_img_cache_entry_t._fields_ = [
    ('dec_dsc', _img_decoder_dsc_t),
    ('user_data', void_t)
]


img_cache_manager_t._fields_ = [
    ('open_cb', CFUNCTYPE(_ctypes.POINTER(_img_cache_entry_t), void_t, color_t, int32_t)),
    ('set_size_cb', CFUNCTYPE(void_t, uint16_t)),
    ('invalidate_src_cb', CFUNCTYPE(void_t, void_t))
]


_draw_task_t._fields_ = [
    ('next', _ctypes.POINTER(_draw_task_t)),
    ('type', draw_task_type_t),
    ('area', area_t),
    ('clip_area_original', area_t),
    ('clip_area', area_t),
    ('state', int_t),
    ('draw_dsc', void_t)
]


draw_mask_t._fields_ = [
    ('user_data', void_t)
]


_draw_unit_t._fields_ = [
    ('next', _ctypes.POINTER(_draw_unit_t)),
    ('target_layer', _ctypes.POINTER(_layer_t)),
    ('clip_area', _ctypes.POINTER(area_t)),
    ('dispatch', CFUNCTYPE(int32_t, _ctypes.POINTER(_draw_unit_t), _ctypes.POINTER(_layer_t)))
]


_layer_t._fields_ = [
    ('buf', void_t),
    ('buf_area', area_t),
    ('clip_area', area_t),
    ('color_format', color_format_t),
    ('buffer_copy', CFUNCTYPE(void_t, _ctypes.POINTER(_layer_t), void_t, coord_t, _ctypes.POINTER(area_t), void_t, coord_t, _ctypes.POINTER(area_t))),
    ('buffer_convert', CFUNCTYPE(void_t, _ctypes.POINTER(_layer_t))),
    ('buffer_clear', CFUNCTYPE(void_t, _ctypes.POINTER(_layer_t), _ctypes.POINTER(area_t))),
    ('draw_task_head', _ctypes.POINTER(_draw_task_t)),
    ('parent', _ctypes.POINTER(_layer_t)),
    ('next', _ctypes.POINTER(_layer_t)),
    ('all_tasks_added', bool_t),
    ('user_data', void_t)
]


draw_dsc_base_t._fields_ = [
    ('obj', _ctypes.POINTER(_obj_t)),
    ('part', uint32_t),
    ('id1', uint32_t),
    ('id2', uint32_t),
    ('layer', _ctypes.POINTER(_layer_t))
]


_gradient_cache_t._fields_ = [
    ('color_map', _ctypes.POINTER(color_t)),
    ('opa_map', _ctypes.POINTER(opa_t)),
    ('size', uint32_t)
]


draw_rect_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('radius', coord_t),
    ('bg_opa', opa_t),
    ('bg_color', color_t),
    ('bg_grad', grad_dsc_t),
    ('bg_img_src', void_t),
    ('bg_img_symbol_font', void_t),
    ('bg_img_recolor', color_t),
    ('bg_img_opa', opa_t),
    ('bg_img_recolor_opa', opa_t),
    ('bg_img_tiled', uint8_t),
    ('border_color', color_t),
    ('border_width', coord_t),
    ('border_opa', opa_t),
    ('border_side', border_side_t, 5),
    ('border_post', uint8_t, 1),
    ('outline_color', color_t),
    ('outline_width', coord_t),
    ('outline_pad', coord_t),
    ('outline_opa', opa_t),
    ('shadow_color', color_t),
    ('shadow_width', coord_t),
    ('shadow_ofs_x', coord_t),
    ('shadow_ofs_y', coord_t),
    ('shadow_spread', coord_t),
    ('shadow_opa', opa_t)
]


draw_fill_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('radius', coord_t),
    ('opa', opa_t),
    ('color', color_t),
    ('grad', grad_dsc_t)
]


draw_bg_img_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('radius', coord_t),
    ('src', void_t),
    ('font', void_t),
    ('recolor', color_t),
    ('opa', opa_t),
    ('recolor_opa', opa_t),
    ('img_header', img_header_t),
    ('tiled', uint8_t, 1)
]


draw_border_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('radius', coord_t),
    ('color', color_t),
    ('width', coord_t),
    ('opa', opa_t),
    ('side', border_side_t, 5)
]


draw_box_shadow_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('radius', coord_t),
    ('color', color_t),
    ('width', coord_t),
    ('spread', coord_t),
    ('ofs_x', coord_t),
    ('ofs_y', coord_t),
    ('opa', opa_t),
    ('bg_cover', uint8_t, 1)
]


_draw_label_hint_t._fields_ = [
    ('line_start', int32_t),
    ('y', int32_t),
    ('coord_y', int32_t)
]


draw_label_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('text', _ctypes.POINTER(char_t)),
    ('font', _ctypes.POINTER(_font_t)),
    ('sel_start', uint32_t),
    ('sel_end', uint32_t),
    ('color', color_t),
    ('sel_color', color_t),
    ('sel_bg_color', color_t),
    ('line_space', coord_t),
    ('letter_space', coord_t),
    ('ofs_x', coord_t),
    ('ofs_y', coord_t),
    ('opa', opa_t),
    ('bidi_dir', base_dir_t),
    ('align', text_align_t),
    ('flag', text_flag_t),
    ('decor', text_decor_t, 3),
    ('blend_mode', blend_mode_t, 3),
    ('text_local', uint8_t, 1),
    ('hint', _ctypes.POINTER(_draw_label_hint_t))
]


draw_glyph_dsc_t._fields_ = [
    ('bitmap', _ctypes.POINTER(uint8_t)),
    ('bitmap_buf', _ctypes.POINTER(uint8_t)),
    ('_bitmap_buf_size', uint32_t),
    ('format', draw_letter_bitmap_format_t),
    ('letter_coords', _ctypes.POINTER(area_t)),
    ('bg_coords', _ctypes.POINTER(area_t)),
    ('color', color_t),
    ('opa', opa_t)
]


draw_img_sup_t._fields_ = [
    ('alpha_color', color_t),
    ('palette', _ctypes.POINTER(color32_t)),
    ('palette_size', uint32_t, 9)
]


_draw_img_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('src', void_t),
    ('angle', coord_t),
    ('zoom', coord_t),
    ('pivot', point_t),
    ('chroma_key_color', color_t),
    ('recolor', color_t),
    ('recolor_opa', opa_t),
    ('opa', opa_t),
    ('blend_mode', blend_mode_t, 4),
    ('frame_id', int32_t),
    ('antialias', uint16_t, 1),
    ('sup', _ctypes.POINTER(draw_img_sup_t))
]


draw_arc_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('color', color_t),
    ('width', coord_t),
    ('start_angle', uint16_t),
    ('end_angle', uint16_t),
    ('center', point_t),
    ('radius', uint16_t),
    ('img_src', void_t),
    ('opa', opa_t),
    ('rounded', uint8_t, 1)
]


draw_line_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('p1', point_t),
    ('p2', point_t),
    ('color', color_t),
    ('width', coord_t),
    ('dash_width', coord_t),
    ('dash_gap', coord_t),
    ('opa', opa_t),
    ('blend_mode', blend_mode_t, 2),
    ('round_start', uint8_t, 1),
    ('round_end', uint8_t, 1),
    ('raw_end', uint8_t, 1)
]


draw_triangle_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('bg_opa', opa_t),
    ('bg_color', color_t),
    ('bg_grad', grad_dsc_t),
    ('p', _ctypes.POINTER(point_t))
]


draw_mask_rect_dsc_t._fields_ = [
    ('base', draw_dsc_base_t),
    ('area', area_t),
    ('radius', coord_t)
]


layout_dsc_t._fields_ = [
    ('cb', layout_update_cb_t),
    ('user_data', void_t)
]


_obj_style_t._fields_ = [
    ('style', _ctypes.POINTER(style_t)),
    ('selector', uint32_t, 24),
    ('is_local', uint32_t, 1),
    ('is_trans', uint32_t, 1)
]


_obj_style_transition_dsc_t._fields_ = [
    ('time', uint16_t),
    ('delay', uint16_t),
    ('selector', style_selector_t),
    ('prop', style_prop_t),
    ('path_cb', anim_path_cb_t),
    ('user_data', void_t)
]


_obj_class_t._fields_ = [
    ('base_class', _ctypes.POINTER(_obj_class_t)),
    ('constructor_cb', CFUNCTYPE(void_t, _ctypes.POINTER(_obj_class_t), _ctypes.POINTER(_obj_t))),
    ('destructor_cb', CFUNCTYPE(void_t, _ctypes.POINTER(_obj_class_t), _ctypes.POINTER(_obj_t))),
    ('event_cb', CFUNCTYPE(void_t, _ctypes.POINTER(_obj_class_t), _ctypes.POINTER(_event_t))),
    ('user_data', void_t),
    ('width_def', coord_t),
    ('height_def', coord_t),
    ('editable', uint32_t, 2),
    ('group_def', uint32_t, 2),
    ('instance_size', uint32_t, 16),
    ('theme_inheritable', uint32_t, 1)
]


ll_t._fields_ = [
    ('n_size', uint32_t),
    ('head', _ctypes.POINTER(ll_node_t)),
    ('tail', _ctypes.POINTER(ll_node_t))
]


_group_t._fields_ = [
    ('obj_ll', ll_t),
    ('obj_focus', _ctypes.POINTER(_ctypes.POINTER(_obj_t))),
    ('focus_cb', group_focus_cb_t),
    ('edge_cb', group_edge_cb_t),
    ('user_data', void_t),
    ('frozen', uint8_t, 1),
    ('editing', uint8_t, 1),
    ('refocus_policy', uint8_t, 1),
    ('wrap', uint8_t, 1)
]


indev_data_t._fields_ = [
    ('point', point_t),
    ('key', uint32_t),
    ('btn_id', uint32_t),
    ('enc_diff', int16_t),
    ('state', indev_state_t),
    ('continue_reading', bool_t)
]


hit_test_info_t._fields_ = [
    ('point', _ctypes.POINTER(point_t)),
    ('res', bool_t)
]


cover_check_info_t._fields_ = [
    ('res', cover_res_t),
    ('area', _ctypes.POINTER(area_t))
]


_obj_spec_attr_t._fields_ = [
    ('children', _ctypes.POINTER(_ctypes.POINTER(_obj_t))),
    ('child_cnt', uint32_t),
    ('group_p', _ctypes.POINTER(_group_t)),
    ('event_list', event_list_t),
    ('scroll', point_t),
    ('ext_click_pad', coord_t),
    ('ext_draw_size', coord_t),
    ('scrollbar_mode', scrollbar_mode_t, 2),
    ('scroll_snap_x', scroll_snap_t, 2),
    ('scroll_snap_y', scroll_snap_t, 2),
    ('scroll_dir', dir_t, 4),
    ('layer_type', uint8_t, 2)
]


_obj_t._fields_ = [
    ('class_p', _ctypes.POINTER(_obj_class_t)),
    ('parent', _ctypes.POINTER(_obj_t)),
    ('spec_attr', _ctypes.POINTER(_obj_spec_attr_t)),
    ('styles', _ctypes.POINTER(_obj_style_t)),
    ('user_data', void_t),
    ('coords', area_t),
    ('flags', obj_flag_t),
    ('state', state_t),
    ('layout_inv', uint16_t, 1),
    ('scr_layout_inv', uint16_t, 1),
    ('skip_trans', uint16_t, 1),
    ('style_cnt', uint16_t, 6),
    ('h_layout', uint16_t, 1),
    ('w_layout', uint16_t, 1)
]


font_fmt_txt_glyph_dsc_t._fields_ = [
    ('bitmap_index', uint32_t),
    ('adv_w', uint32_t),
    ('box_w', uint16_t),
    ('box_h', uint16_t),
    ('ofs_x', int16_t),
    ('ofs_y', int16_t)
]


font_fmt_txt_cmap_t._fields_ = [
    ('range_start', uint32_t),
    ('range_length', uint16_t),
    ('glyph_id_start', uint16_t),
    ('unicode_list', _ctypes.POINTER(uint16_t)),
    ('glyph_id_ofs_list', void_t),
    ('list_length', uint16_t),
    ('type', font_fmt_txt_cmap_type_t)
]


font_fmt_txt_kern_pair_t._fields_ = [
    ('glyph_ids', void_t),
    ('values', _ctypes.POINTER(int8_t)),
    ('pair_cnt', uint32_t, 30),
    ('glyph_ids_size', uint32_t, 2)
]


font_fmt_txt_kern_classes_t._fields_ = [
    ('class_pair_values', _ctypes.POINTER(int8_t)),
    ('left_class_mapping', _ctypes.POINTER(uint8_t)),
    ('right_class_mapping', _ctypes.POINTER(uint8_t)),
    ('left_class_cnt', uint8_t),
    ('right_class_cnt', uint8_t)
]


font_fmt_txt_glyph_cache_t._fields_ = [
    ('last_letter', uint32_t),
    ('last_glyph_id', uint32_t)
]


font_fmt_txt_dsc_t._fields_ = [
    ('glyph_bitmap', _ctypes.POINTER(uint8_t)),
    ('glyph_dsc', _ctypes.POINTER(font_fmt_txt_glyph_dsc_t)),
    ('cmaps', _ctypes.POINTER(font_fmt_txt_cmap_t)),
    ('kern_dsc', void_t),
    ('kern_scale', uint16_t),
    ('cmap_num', uint16_t, 9),
    ('bpp', uint16_t, 4),
    ('kern_classes', uint16_t, 1),
    ('bitmap_format', uint16_t, 2),
    ('cache', _ctypes.POINTER(font_fmt_txt_glyph_cache_t))
]


img_t._fields_ = [
    ('obj', _obj_t),
    ('src', void_t),
    ('offset', point_t),
    ('w', coord_t),
    ('h', coord_t),
    ('angle', coord_t),
    ('pivot', point_t),
    ('zoom', coord_t),
    ('src_type', uint8_t, 2),
    ('cf', uint8_t, 5),
    ('antialias', uint8_t, 1),
    ('obj_size_mode', uint8_t, 2)
]


animimg_t._fields_ = [
    ('img', img_t),
    ('anim', _anim_t),
    ('dsc', _ctypes.POINTER(void_t)),
    ('pic_count', int8_t)
]


arc_t._fields_ = [
    ('obj', _obj_t),
    ('rotation', uint16_t),
    ('indic_angle_start', uint16_t),
    ('indic_angle_end', uint16_t),
    ('bg_angle_start', uint16_t),
    ('bg_angle_end', uint16_t),
    ('value', int16_t),
    ('min_value', int16_t),
    ('max_value', int16_t),
    ('dragging', uint16_t, 1),
    ('type', uint16_t, 2),
    ('min_close', uint16_t, 1),
    ('chg_rate', uint16_t),
    ('last_tick', uint32_t),
    ('last_angle', int16_t),
    ('knob_offset', int16_t)
]


label_t._dot._fields_ = [
    ('tmp_ptr', _ctypes.POINTER(char_t)),
    ('tmp', _ctypes.POINTER(char_t))
]


label_t._fields_ = [
    ('obj', _obj_t),
    ('text', _ctypes.POINTER(char_t)),
    ('dot', label_t._dot),
    ('dot_end', uint32_t),
    ('hint', _draw_label_hint_t),
    ('sel_start', uint32_t),
    ('sel_end', uint32_t),
    ('size_cache', point_t),
    ('offset', point_t),
    ('long_mode', label_long_mode_t, 3),
    ('static_txt', uint8_t, 1),
    ('recolor', uint8_t, 1),
    ('expand', uint8_t, 1),
    ('dot_tmp_alloc', uint8_t, 1),
    ('invalid_size_cache', uint8_t, 1)
]


_bar_anim_t._fields_ = [
    ('bar', _ctypes.POINTER(_obj_t)),
    ('anim_start', int32_t),
    ('anim_end', int32_t),
    ('anim_state', int32_t)
]


bar_t._fields_ = [
    ('obj', _obj_t),
    ('cur_value', int32_t),
    ('min_value', int32_t),
    ('max_value', int32_t),
    ('start_value', int32_t),
    ('indic_area', area_t),
    ('cur_value_anim', _bar_anim_t),
    ('start_value_anim', _bar_anim_t),
    ('mode', bar_mode_t, 2)
]


btn_t._fields_ = [
    ('obj', _obj_t)
]


btnmatrix_t._fields_ = [
    ('obj', _obj_t),
    ('map_p', _ctypes.POINTER(_ctypes.POINTER(char_t))),
    ('button_areas', _ctypes.POINTER(area_t)),
    ('ctrl_bits', _ctypes.POINTER(btnmatrix_ctrl_t)),
    ('btn_cnt', uint16_t),
    ('row_cnt', uint16_t),
    ('btn_id_sel', uint16_t),
    ('one_check', uint8_t, 1)
]


calendar_date_t._fields_ = [
    ('year', uint16_t),
    ('month', int8_t),
    ('day', int8_t)
]


calendar_t._fields_ = [
    ('obj', _obj_t),
    ('btnm', _ctypes.POINTER(_obj_t)),
    ('today', calendar_date_t),
    ('showed_date', calendar_date_t),
    ('highlighted_dates', _ctypes.POINTER(calendar_date_t)),
    ('highlighted_dates_num', uint16_t),
    ('map', _ctypes.POINTER(char_t)),
    ('nums', _ctypes.POINTER(_ctypes.POINTER(char_t)))
]


canvas_t._fields_ = [
    ('img', img_t),
    ('dsc', img_dsc_t)
]


chart_series_t._fields_ = [
    ('x_points', _ctypes.POINTER(coord_t)),
    ('y_points', _ctypes.POINTER(coord_t)),
    ('color', color_t),
    ('start_point', uint16_t),
    ('hidden', uint8_t, 1),
    ('x_ext_buf_assigned', uint8_t, 1),
    ('y_ext_buf_assigned', uint8_t, 1),
    ('x_axis_sec', uint8_t, 1),
    ('y_axis_sec', uint8_t, 1)
]


chart_cursor_t._fields_ = [
    ('pos', point_t),
    ('point_id', coord_t),
    ('color', color_t),
    ('ser', _ctypes.POINTER(chart_series_t)),
    ('dir', dir_t),
    ('pos_set', uint8_t, 1)
]


chart_tick_dsc_t._fields_ = [
    ('major_len', coord_t),
    ('minor_len', coord_t),
    ('draw_size', coord_t),
    ('minor_cnt', uint32_t, 15),
    ('major_cnt', uint32_t, 15),
    ('label_en', uint32_t, 1)
]


chart_t._fields_ = [
    ('obj', _obj_t),
    ('series_ll', ll_t),
    ('cursor_ll', ll_t),
    ('tick', _ctypes.POINTER(chart_tick_dsc_t)),
    ('ymin', _ctypes.POINTER(coord_t)),
    ('ymax', _ctypes.POINTER(coord_t)),
    ('xmin', _ctypes.POINTER(coord_t)),
    ('xmax', _ctypes.POINTER(coord_t)),
    ('pressed_point_id', coord_t),
    ('hdiv_cnt', uint16_t),
    ('vdiv_cnt', uint16_t),
    ('point_cnt', uint16_t),
    ('zoom_x', uint16_t),
    ('zoom_y', uint16_t),
    ('type', chart_type_t, 3),
    ('update_mode', chart_update_mode_t, 1)
]


checkbox_t._fields_ = [
    ('obj', _obj_t),
    ('txt', _ctypes.POINTER(char_t)),
    ('static_txt', uint32_t, 1)
]


dropdown_t._fields_ = [
    ('obj', _obj_t),
    ('list', _ctypes.POINTER(_obj_t)),
    ('text', _ctypes.POINTER(char_t)),
    ('symbol', void_t),
    ('options', _ctypes.POINTER(char_t)),
    ('option_cnt', uint16_t),
    ('sel_opt_id', uint16_t),
    ('sel_opt_id_orig', uint16_t),
    ('pr_opt_id', uint16_t),
    ('dir', dir_t, 4),
    ('static_txt', uint8_t, 1),
    ('selected_highlight', uint8_t, 1)
]


dropdown_list_t._fields_ = [
    ('obj', _obj_t),
    ('dropdown', _ctypes.POINTER(_obj_t))
]


imgbtn_src_info_t._fields_ = [
    ('img_src', void_t),
    ('header', img_header_t)
]


imgbtn_t._fields_ = [
    ('obj', _obj_t),
    ('src_mid', _ctypes.POINTER(imgbtn_src_info_t)),
    ('src_left', _ctypes.POINTER(imgbtn_src_info_t)),
    ('src_right', _ctypes.POINTER(imgbtn_src_info_t))
]


keyboard_t._fields_ = [
    ('btnm', btnmatrix_t),
    ('ta', _ctypes.POINTER(_obj_t)),
    ('mode', keyboard_mode_t),
    ('popovers', uint8_t, 1)
]


led_t._fields_ = [
    ('obj', _obj_t),
    ('color', color_t),
    ('bright', uint8_t)
]


line_t._fields_ = [
    ('obj', _obj_t),
    ('point_array', _ctypes.POINTER(point_t)),
    ('point_num', uint16_t),
    ('y_inv', uint8_t, 1)
]


menu_load_page_event_data_t._fields_ = [
    ('menu', _ctypes.POINTER(_obj_t)),
    ('page', _ctypes.POINTER(_obj_t))
]


menu_history_t._fields_ = [
    ('page', _ctypes.POINTER(_obj_t))
]


menu_t._fields_ = [
    ('obj', _obj_t),
    ('storage', _ctypes.POINTER(_obj_t)),
    ('main', _ctypes.POINTER(_obj_t)),
    ('main_page', _ctypes.POINTER(_obj_t)),
    ('main_header', _ctypes.POINTER(_obj_t)),
    ('main_header_back_btn', _ctypes.POINTER(_obj_t)),
    ('main_header_title', _ctypes.POINTER(_obj_t)),
    ('sidebar', _ctypes.POINTER(_obj_t)),
    ('sidebar_page', _ctypes.POINTER(_obj_t)),
    ('sidebar_header', _ctypes.POINTER(_obj_t)),
    ('sidebar_header_back_btn', _ctypes.POINTER(_obj_t)),
    ('sidebar_header_title', _ctypes.POINTER(_obj_t)),
    ('selected_tab', _ctypes.POINTER(_obj_t)),
    ('history_ll', ll_t),
    ('cur_depth', uint8_t),
    ('prev_depth', uint8_t),
    ('sidebar_generated', uint8_t, 1),
    ('mode_header', menu_mode_header_t, 2),
    ('mode_root_back_btn', menu_mode_root_back_btn_t, 1)
]


menu_page_t._fields_ = [
    ('obj', _obj_t),
    ('title', _ctypes.POINTER(char_t)),
    ('static_title', bool_t)
]


meter_indicator_t._type_data._needle_img._fields_ = [
    ('src', void_t),
    ('pivot', point_t)
]


meter_indicator_t._type_data._needle_line._fields_ = [
    ('width', uint16_t),
    ('r_mod', int16_t),
    ('color', color_t)
]


meter_indicator_t._type_data._arc._fields_ = [
    ('width', uint16_t),
    ('src', void_t),
    ('color', color_t),
    ('r_mod', int16_t)
]


meter_indicator_t._type_data._scale_lines._fields_ = [
    ('width_mod', int16_t),
    ('color_start', color_t),
    ('color_end', color_t),
    ('local_grad', uint8_t, 1)
]


meter_indicator_t._type_data._fields_ = [
    ('needle_img', meter_indicator_t._type_data._needle_img),
    ('needle_line', meter_indicator_t._type_data._needle_line),
    ('arc', meter_indicator_t._type_data._arc),
    ('scale_lines', meter_indicator_t._type_data._scale_lines)
]


meter_indicator_t._fields_ = [
    ('type', meter_indicator_type_t),
    ('opa', opa_t),
    ('start_value', int32_t),
    ('end_value', int32_t),
    ('type_data', meter_indicator_t._type_data)
]


meter_t._scale._fields_ = [
    ('tick_color', color_t),
    ('tick_cnt', uint16_t),
    ('tick_length', uint16_t),
    ('tick_width', uint16_t),
    ('tick_major_color', color_t),
    ('tick_major_nth', uint16_t),
    ('tick_major_length', uint16_t),
    ('tick_major_width', uint16_t),
    ('label_gap', int16_t),
    ('label_color', int16_t),
    ('min', int32_t),
    ('max', int32_t),
    ('r_mod', int16_t),
    ('angle_range', uint16_t),
    ('rotation', int16_t)
]


meter_t._fields_ = [
    ('obj', _obj_t),
    ('scale', meter_t._scale),
    ('indicator_ll', ll_t)
]


msgbox_t._fields_ = [
    ('obj', _obj_t),
    ('title', _ctypes.POINTER(_obj_t)),
    ('close_btn', _ctypes.POINTER(_obj_t)),
    ('content', _ctypes.POINTER(_obj_t)),
    ('text', _ctypes.POINTER(_obj_t)),
    ('btns', _ctypes.POINTER(_obj_t))
]


roller_t._fields_ = [
    ('obj', _obj_t),
    ('option_cnt', uint16_t),
    ('sel_opt_id', uint16_t),
    ('sel_opt_id_ori', uint16_t),
    ('inf_page_cnt', uint32_t),
    ('mode', roller_mode_t, 1),
    ('moved', uint32_t, 1)
]


slider_t._fields_ = [
    ('bar', bar_t),
    ('left_knob_area', area_t),
    ('right_knob_area', area_t),
    ('pressed_point', point_t),
    ('value_to_set', _ctypes.POINTER(int32_t)),
    ('dragging', uint8_t, 1),
    ('left_knob_focus', uint8_t, 1)
]


span_t._fields_ = [
    ('txt', _ctypes.POINTER(char_t)),
    ('spangroup', _ctypes.POINTER(_obj_t)),
    ('style', style_t),
    ('static_flag', uint8_t, 1)
]


spangroup_t._fields_ = [
    ('obj', _obj_t),
    ('lines', int32_t),
    ('indent', coord_t),
    ('cache_w', coord_t),
    ('cache_h', coord_t),
    ('child_ll', ll_t),
    ('mode', uint8_t, 2),
    ('overflow', uint8_t, 1),
    ('refresh', uint8_t, 1)
]


textarea_t._cursor._fields_ = [
    ('valid_x', coord_t),
    ('pos', uint32_t),
    ('area', area_t),
    ('txt_byte_pos', uint32_t),
    ('show', uint8_t, 1),
    ('click_pos', uint8_t, 1)
]


textarea_t._fields_ = [
    ('obj', _obj_t),
    ('label', _ctypes.POINTER(_obj_t)),
    ('placeholder_txt', _ctypes.POINTER(char_t)),
    ('pwd_tmp', _ctypes.POINTER(char_t)),
    ('pwd_bullet', _ctypes.POINTER(char_t)),
    ('accepted_chars', _ctypes.POINTER(char_t)),
    ('max_length', uint32_t),
    ('pwd_show_time', uint16_t),
    ('cursor', textarea_t._cursor),
    ('sel_start', uint32_t),
    ('sel_end', uint32_t),
    ('text_sel_in_prog', uint8_t, 1),
    ('text_sel_en', uint8_t, 1),
    ('pwd_mode', uint8_t, 1),
    ('one_line', uint8_t, 1)
]


spinbox_t._fields_ = [
    ('ta', textarea_t),
    ('value', int32_t),
    ('range_max', int32_t),
    ('range_min', int32_t),
    ('step', int32_t),
    ('digit_count', uint16_t, 4),
    ('dec_point_pos', uint16_t, 4),
    ('rollover', uint16_t, 1),
    ('digit_step_dir', uint16_t, 2)
]


switch_t._fields_ = [
    ('obj', _obj_t),
    ('anim_state', int32_t)
]


table_t._fields_ = [
    ('obj', _obj_t),
    ('col_cnt', uint16_t),
    ('row_cnt', uint16_t),
    ('cell_data', _ctypes.POINTER(_ctypes.POINTER(char_t))),
    ('row_h', _ctypes.POINTER(coord_t)),
    ('col_w', _ctypes.POINTER(coord_t)),
    ('col_act', uint16_t),
    ('row_act', uint16_t)
]


tabview_t._fields_ = [
    ('obj', _obj_t),
    ('map', _ctypes.POINTER(_ctypes.POINTER(char_t))),
    ('tab_cnt', uint16_t),
    ('tab_cur', uint16_t),
    ('tab_pos', dir_t)
]


tileview_t._fields_ = [
    ('obj', _obj_t),
    ('tile_act', _ctypes.POINTER(_obj_t))
]


tileview_tile_t._fields_ = [
    ('obj', _obj_t),
    ('dir', dir_t)
]


win_t._fields_ = [
    ('obj', _obj_t)
]


msg_t._fields_ = [
    ('id', msg_id_t),
    ('user_data', void_t),
    ('_priv_data', void_t),
    ('payload', void_t)
]


pinyin_dict_t._fields_ = [
    ('py', _ctypes.POINTER(char_t)),
    ('py_mb', _ctypes.POINTER(char_t))
]


ime_pinyin_k9_py_str_t._fields_ = [
    ('py_str', _ctypes.POINTER(char_t))
]


ime_pinyin_t._fields_ = [
    ('obj', _obj_t),
    ('kb', _ctypes.POINTER(_obj_t)),
    ('cand_panel', _ctypes.POINTER(_obj_t)),
    ('dict', _ctypes.POINTER(pinyin_dict_t)),
    ('k9_legal_py_ll', ll_t),
    ('cand_str', _ctypes.POINTER(char_t)),
    ('input_char', _ctypes.POINTER(char_t)),
    ('k9_input_str', _ctypes.POINTER(char_t)),
    ('k9_py_ll_pos', uint16_t),
    ('k9_legal_py_count', uint16_t),
    ('k9_input_str_len', uint16_t),
    ('ta_count', uint16_t),
    ('cand_num', uint16_t),
    ('py_page', uint16_t),
    ('py_num', _ctypes.POINTER(uint16_t)),
    ('py_pos', _ctypes.POINTER(uint16_t)),
    ('mode', ime_pinyin_mode_t)
]


file_explorer_t._fields_ = [
    ('obj', _obj_t),
    ('cont', _ctypes.POINTER(_obj_t)),
    ('head_area', _ctypes.POINTER(_obj_t)),
    ('browser_area', _ctypes.POINTER(_obj_t)),
    ('file_table', _ctypes.POINTER(_obj_t)),
    ('path_label', _ctypes.POINTER(_obj_t)),
    ('quick_access_area', _ctypes.POINTER(_obj_t)),
    ('list_device', _ctypes.POINTER(_obj_t)),
    ('list_places', _ctypes.POINTER(_obj_t)),
    ('home_dir', _ctypes.POINTER(char_t)),
    ('music_dir', _ctypes.POINTER(char_t)),
    ('pictures_dir', _ctypes.POINTER(char_t)),
    ('video_dir', _ctypes.POINTER(char_t)),
    ('docs_dir', _ctypes.POINTER(char_t)),
    ('fs_dir', _ctypes.POINTER(char_t)),
    ('sel_fn', _ctypes.POINTER(char_t)),
    ('current_path', _ctypes.POINTER(char_t)),
    ('sort', file_explorer_sort_t)
]


barcode_t._fields_ = [
    ('canvas', canvas_t),
    ('dark_color', color_t),
    ('light_color', color_t),
    ('scale', uint16_t)
]


_gd_Palette._fields_ = [
    ('size', int_t),
    ('colors', _ctypes.POINTER(uint8_t))
]


_gd_GCE._fields_ = [
    ('delay', uint16_t),
    ('tindex', uint8_t),
    ('disposal', uint8_t),
    ('input', int_t),
    ('transparency', int_t)
]


_gd_GIF._fields_ = [
    ('fd', fs_file_t),
    ('data', _ctypes.POINTER(char_t)),
    ('is_file', uint8_t),
    ('f_rw_p', uint32_t),
    ('anim_start', int32_t),
    ('width', uint16_t),
    ('height', uint16_t),
    ('depth', uint16_t),
    ('loop_count', int32_t),
    ('gce', _gd_GCE),
    ('palette', _ctypes.POINTER(_gd_Palette)),
    ('lct', _gd_Palette),
    ('gct', _gd_Palette),
    ('plain_text', CFUNCTYPE(void_t, _ctypes.POINTER(_gd_GIF), uint16_t, uint16_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, uint8_t)),
    ('comment', CFUNCTYPE(void_t, _ctypes.POINTER(_gd_GIF))),
    ('application', CFUNCTYPE(void_t, _ctypes.POINTER(_gd_GIF), _ctypes.POINTER(char_t), _ctypes.POINTER(char_t))),
    ('fx', uint16_t),
    ('fy', uint16_t),
    ('fw', uint16_t),
    ('fh', uint16_t),
    ('bgindex', uint8_t),
    ('canvas', _ctypes.POINTER(uint8_t)),
    ('frame', _ctypes.POINTER(uint8_t))
]


gif_t._fields_ = [
    ('img', img_t),
    ('gif', _ctypes.POINTER(_gd_GIF)),
    ('timer', _ctypes.POINTER(_timer_t)),
    ('imgdsc', img_dsc_t),
    ('last_call', uint32_t)
]


qrcode_t._fields_ = [
    ('canvas', canvas_t),
    ('dark_color', color_t),
    ('light_color', color_t)
]


_theme_t._fields_ = [
    ('apply_cb', theme_apply_cb_t),
    ('parent', _ctypes.POINTER(_theme_t)),
    ('user_data', void_t),
    ('disp', _ctypes.POINTER(_disp_t)),
    ('color_primary', color_t),
    ('color_secondary', color_t),
    ('font_small', _ctypes.POINTER(_font_t)),
    ('font_normal', _ctypes.POINTER(_font_t)),
    ('font_large', _ctypes.POINTER(_font_t)),
    ('flags', uint32_t)
]


_disp_t._fields_ = [
    ('hor_res', coord_t),
    ('ver_res', coord_t),
    ('physical_hor_res', coord_t),
    ('physical_ver_res', coord_t),
    ('offset_x', coord_t),
    ('offset_y', coord_t),
    ('dpi', uint32_t),
    ('draw_buf_1', void_t),
    ('draw_buf_2', void_t),
    ('draw_buf_act', void_t),
    ('draw_buf_size', uint32_t),
    ('flush_cb', disp_flush_cb_t),
    ('flushing', int_t),
    ('flushing_last', int_t),
    ('last_area', uint32_t, 1),
    ('last_part', uint32_t, 1),
    ('render_mode', disp_render_mode_t),
    ('antialiasing', uint32_t, 1),
    ('rendering_in_progress', uint32_t, 1),
    ('color_format', color_format_t),
    ('inv_areas', _ctypes.POINTER(area_t)),
    ('inv_area_joined', _ctypes.POINTER(uint8_t)),
    ('inv_p', uint16_t),
    ('inv_en_cnt', int32_t),
    ('layer_head', _ctypes.POINTER(_layer_t)),
    ('layer_init', CFUNCTYPE(_ctypes.POINTER(_layer_t), _ctypes.POINTER(_disp_t))),
    ('layer_deinit', CFUNCTYPE(void_t, _ctypes.POINTER(_disp_t), _ctypes.POINTER(_layer_t))),
    ('screens', _ctypes.POINTER(_ctypes.POINTER(_obj_t))),
    ('act_scr', _ctypes.POINTER(_obj_t)),
    ('prev_scr', _ctypes.POINTER(_obj_t)),
    ('scr_to_load', _ctypes.POINTER(_obj_t)),
    ('bottom_layer', _ctypes.POINTER(_obj_t)),
    ('top_layer', _ctypes.POINTER(_obj_t)),
    ('sys_layer', _ctypes.POINTER(_obj_t)),
    ('screen_cnt', uint32_t),
    ('draw_prev_over_act', uint8_t, 1),
    ('del_prev', uint8_t, 1),
    ('driver_data', void_t),
    ('user_data', void_t),
    ('event_list', event_list_t),
    ('sw_rotate', uint32_t, 1),
    ('rotation', uint32_t, 2),
    ('theme', _ctypes.POINTER(_theme_t)),
    ('refr_timer', _ctypes.POINTER(_timer_t)),
    ('last_activity_time', uint32_t),
    ('refreshed_area', area_t)
]


_indev_t._pointer._fields_ = [
    ('act_point', point_t),
    ('last_point', point_t),
    ('last_raw_point', point_t),
    ('vect', point_t),
    ('scroll_sum', point_t),
    ('scroll_throw_vect', point_t),
    ('scroll_throw_vect_ori', point_t),
    ('act_obj', _ctypes.POINTER(_obj_t)),
    ('last_obj', _ctypes.POINTER(_obj_t)),
    ('scroll_obj', _ctypes.POINTER(_obj_t)),
    ('last_pressed', _ctypes.POINTER(_obj_t)),
    ('scroll_area', area_t),
    ('gesture_sum', point_t),
    ('scroll_dir', dir_t, 4),
    ('gesture_dir', dir_t, 4),
    ('gesture_sent', uint8_t, 1)
]


_indev_t._keypad._fields_ = [
    ('last_state', indev_state_t),
    ('last_key', uint32_t)
]


_indev_t._fields_ = [
    ('type', indev_type_t),
    ('read_cb', indev_read_cb_t),
    ('feedback_cb', CFUNCTYPE(void_t, _ctypes.POINTER(_indev_t), uint8_t)),
    ('state', indev_state_t),
    ('long_pr_sent', uint8_t, 1),
    ('reset_query', uint8_t, 1),
    ('disabled', uint8_t, 1),
    ('wait_until_release', uint8_t, 1),
    ('pr_timestamp', uint32_t),
    ('longpr_rep_timestamp', uint32_t),
    ('driver_data', void_t),
    ('user_data', void_t),
    ('disp', _ctypes.POINTER(_disp_t)),
    ('read_timer', _ctypes.POINTER(_timer_t)),
    ('scroll_limit', uint8_t),
    ('scroll_throw', uint8_t),
    ('gesture_min_velocity', uint8_t),
    ('gesture_limit', uint8_t),
    ('long_press_time', uint16_t),
    ('long_press_repeat_time', uint16_t),
    ('pointer', _indev_t._pointer),
    ('keypad', _indev_t._keypad),
    ('cursor', _ctypes.POINTER(_obj_t)),
    ('group', _ctypes.POINTER(_group_t)),
    ('btn_points', _ctypes.POINTER(point_t))
]
  # NOQA
# ************************************************

# ************ FUNCTION TYPE DECLS ***************
# pointer_decls
# ************************************************

# *****************  FUNCTIONS  ******************
# func_restypes

__font_montserrat_8_pointer = _ctypes.POINTER(font_t)
font_montserrat_8 = __font_montserrat_8_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_8")

__font_montserrat_10_pointer = _ctypes.POINTER(font_t)
font_montserrat_10 = __font_montserrat_10_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_10")

__font_montserrat_12_pointer = _ctypes.POINTER(font_t)
font_montserrat_12 = __font_montserrat_12_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_12")

__font_montserrat_14_pointer = _ctypes.POINTER(font_t)
font_montserrat_14 = __font_montserrat_14_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_14")

__font_montserrat_16_pointer = _ctypes.POINTER(font_t)
font_montserrat_16 = __font_montserrat_16_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_16")

__font_montserrat_18_pointer = _ctypes.POINTER(font_t)
font_montserrat_18 = __font_montserrat_18_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_18")

__font_montserrat_20_pointer = _ctypes.POINTER(font_t)
font_montserrat_20 = __font_montserrat_20_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_20")

__font_montserrat_22_pointer = _ctypes.POINTER(font_t)
font_montserrat_22 = __font_montserrat_22_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_22")

__font_montserrat_24_pointer = _ctypes.POINTER(font_t)
font_montserrat_24 = __font_montserrat_24_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_24")

__font_montserrat_26_pointer = _ctypes.POINTER(font_t)
font_montserrat_26 = __font_montserrat_26_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_26")

__font_montserrat_28_pointer = _ctypes.POINTER(font_t)
font_montserrat_28 = __font_montserrat_28_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_28")

__font_montserrat_30_pointer = _ctypes.POINTER(font_t)
font_montserrat_30 = __font_montserrat_30_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_30")

__font_montserrat_32_pointer = _ctypes.POINTER(font_t)
font_montserrat_32 = __font_montserrat_32_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_32")

__font_montserrat_34_pointer = _ctypes.POINTER(font_t)
font_montserrat_34 = __font_montserrat_34_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_34")

__font_montserrat_36_pointer = _ctypes.POINTER(font_t)
font_montserrat_36 = __font_montserrat_36_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_36")

__font_montserrat_38_pointer = _ctypes.POINTER(font_t)
font_montserrat_38 = __font_montserrat_38_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_38")

__font_montserrat_40_pointer = _ctypes.POINTER(font_t)
font_montserrat_40 = __font_montserrat_40_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_40")

__font_montserrat_42_pointer = _ctypes.POINTER(font_t)
font_montserrat_42 = __font_montserrat_42_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_42")

__font_montserrat_44_pointer = _ctypes.POINTER(font_t)
font_montserrat_44 = __font_montserrat_44_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_44")

__font_montserrat_46_pointer = _ctypes.POINTER(font_t)
font_montserrat_46 = __font_montserrat_46_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_46")

__font_montserrat_48_pointer = _ctypes.POINTER(font_t)
font_montserrat_48 = __font_montserrat_48_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_48")

__font_montserrat_28_compressed_pointer = _ctypes.POINTER(font_t)
font_montserrat_28_compressed = __font_montserrat_28_compressed_pointer.in_dll(_lib_lvgl, "py_lv_font_montserrat_28_compressed")

__font_dejavu_16_persian_hebrew_pointer = _ctypes.POINTER(font_t)
font_dejavu_16_persian_hebrew = __font_dejavu_16_persian_hebrew_pointer.in_dll(_lib_lvgl, "py_lv_font_dejavu_16_persian_hebrew")

__font_simsun_16_cjk_pointer = _ctypes.POINTER(font_t)
font_simsun_16_cjk = __font_simsun_16_cjk_pointer.in_dll(_lib_lvgl, "py_lv_font_simsun_16_cjk")

__font_unscii_8_pointer = _ctypes.POINTER(font_t)
font_unscii_8 = __font_unscii_8_pointer.in_dll(_lib_lvgl, "py_lv_font_unscii_8")

__font_unscii_16_pointer = _ctypes.POINTER(font_t)
font_unscii_16 = __font_unscii_16_pointer.in_dll(_lib_lvgl, "py_lv_font_unscii_16")

___style_const_prop_id_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_WIDTH = ___style_const_prop_id_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_WIDTH")

___style_const_prop_id_MIN_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MIN_WIDTH = ___style_const_prop_id_MIN_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MIN_WIDTH")

___style_const_prop_id_MAX_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MAX_WIDTH = ___style_const_prop_id_MAX_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MAX_WIDTH")

___style_const_prop_id_HEIGHT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_HEIGHT = ___style_const_prop_id_HEIGHT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_HEIGHT")

___style_const_prop_id_MIN_HEIGHT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MIN_HEIGHT = ___style_const_prop_id_MIN_HEIGHT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MIN_HEIGHT")

___style_const_prop_id_MAX_HEIGHT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MAX_HEIGHT = ___style_const_prop_id_MAX_HEIGHT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MAX_HEIGHT")

___style_const_prop_id_X_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_X = ___style_const_prop_id_X_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_X")

___style_const_prop_id_Y_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_Y = ___style_const_prop_id_Y_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_Y")

___style_const_prop_id_ALIGN_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ALIGN = ___style_const_prop_id_ALIGN_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ALIGN")

___style_const_prop_id_TRANSFORM_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSFORM_WIDTH = ___style_const_prop_id_TRANSFORM_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSFORM_WIDTH")

___style_const_prop_id_TRANSFORM_HEIGHT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSFORM_HEIGHT = ___style_const_prop_id_TRANSFORM_HEIGHT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSFORM_HEIGHT")

___style_const_prop_id_TRANSLATE_X_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSLATE_X = ___style_const_prop_id_TRANSLATE_X_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSLATE_X")

___style_const_prop_id_TRANSLATE_Y_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSLATE_Y = ___style_const_prop_id_TRANSLATE_Y_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSLATE_Y")

___style_const_prop_id_TRANSFORM_ZOOM_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSFORM_ZOOM = ___style_const_prop_id_TRANSFORM_ZOOM_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSFORM_ZOOM")

___style_const_prop_id_TRANSFORM_ANGLE_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSFORM_ANGLE = ___style_const_prop_id_TRANSFORM_ANGLE_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSFORM_ANGLE")

___style_const_prop_id_TRANSFORM_PIVOT_X_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSFORM_PIVOT_X = ___style_const_prop_id_TRANSFORM_PIVOT_X_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSFORM_PIVOT_X")

___style_const_prop_id_TRANSFORM_PIVOT_Y_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSFORM_PIVOT_Y = ___style_const_prop_id_TRANSFORM_PIVOT_Y_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSFORM_PIVOT_Y")

___style_const_prop_id_PAD_TOP_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_PAD_TOP = ___style_const_prop_id_PAD_TOP_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_PAD_TOP")

___style_const_prop_id_PAD_BOTTOM_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_PAD_BOTTOM = ___style_const_prop_id_PAD_BOTTOM_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_PAD_BOTTOM")

___style_const_prop_id_PAD_LEFT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_PAD_LEFT = ___style_const_prop_id_PAD_LEFT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_PAD_LEFT")

___style_const_prop_id_PAD_RIGHT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_PAD_RIGHT = ___style_const_prop_id_PAD_RIGHT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_PAD_RIGHT")

___style_const_prop_id_PAD_ROW_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_PAD_ROW = ___style_const_prop_id_PAD_ROW_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_PAD_ROW")

___style_const_prop_id_PAD_COLUMN_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_PAD_COLUMN = ___style_const_prop_id_PAD_COLUMN_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_PAD_COLUMN")

___style_const_prop_id_MARGIN_TOP_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MARGIN_TOP = ___style_const_prop_id_MARGIN_TOP_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MARGIN_TOP")

___style_const_prop_id_MARGIN_BOTTOM_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MARGIN_BOTTOM = ___style_const_prop_id_MARGIN_BOTTOM_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MARGIN_BOTTOM")

___style_const_prop_id_MARGIN_LEFT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MARGIN_LEFT = ___style_const_prop_id_MARGIN_LEFT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MARGIN_LEFT")

___style_const_prop_id_MARGIN_RIGHT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_MARGIN_RIGHT = ___style_const_prop_id_MARGIN_RIGHT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_MARGIN_RIGHT")

___style_const_prop_id_BG_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_COLOR = ___style_const_prop_id_BG_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_COLOR")

___style_const_prop_id_BG_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_OPA = ___style_const_prop_id_BG_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_OPA")

___style_const_prop_id_BG_GRAD_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_GRAD_COLOR = ___style_const_prop_id_BG_GRAD_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_GRAD_COLOR")

___style_const_prop_id_BG_GRAD_DIR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_GRAD_DIR = ___style_const_prop_id_BG_GRAD_DIR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_GRAD_DIR")

___style_const_prop_id_BG_MAIN_STOP_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_MAIN_STOP = ___style_const_prop_id_BG_MAIN_STOP_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_MAIN_STOP")

___style_const_prop_id_BG_GRAD_STOP_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_GRAD_STOP = ___style_const_prop_id_BG_GRAD_STOP_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_GRAD_STOP")

___style_const_prop_id_BG_GRAD_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_GRAD = ___style_const_prop_id_BG_GRAD_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_GRAD")

___style_const_prop_id_BG_DITHER_MODE_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_DITHER_MODE = ___style_const_prop_id_BG_DITHER_MODE_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_DITHER_MODE")

___style_const_prop_id_BG_IMG_SRC_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_IMG_SRC = ___style_const_prop_id_BG_IMG_SRC_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_IMG_SRC")

___style_const_prop_id_BG_IMG_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_IMG_OPA = ___style_const_prop_id_BG_IMG_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_IMG_OPA")

___style_const_prop_id_BG_IMG_RECOLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_IMG_RECOLOR = ___style_const_prop_id_BG_IMG_RECOLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_IMG_RECOLOR")

___style_const_prop_id_BG_IMG_RECOLOR_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_IMG_RECOLOR_OPA = ___style_const_prop_id_BG_IMG_RECOLOR_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_IMG_RECOLOR_OPA")

___style_const_prop_id_BG_IMG_TILED_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BG_IMG_TILED = ___style_const_prop_id_BG_IMG_TILED_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BG_IMG_TILED")

___style_const_prop_id_BORDER_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BORDER_COLOR = ___style_const_prop_id_BORDER_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BORDER_COLOR")

___style_const_prop_id_BORDER_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BORDER_OPA = ___style_const_prop_id_BORDER_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BORDER_OPA")

___style_const_prop_id_BORDER_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BORDER_WIDTH = ___style_const_prop_id_BORDER_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BORDER_WIDTH")

___style_const_prop_id_BORDER_SIDE_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BORDER_SIDE = ___style_const_prop_id_BORDER_SIDE_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BORDER_SIDE")

___style_const_prop_id_BORDER_POST_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BORDER_POST = ___style_const_prop_id_BORDER_POST_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BORDER_POST")

___style_const_prop_id_OUTLINE_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_OUTLINE_WIDTH = ___style_const_prop_id_OUTLINE_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_OUTLINE_WIDTH")

___style_const_prop_id_OUTLINE_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_OUTLINE_COLOR = ___style_const_prop_id_OUTLINE_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_OUTLINE_COLOR")

___style_const_prop_id_OUTLINE_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_OUTLINE_OPA = ___style_const_prop_id_OUTLINE_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_OUTLINE_OPA")

___style_const_prop_id_OUTLINE_PAD_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_OUTLINE_PAD = ___style_const_prop_id_OUTLINE_PAD_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_OUTLINE_PAD")

___style_const_prop_id_SHADOW_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_SHADOW_WIDTH = ___style_const_prop_id_SHADOW_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_SHADOW_WIDTH")

___style_const_prop_id_SHADOW_OFS_X_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_SHADOW_OFS_X = ___style_const_prop_id_SHADOW_OFS_X_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_SHADOW_OFS_X")

___style_const_prop_id_SHADOW_OFS_Y_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_SHADOW_OFS_Y = ___style_const_prop_id_SHADOW_OFS_Y_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_SHADOW_OFS_Y")

___style_const_prop_id_SHADOW_SPREAD_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_SHADOW_SPREAD = ___style_const_prop_id_SHADOW_SPREAD_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_SHADOW_SPREAD")

___style_const_prop_id_SHADOW_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_SHADOW_COLOR = ___style_const_prop_id_SHADOW_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_SHADOW_COLOR")

___style_const_prop_id_SHADOW_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_SHADOW_OPA = ___style_const_prop_id_SHADOW_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_SHADOW_OPA")

___style_const_prop_id_IMG_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_IMG_OPA = ___style_const_prop_id_IMG_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_IMG_OPA")

___style_const_prop_id_IMG_RECOLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_IMG_RECOLOR = ___style_const_prop_id_IMG_RECOLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_IMG_RECOLOR")

___style_const_prop_id_IMG_RECOLOR_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_IMG_RECOLOR_OPA = ___style_const_prop_id_IMG_RECOLOR_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_IMG_RECOLOR_OPA")

___style_const_prop_id_LINE_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LINE_WIDTH = ___style_const_prop_id_LINE_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LINE_WIDTH")

___style_const_prop_id_LINE_DASH_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LINE_DASH_WIDTH = ___style_const_prop_id_LINE_DASH_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LINE_DASH_WIDTH")

___style_const_prop_id_LINE_DASH_GAP_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LINE_DASH_GAP = ___style_const_prop_id_LINE_DASH_GAP_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LINE_DASH_GAP")

___style_const_prop_id_LINE_ROUNDED_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LINE_ROUNDED = ___style_const_prop_id_LINE_ROUNDED_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LINE_ROUNDED")

___style_const_prop_id_LINE_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LINE_COLOR = ___style_const_prop_id_LINE_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LINE_COLOR")

___style_const_prop_id_LINE_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LINE_OPA = ___style_const_prop_id_LINE_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LINE_OPA")

___style_const_prop_id_ARC_WIDTH_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ARC_WIDTH = ___style_const_prop_id_ARC_WIDTH_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ARC_WIDTH")

___style_const_prop_id_ARC_ROUNDED_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ARC_ROUNDED = ___style_const_prop_id_ARC_ROUNDED_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ARC_ROUNDED")

___style_const_prop_id_ARC_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ARC_COLOR = ___style_const_prop_id_ARC_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ARC_COLOR")

___style_const_prop_id_ARC_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ARC_OPA = ___style_const_prop_id_ARC_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ARC_OPA")

___style_const_prop_id_ARC_IMG_SRC_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ARC_IMG_SRC = ___style_const_prop_id_ARC_IMG_SRC_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ARC_IMG_SRC")

___style_const_prop_id_TEXT_COLOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_COLOR = ___style_const_prop_id_TEXT_COLOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_COLOR")

___style_const_prop_id_TEXT_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_OPA = ___style_const_prop_id_TEXT_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_OPA")

___style_const_prop_id_TEXT_FONT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_FONT = ___style_const_prop_id_TEXT_FONT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_FONT")

___style_const_prop_id_TEXT_LETTER_SPACE_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_LETTER_SPACE = ___style_const_prop_id_TEXT_LETTER_SPACE_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_LETTER_SPACE")

___style_const_prop_id_TEXT_LINE_SPACE_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_LINE_SPACE = ___style_const_prop_id_TEXT_LINE_SPACE_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_LINE_SPACE")

___style_const_prop_id_TEXT_DECOR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_DECOR = ___style_const_prop_id_TEXT_DECOR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_DECOR")

___style_const_prop_id_TEXT_ALIGN_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TEXT_ALIGN = ___style_const_prop_id_TEXT_ALIGN_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TEXT_ALIGN")

___style_const_prop_id_RADIUS_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_RADIUS = ___style_const_prop_id_RADIUS_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_RADIUS")

___style_const_prop_id_CLIP_CORNER_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_CLIP_CORNER = ___style_const_prop_id_CLIP_CORNER_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_CLIP_CORNER")

___style_const_prop_id_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_OPA = ___style_const_prop_id_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_OPA")

___style_const_prop_id_COLOR_FILTER_DSC_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_COLOR_FILTER_DSC = ___style_const_prop_id_COLOR_FILTER_DSC_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_COLOR_FILTER_DSC")

___style_const_prop_id_COLOR_FILTER_OPA_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_COLOR_FILTER_OPA = ___style_const_prop_id_COLOR_FILTER_OPA_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_COLOR_FILTER_OPA")

___style_const_prop_id_ANIM_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ANIM = ___style_const_prop_id_ANIM_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ANIM")

___style_const_prop_id_ANIM_TIME_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ANIM_TIME = ___style_const_prop_id_ANIM_TIME_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ANIM_TIME")

___style_const_prop_id_ANIM_SPEED_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_ANIM_SPEED = ___style_const_prop_id_ANIM_SPEED_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_ANIM_SPEED")

___style_const_prop_id_TRANSITION_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_TRANSITION = ___style_const_prop_id_TRANSITION_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_TRANSITION")

___style_const_prop_id_BLEND_MODE_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BLEND_MODE = ___style_const_prop_id_BLEND_MODE_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BLEND_MODE")

___style_const_prop_id_LAYOUT_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_LAYOUT = ___style_const_prop_id_LAYOUT_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_LAYOUT")

___style_const_prop_id_BASE_DIR_pointer = _ctypes.POINTER(style_prop_t)
_style_const_prop_id_BASE_DIR = ___style_const_prop_id_BASE_DIR_pointer.in_dll(_lib_lvgl, "py__lv_style_const_prop_id_BASE_DIR")

__style_const_prop_id_inv_pointer = _ctypes.POINTER(style_prop_t)
style_const_prop_id_inv = __style_const_prop_id_inv_pointer.in_dll(_lib_lvgl, "py_lv_style_const_prop_id_inv")  # NOQA

_lib_lvgl.py_lv_init.argtypes = __CArgList()
_lib_lvgl.py_lv_init.restype = None


def init() -> None:

    _lib_lvgl.py_lv_init()


_lib_lvgl.py_lv_is_initialized.argtypes = __CArgList()
_lib_lvgl.py_lv_is_initialized.restype = bool_t


def is_initialized() -> bool_t:

    res = _lib_lvgl.py_lv_is_initialized()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_is_initialized.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_is_initialized.restype)
    )


_lib_lvgl.py_lv_mem_init.argtypes = __CArgList()
_lib_lvgl.py_lv_mem_init.restype = None


def mem_init() -> None:

    _lib_lvgl.py_lv_mem_init()


_lib_lvgl.py_lv_mem_deinit.argtypes = __CArgList()
_lib_lvgl.py_lv_mem_deinit.restype = None


def mem_deinit() -> None:

    _lib_lvgl.py_lv_mem_deinit()


_lib_lvgl.py_lv_mem_add_pool.argtypes = __CArgList(
    mem=void_t,
    bytes=size_t
)
_lib_lvgl.py_lv_mem_add_pool.restype = mem_pool_t


def mem_add_pool(
    mem: void_t,
    bytes: _type_size_t
) -> mem_pool_t:
    mem = _convert_to_ctype(
        mem, 
        _lib_lvgl.py_lv_mem_add_pool.argtypes.mem
    )

    bytes = _convert_to_ctype(
        bytes, 
        _lib_lvgl.py_lv_mem_add_pool.argtypes.bytes
    )

    res = _lib_lvgl.py_lv_mem_add_pool(mem, bytes)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_mem_add_pool.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_mem_add_pool.restype)
    )


_lib_lvgl.py_lv_mem_remove_pool.argtypes = __CArgList(
    pool=mem_pool_t
)
_lib_lvgl.py_lv_mem_remove_pool.restype = None


def mem_remove_pool(pool: mem_pool_t) -> None:
    pool = _convert_to_ctype(
        pool, 
        _lib_lvgl.py_lv_mem_remove_pool.argtypes.pool
    )

    _lib_lvgl.py_lv_mem_remove_pool(pool)


_lib_lvgl.py_lv_malloc.argtypes = __CArgList(
    size=size_t
)
_lib_lvgl.py_lv_malloc.restype = void_t


def malloc(size: _type_size_t) -> void_t:
    size = _convert_to_ctype(
        size, 
        _lib_lvgl.py_lv_malloc.argtypes.size
    )

    res = _lib_lvgl.py_lv_malloc(size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_malloc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_malloc.restype)
    )


_lib_lvgl.py_lv_free.argtypes = __CArgList(
    data=void_t
)
_lib_lvgl.py_lv_free.restype = None


def free(data: void_t) -> None:
    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py_lv_free.argtypes.data
    )

    _lib_lvgl.py_lv_free(data)


_lib_lvgl.py_lv_realloc.argtypes = __CArgList(
    data_p=void_t,
    new_size=size_t
)
_lib_lvgl.py_lv_realloc.restype = void_t


def realloc(
    data_p: void_t,
    new_size: _type_size_t
) -> void_t:
    data_p = _convert_to_ctype(
        data_p, 
        _lib_lvgl.py_lv_realloc.argtypes.data_p
    )

    new_size = _convert_to_ctype(
        new_size, 
        _lib_lvgl.py_lv_realloc.argtypes.new_size
    )

    res = _lib_lvgl.py_lv_realloc(data_p, new_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_realloc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_realloc.restype)
    )


_lib_lvgl.py_lv_malloc_core.argtypes = __CArgList(
    size=size_t
)
_lib_lvgl.py_lv_malloc_core.restype = void_t


def malloc_core(size: _type_size_t) -> void_t:
    size = _convert_to_ctype(
        size, 
        _lib_lvgl.py_lv_malloc_core.argtypes.size
    )

    res = _lib_lvgl.py_lv_malloc_core(size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_malloc_core.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_malloc_core.restype)
    )


_lib_lvgl.py_lv_free_core.argtypes = __CArgList(
    p=void_t
)
_lib_lvgl.py_lv_free_core.restype = None


def free_core(p: void_t) -> None:
    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_free_core.argtypes.p
    )

    _lib_lvgl.py_lv_free_core(p)


_lib_lvgl.py_lv_realloc_core.argtypes = __CArgList(
    p=void_t,
    new_size=size_t
)
_lib_lvgl.py_lv_realloc_core.restype = void_t


def realloc_core(
    p: void_t,
    new_size: _type_size_t
) -> void_t:
    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_realloc_core.argtypes.p
    )

    new_size = _convert_to_ctype(
        new_size, 
        _lib_lvgl.py_lv_realloc_core.argtypes.new_size
    )

    res = _lib_lvgl.py_lv_realloc_core(p, new_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_realloc_core.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_realloc_core.restype)
    )


_lib_lvgl.py_lv_mem_monitor_core.argtypes = __CArgList(
    mon_p=_ctypes.POINTER(mem_monitor_t)
)
_lib_lvgl.py_lv_mem_monitor_core.restype = None


def mem_monitor_core(mon_p: mem_monitor_t) -> None:
    mon_p = _convert_to_ctype(
        mon_p, 
        _lib_lvgl.py_lv_mem_monitor_core.argtypes.mon_p
    )

    _lib_lvgl.py_lv_mem_monitor_core(mon_p)


_lib_lvgl.py_lv_mem_test_core.argtypes = __CArgList()
_lib_lvgl.py_lv_mem_test_core.restype = res_t


def mem_test_core() -> res_t:

    res = _lib_lvgl.py_lv_mem_test_core()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_mem_test_core.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_mem_test_core.restype)
    )


_lib_lvgl.py_lv_mem_test.argtypes = __CArgList()
_lib_lvgl.py_lv_mem_test.restype = res_t


def mem_test() -> res_t:

    res = _lib_lvgl.py_lv_mem_test()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_mem_test.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_mem_test.restype)
    )


_lib_lvgl.py_lv_mem_monitor.argtypes = __CArgList(
    mon_p=_ctypes.POINTER(mem_monitor_t)
)
_lib_lvgl.py_lv_mem_monitor.restype = None


def mem_monitor(mon_p: mem_monitor_t) -> None:
    mon_p = _convert_to_ctype(
        mon_p, 
        _lib_lvgl.py_lv_mem_monitor.argtypes.mon_p
    )

    _lib_lvgl.py_lv_mem_monitor(mon_p)


_lib_lvgl.py_lv_memcpy.argtypes = __CArgList(
    dst=void_t,
    src=void_t,
    len=size_t
)
_lib_lvgl.py_lv_memcpy.restype = void_t


def memcpy(
    dst: void_t,
    src: void_t,
    len: _type_size_t
) -> void_t:
    dst = _convert_to_ctype(
        dst, 
        _lib_lvgl.py_lv_memcpy.argtypes.dst
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_memcpy.argtypes.src
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py_lv_memcpy.argtypes.len
    )

    res = _lib_lvgl.py_lv_memcpy(dst, src, len)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_memcpy.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_memcpy.restype)
    )


_lib_lvgl.py_lv_memset.argtypes = __CArgList(
    dst=void_t,
    v=uint8_t,
    len=size_t
)
_lib_lvgl.py_lv_memset.restype = None


def memset(
    dst: void_t,
    v: _type_uint8_t,
    len: _type_size_t
) -> None:
    dst = _convert_to_ctype(
        dst, 
        _lib_lvgl.py_lv_memset.argtypes.dst
    )

    v = _convert_to_ctype(
        v, 
        _lib_lvgl.py_lv_memset.argtypes.v
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py_lv_memset.argtypes.len
    )

    _lib_lvgl.py_lv_memset(dst, v, len)


_lib_lvgl.py_lv_memzero.argtypes = __CArgList(
    dst=void_t,
    len=size_t
)
_lib_lvgl.py_lv_memzero.restype = None


def memzero(dst: void_t, len: _type_size_t) -> None:
    dst = _convert_to_ctype(
        dst, 
        _lib_lvgl.py_lv_memzero.argtypes.dst
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py_lv_memzero.argtypes.len
    )

    _lib_lvgl.py_lv_memzero(dst, len)


_lib_lvgl.py_lv_strlen.argtypes = __CArgList(
    str=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_strlen.restype = size_t


def strlen(str: _type_char_t) -> size_t:
    str = _convert_to_ctype(
        str, 
        _lib_lvgl.py_lv_strlen.argtypes.str
    )

    res = _lib_lvgl.py_lv_strlen(str)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_strlen.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_strlen.restype)
    )


_lib_lvgl.py_lv_strncpy.argtypes = __CArgList(
    dst=_ctypes.POINTER(char_t),
    src=_ctypes.POINTER(char_t),
    dest_size=size_t
)
_lib_lvgl.py_lv_strncpy.restype = _ctypes.POINTER(char_t)


def strncpy(
    dst: _type_char_t,
    src: _type_char_t,
    dest_size: _type_size_t
) -> char_t:
    dst = _convert_to_ctype(
        dst, 
        _lib_lvgl.py_lv_strncpy.argtypes.dst
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_strncpy.argtypes.src
    )

    dest_size = _convert_to_ctype(
        dest_size, 
        _lib_lvgl.py_lv_strncpy.argtypes.dest_size
    )

    res = _lib_lvgl.py_lv_strncpy(dst, src, dest_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_strncpy.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_strncpy.restype)
    )


_lib_lvgl.py_lv_strcpy.argtypes = __CArgList(
    dst=_ctypes.POINTER(char_t),
    src=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_strcpy.restype = _ctypes.POINTER(char_t)


def strcpy(
    dst: _type_char_t,
    src: _type_char_t
) -> char_t:
    dst = _convert_to_ctype(
        dst, 
        _lib_lvgl.py_lv_strcpy.argtypes.dst
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_strcpy.argtypes.src
    )

    res = _lib_lvgl.py_lv_strcpy(dst, src)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_strcpy.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_strcpy.restype)
    )


_lib_lvgl.py_lv_log_register_print_cb.argtypes = __CArgList(
    print_cb=log_print_g_cb_t
)
_lib_lvgl.py_lv_log_register_print_cb.restype = None


_log_callback_storage = {}


def _log_weakref_callback(ref):
    if ref in _log_callback_storage:
        del _log_callback_storage[ref]


def log_register_print_cb(
    print_cb: log_print_g_cb_t
) -> None:
    if inspect.ismethod(print_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': print_cb.__hash__}
        )
        ref = weakmethod(print_cb, _log_weakref_callback)
    elif inspect.isfunction(print_cb):
        ref = weakref.ref(print_cb, _log_weakref_callback)
    else:
        raise TypeError

    if ref not in _log_callback_storage:
        print_cb = log_print_g_cb_t(print_cb)
        _log_callback_storage[ref] = print_cb
    else:
        print_cb = _log_callback_storage[ref]

    _lib_lvgl.py_lv_log_register_print_cb(print_cb)


_lib_lvgl.py_lv_tick_inc.argtypes = __CArgList(
    tick_period=uint32_t
)
_lib_lvgl.py_lv_tick_inc.restype = None


def tick_inc(tick_period: _type_uint32_t) -> None:
    tick_period = _convert_to_ctype(
        tick_period, 
        _lib_lvgl.py_lv_tick_inc.argtypes.tick_period
    )

    _lib_lvgl.py_lv_tick_inc(tick_period)


_lib_lvgl.py_lv_tick_get.argtypes = __CArgList()
_lib_lvgl.py_lv_tick_get.restype = uint32_t


def tick_get() -> uint32_t:

    res = _lib_lvgl.py_lv_tick_get()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tick_get.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tick_get.restype)
    )


_lib_lvgl.py_lv_tick_elaps.argtypes = __CArgList(
    prev_tick=uint32_t
)
_lib_lvgl.py_lv_tick_elaps.restype = uint32_t


def tick_elaps(prev_tick: _type_uint32_t) -> uint32_t:
    prev_tick = _convert_to_ctype(
        prev_tick, 
        _lib_lvgl.py_lv_tick_elaps.argtypes.prev_tick
    )

    res = _lib_lvgl.py_lv_tick_elaps(prev_tick)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tick_elaps.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tick_elaps.restype)
    )


_lib_lvgl.py__lv_timer_core_init.argtypes = __CArgList()
_lib_lvgl.py__lv_timer_core_init.restype = None


def _timer_core_init() -> None:

    _lib_lvgl.py__lv_timer_core_init()


_lib_lvgl.py_lv_timer_handler.argtypes = __CArgList()
_lib_lvgl.py_lv_timer_handler.restype = uint32_t


def timer_handler() -> uint32_t:

    res = _lib_lvgl.py_lv_timer_handler()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_handler.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_handler.restype)
    )


_lib_lvgl.py_lv_timer_handler_run_in_period.argtypes = __CArgList(
    period=uint32_t
)
_lib_lvgl.py_lv_timer_handler_run_in_period.restype = uint32_t


def timer_handler_run_in_period(
    period: _type_uint32_t
) -> uint32_t:
    period = _convert_to_ctype(
        period, 
        _lib_lvgl.py_lv_timer_handler_run_in_period.argtypes.period
    )

    res = _lib_lvgl.py_lv_timer_handler_run_in_period(period)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_handler_run_in_period.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_handler_run_in_period.restype)
    )


_lib_lvgl.py_lv_timer_periodic_handler.argtypes = __CArgList()
_lib_lvgl.py_lv_timer_periodic_handler.restype = None


def timer_periodic_handler() -> None:

    _lib_lvgl.py_lv_timer_periodic_handler()


_lib_lvgl.py_lv_timer_create_basic.argtypes = __CArgList()
_lib_lvgl.py_lv_timer_create_basic.restype = _ctypes.POINTER(timer_t)


def timer_create_basic() -> timer_t:

    res = _lib_lvgl.py_lv_timer_create_basic()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_create_basic.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_create_basic.restype)
    )


_lib_lvgl.py_lv_timer_create.argtypes = __CArgList(
    timer_xcb=timer_cb_t,
    period=uint32_t,
    user_data=void_t
)
_lib_lvgl.py_lv_timer_create.restype = _ctypes.POINTER(timer_t)


_timer_callback_storage = {}


def _timer_weakref_callback(ref):
    if ref in _timer_callback_storage:
        del _timer_callback_storage[ref]


def timer_create(
    timer_xcb: timer_cb_t,
    period: _type_uint32_t,
    user_data: void_t
) -> timer_t:
    if inspect.ismethod(timer_xcb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': timer_xcb.__hash__}
        )
        ref = weakmethod(timer_xcb, _timer_weakref_callback)
    elif inspect.isfunction(timer_xcb):
        ref = weakref.ref(timer_xcb, _timer_weakref_callback)
    else:
        raise TypeError

    if ref not in _timer_callback_storage:
        timer_xcb = timer_cb_t(timer_xcb)
        _timer_callback_storage[ref] = timer_xcb
    else:
        timer_xcb = _timer_callback_storage[ref]

    period = _convert_to_ctype(
        period, 
        _lib_lvgl.py_lv_timer_create.argtypes.period
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_timer_create.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_timer_create(timer_xcb, period, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_create.restype)
    )


_lib_lvgl.py_lv_timer_del.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_del.restype = None


def timer_del(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_del.argtypes.timer
    )

    _lib_lvgl.py_lv_timer_del(timer)


_lib_lvgl.py_lv_timer_pause.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_pause.restype = None


def timer_pause(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_pause.argtypes.timer
    )

    _lib_lvgl.py_lv_timer_pause(timer)


_lib_lvgl.py_lv_timer_resume.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_resume.restype = None


def timer_resume(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_resume.argtypes.timer
    )

    _lib_lvgl.py_lv_timer_resume(timer)


_lib_lvgl.py_lv_timer_set_cb.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t),
    timer_cb=timer_cb_t
)
_lib_lvgl.py_lv_timer_set_cb.restype = None


def timer_set_cb(
    timer: timer_t,
    timer_cb: timer_cb_t
) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_set_cb.argtypes.timer
    )

    if inspect.ismethod(timer_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': timer_cb.__hash__}
        )
        ref = weakmethod(timer_cb, _timer_weakref_callback)
    elif inspect.isfunction(timer_cb):
        ref = weakref.ref(timer_cb, _timer_weakref_callback)
    else:
        raise TypeError

    if ref not in _timer_callback_storage:
        timer_cb = timer_cb_t(timer_cb)
        _timer_callback_storage[ref] = timer_cb
    else:
        timer_cb = _timer_callback_storage[ref]

    _lib_lvgl.py_lv_timer_set_cb(timer, timer_cb)


_lib_lvgl.py_lv_timer_set_period.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t),
    period=uint32_t
)
_lib_lvgl.py_lv_timer_set_period.restype = None


def timer_set_period(
    timer: timer_t,
    period: _type_uint32_t
) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_set_period.argtypes.timer
    )

    period = _convert_to_ctype(
        period, 
        _lib_lvgl.py_lv_timer_set_period.argtypes.period
    )

    _lib_lvgl.py_lv_timer_set_period(timer, period)


_lib_lvgl.py_lv_timer_ready.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_ready.restype = None


def timer_ready(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_ready.argtypes.timer
    )

    _lib_lvgl.py_lv_timer_ready(timer)


_lib_lvgl.py_lv_timer_set_repeat_count.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t),
    repeat_count=int32_t
)
_lib_lvgl.py_lv_timer_set_repeat_count.restype = None


def timer_set_repeat_count(
    timer: timer_t,
    repeat_count: _type_int32_t
) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_set_repeat_count.argtypes.timer
    )

    repeat_count = _convert_to_ctype(
        repeat_count, 
        _lib_lvgl.py_lv_timer_set_repeat_count.argtypes.repeat_count
    )

    _lib_lvgl.py_lv_timer_set_repeat_count(timer, repeat_count)


_lib_lvgl.py_lv_timer_reset.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_reset.restype = None


def timer_reset(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_reset.argtypes.timer
    )

    _lib_lvgl.py_lv_timer_reset(timer)


_lib_lvgl.py_lv_timer_enable.argtypes = __CArgList(
    en=bool_t
)
_lib_lvgl.py_lv_timer_enable.restype = None


def timer_enable(en: _type_bool_t) -> None:
    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_timer_enable.argtypes.en
    )

    _lib_lvgl.py_lv_timer_enable(en)


_lib_lvgl.py_lv_timer_get_idle.argtypes = __CArgList()
_lib_lvgl.py_lv_timer_get_idle.restype = uint8_t


def timer_get_idle() -> uint8_t:

    res = _lib_lvgl.py_lv_timer_get_idle()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_get_idle.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_get_idle.restype)
    )


_lib_lvgl.py_lv_timer_get_time_until_next.argtypes = __CArgList()
_lib_lvgl.py_lv_timer_get_time_until_next.restype = uint32_t


def timer_get_time_until_next() -> uint32_t:

    res = _lib_lvgl.py_lv_timer_get_time_until_next()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_get_time_until_next.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_get_time_until_next.restype)
    )


_lib_lvgl.py_lv_timer_get_next.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_get_next.restype = _ctypes.POINTER(timer_t)


def timer_get_next(timer: timer_t) -> timer_t:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_get_next.argtypes.timer
    )

    res = _lib_lvgl.py_lv_timer_get_next(timer)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_get_next.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_get_next.restype)
    )


_lib_lvgl.py_lv_timer_get_user_data.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_timer_get_user_data.restype = void_t


def timer_get_user_data(timer: timer_t) -> void_t:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_timer_get_user_data.argtypes.timer
    )

    res = _lib_lvgl.py_lv_timer_get_user_data(timer)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_timer_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_timer_get_user_data.restype)
    )


_lib_lvgl.py_lv_trigo_sin.argtypes = __CArgList(
    angle=int16_t
)
_lib_lvgl.py_lv_trigo_sin.restype = int32_t


def trigo_sin(angle: _type_int16_t) -> int32_t:
    angle = _convert_to_ctype(
        angle, 
        _lib_lvgl.py_lv_trigo_sin.argtypes.angle
    )

    res = _lib_lvgl.py_lv_trigo_sin(angle)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_trigo_sin.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_trigo_sin.restype)
    )


_lib_lvgl.py_lv_trigo_cos.argtypes = __CArgList(
    angle=int16_t
)
_lib_lvgl.py_lv_trigo_cos.restype = int32_t


def trigo_cos(angle: _type_int16_t) -> int32_t:
    angle = _convert_to_ctype(
        angle, 
        _lib_lvgl.py_lv_trigo_cos.argtypes.angle
    )

    res = _lib_lvgl.py_lv_trigo_cos(angle)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_trigo_cos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_trigo_cos.restype)
    )


_lib_lvgl.py_lv_cubic_bezier.argtypes = __CArgList(
    x=int32_t,
    x1=int32_t,
    y1=int32_t,
    x2=int32_t,
    y2=int32_t
)
_lib_lvgl.py_lv_cubic_bezier.restype = int32_t


def cubic_bezier(
    x: _type_int32_t,
    x1: _type_int32_t,
    y1: _type_int32_t,
    x2: _type_int32_t,
    y2: _type_int32_t
) -> int32_t:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_cubic_bezier.argtypes.x
    )

    x1 = _convert_to_ctype(
        x1, 
        _lib_lvgl.py_lv_cubic_bezier.argtypes.x1
    )

    y1 = _convert_to_ctype(
        y1, 
        _lib_lvgl.py_lv_cubic_bezier.argtypes.y1
    )

    x2 = _convert_to_ctype(
        x2, 
        _lib_lvgl.py_lv_cubic_bezier.argtypes.x2
    )

    y2 = _convert_to_ctype(
        y2, 
        _lib_lvgl.py_lv_cubic_bezier.argtypes.y2
    )

    res = _lib_lvgl.py_lv_cubic_bezier(x, x1, y1, x2, y2)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_cubic_bezier.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_cubic_bezier.restype)
    )


_lib_lvgl.py_lv_bezier3.argtypes = __CArgList(
    t=int32_t,
    u0=int32_t,
    u1=uint32_t,
    u2=int32_t,
    u3=int32_t
)
_lib_lvgl.py_lv_bezier3.restype = int32_t


def bezier3(
    t: _type_int32_t,
    u0: _type_int32_t,
    u1: _type_uint32_t,
    u2: _type_int32_t,
    u3: _type_int32_t
) -> int32_t:
    t = _convert_to_ctype(
        t, 
        _lib_lvgl.py_lv_bezier3.argtypes.t
    )

    u0 = _convert_to_ctype(
        u0, 
        _lib_lvgl.py_lv_bezier3.argtypes.u0
    )

    u1 = _convert_to_ctype(
        u1, 
        _lib_lvgl.py_lv_bezier3.argtypes.u1
    )

    u2 = _convert_to_ctype(
        u2, 
        _lib_lvgl.py_lv_bezier3.argtypes.u2
    )

    u3 = _convert_to_ctype(
        u3, 
        _lib_lvgl.py_lv_bezier3.argtypes.u3
    )

    res = _lib_lvgl.py_lv_bezier3(t, u0, u1, u2, u3)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bezier3.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bezier3.restype)
    )


_lib_lvgl.py_lv_atan2.argtypes = __CArgList(
    x=int_t,
    y=int_t
)
_lib_lvgl.py_lv_atan2.restype = uint16_t


def atan2(x: _type_int_t, y: _type_int_t) -> uint16_t:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_atan2.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_atan2.argtypes.y
    )

    res = _lib_lvgl.py_lv_atan2(x, y)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_atan2.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_atan2.restype)
    )


_lib_lvgl.py_lv_sqrt.argtypes = __CArgList(
    x=uint32_t,
    q=_ctypes.POINTER(sqrt_res_t),
    mask=uint32_t
)
_lib_lvgl.py_lv_sqrt.restype = None


def sqrt(
    x: _type_uint32_t,
    q: sqrt_res_t,
    mask: _type_uint32_t
) -> None:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_sqrt.argtypes.x
    )

    q = _convert_to_ctype(
        q, 
        _lib_lvgl.py_lv_sqrt.argtypes.q
    )

    mask = _convert_to_ctype(
        mask, 
        _lib_lvgl.py_lv_sqrt.argtypes.mask
    )

    _lib_lvgl.py_lv_sqrt(x, q, mask)


_lib_lvgl.py_lv_pow.argtypes = __CArgList(
    base=int64_t,
    exp=int8_t
)
_lib_lvgl.py_lv_pow.restype = int64_t


def pow(
    base: _type_int64_t,
    exp: _type_int8_t
) -> int64_t:
    base = _convert_to_ctype(
        base, 
        _lib_lvgl.py_lv_pow.argtypes.base
    )

    exp = _convert_to_ctype(
        exp, 
        _lib_lvgl.py_lv_pow.argtypes.exp
    )

    res = _lib_lvgl.py_lv_pow(base, exp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_pow.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_pow.restype)
    )


_lib_lvgl.py_lv_map.argtypes = __CArgList(
    x=int32_t,
    min_in=int32_t,
    max_in=int32_t,
    min_out=int32_t,
    max_out=int32_t
)
_lib_lvgl.py_lv_map.restype = int32_t


def map(
    x: _type_int32_t,
    min_in: _type_int32_t,
    max_in: _type_int32_t,
    min_out: _type_int32_t,
    max_out: _type_int32_t
) -> int32_t:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_map.argtypes.x
    )

    min_in = _convert_to_ctype(
        min_in, 
        _lib_lvgl.py_lv_map.argtypes.min_in
    )

    max_in = _convert_to_ctype(
        max_in, 
        _lib_lvgl.py_lv_map.argtypes.max_in
    )

    min_out = _convert_to_ctype(
        min_out, 
        _lib_lvgl.py_lv_map.argtypes.min_out
    )

    max_out = _convert_to_ctype(
        max_out, 
        _lib_lvgl.py_lv_map.argtypes.max_out
    )

    res = _lib_lvgl.py_lv_map(x, min_in, max_in, min_out, max_out)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_map.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_map.restype)
    )


_lib_lvgl.py_lv_rand.argtypes = __CArgList(
    min=uint32_t,
    max=uint32_t
)
_lib_lvgl.py_lv_rand.restype = uint32_t


def rand(
    min: _type_uint32_t,
    max: _type_uint32_t
) -> uint32_t:
    min = _convert_to_ctype(
        min, 
        _lib_lvgl.py_lv_rand.argtypes.min
    )

    max = _convert_to_ctype(
        max, 
        _lib_lvgl.py_lv_rand.argtypes.max
    )

    res = _lib_lvgl.py_lv_rand(min, max)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_rand.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_rand.restype)
    )


_lib_lvgl.py_lv_async_call.argtypes = __CArgList(
    async_xcb=async_cb_t,
    user_data=void_t
)
_lib_lvgl.py_lv_async_call.restype = res_t


_async_callback_storage = {}


def _async_weakref_callback(ref):
    if ref in _async_callback_storage:
        del _async_callback_storage[ref]


def async_call(
    async_xcb: async_cb_t,
    user_data: void_t
) -> res_t:
    if inspect.ismethod(async_xcb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': async_xcb.__hash__}
        )
        ref = weakmethod(async_xcb, _async_weakref_callback)
    elif inspect.isfunction(async_xcb):
        ref = weakref.ref(async_xcb, _async_weakref_callback)
    else:
        raise TypeError

    if ref not in _async_callback_storage:
        async_xcb = async_cb_t(async_xcb)
        _async_callback_storage[ref] = async_xcb
    else:
        async_xcb = _async_callback_storage[ref]

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_async_call.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_async_call(async_xcb, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_async_call.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_async_call.restype)
    )


_lib_lvgl.py_lv_async_call_cancel.argtypes = __CArgList(
    async_xcb=async_cb_t,
    user_data=void_t
)
_lib_lvgl.py_lv_async_call_cancel.restype = res_t


def async_call_cancel(
    async_xcb: async_cb_t,
    user_data: void_t
) -> res_t:
    if inspect.ismethod(async_xcb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': async_xcb.__hash__}
        )
        ref = weakmethod(async_xcb, _async_weakref_callback)
    elif inspect.isfunction(async_xcb):
        ref = weakref.ref(async_xcb, _async_weakref_callback)
    else:
        raise TypeError

    if ref not in _async_callback_storage:
        async_xcb = async_cb_t(async_xcb)
        _async_callback_storage[ref] = async_xcb
    else:
        async_xcb = _async_callback_storage[ref]

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_async_call_cancel.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_async_call_cancel(async_xcb, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_async_call_cancel.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_async_call_cancel.restype)
    )


_lib_lvgl.py__lv_anim_core_init.argtypes = __CArgList()
_lib_lvgl.py__lv_anim_core_init.restype = None


def _anim_core_init() -> None:

    _lib_lvgl.py__lv_anim_core_init()


_lib_lvgl.py_lv_anim_init.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_init.restype = None


def anim_init(a: anim_t) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_init.argtypes.a
    )

    _lib_lvgl.py_lv_anim_init(a)


_lib_lvgl.py_lv_anim_set_var.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    var=void_t
)
_lib_lvgl.py_lv_anim_set_var.restype = None


def anim_set_var(a: anim_t, var: void_t) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_var.argtypes.a
    )

    var = _convert_to_ctype(
        var, 
        _lib_lvgl.py_lv_anim_set_var.argtypes.var
    )

    _lib_lvgl.py_lv_anim_set_var(a, var)


_lib_lvgl.py_lv_anim_set_exec_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    exec_cb=anim_exec_xcb_t
)
_lib_lvgl.py_lv_anim_set_exec_cb.restype = None


_anim_callback_storage = {}


def _anim_weakref_callback(ref):
    if ref in _anim_callback_storage:
        del _anim_callback_storage[ref]


def anim_set_exec_cb(
    a: anim_t,
    exec_cb: anim_exec_xcb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_exec_cb.argtypes.a
    )

    if inspect.ismethod(exec_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': exec_cb.__hash__}
        )
        ref = weakmethod(exec_cb, _anim_weakref_callback)
    elif inspect.isfunction(exec_cb):
        ref = weakref.ref(exec_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        exec_cb = anim_exec_xcb_t(exec_cb)
        _anim_callback_storage[ref] = exec_cb
    else:
        exec_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_exec_cb(a, exec_cb)


_lib_lvgl.py_lv_anim_set_time.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    duration=uint32_t
)
_lib_lvgl.py_lv_anim_set_time.restype = None


def anim_set_time(
    a: anim_t,
    duration: _type_uint32_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_time.argtypes.a
    )

    duration = _convert_to_ctype(
        duration, 
        _lib_lvgl.py_lv_anim_set_time.argtypes.duration
    )

    _lib_lvgl.py_lv_anim_set_time(a, duration)


_lib_lvgl.py_lv_anim_set_delay.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    delay=uint32_t
)
_lib_lvgl.py_lv_anim_set_delay.restype = None


def anim_set_delay(
    a: anim_t,
    delay: _type_uint32_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_delay.argtypes.a
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_anim_set_delay.argtypes.delay
    )

    _lib_lvgl.py_lv_anim_set_delay(a, delay)


_lib_lvgl.py_lv_anim_set_values.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    start=int32_t,
    end=int32_t
)
_lib_lvgl.py_lv_anim_set_values.restype = None


def anim_set_values(
    a: anim_t,
    start: _type_int32_t,
    end: _type_int32_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_values.argtypes.a
    )

    start = _convert_to_ctype(
        start, 
        _lib_lvgl.py_lv_anim_set_values.argtypes.start
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_anim_set_values.argtypes.end
    )

    _lib_lvgl.py_lv_anim_set_values(a, start, end)


_lib_lvgl.py_lv_anim_set_custom_exec_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    exec_cb=anim_custom_exec_cb_t
)
_lib_lvgl.py_lv_anim_set_custom_exec_cb.restype = None


def anim_set_custom_exec_cb(
    a: anim_t,
    exec_cb: anim_custom_exec_cb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_custom_exec_cb.argtypes.a
    )

    if inspect.ismethod(exec_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': exec_cb.__hash__}
        )
        ref = weakmethod(exec_cb, _anim_weakref_callback)
    elif inspect.isfunction(exec_cb):
        ref = weakref.ref(exec_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        exec_cb = anim_custom_exec_cb_t(exec_cb)
        _anim_callback_storage[ref] = exec_cb
    else:
        exec_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_custom_exec_cb(a, exec_cb)


_lib_lvgl.py_lv_anim_set_path_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    path_cb=anim_path_cb_t
)
_lib_lvgl.py_lv_anim_set_path_cb.restype = None


def anim_set_path_cb(
    a: anim_t,
    path_cb: anim_path_cb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_path_cb.argtypes.a
    )

    if inspect.ismethod(path_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': path_cb.__hash__}
        )
        ref = weakmethod(path_cb, _anim_weakref_callback)
    elif inspect.isfunction(path_cb):
        ref = weakref.ref(path_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        path_cb = anim_path_cb_t(path_cb)
        _anim_callback_storage[ref] = path_cb
    else:
        path_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_path_cb(a, path_cb)


_lib_lvgl.py_lv_anim_set_start_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    start_cb=anim_start_cb_t
)
_lib_lvgl.py_lv_anim_set_start_cb.restype = None


def anim_set_start_cb(
    a: anim_t,
    start_cb: anim_start_cb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_start_cb.argtypes.a
    )

    if inspect.ismethod(start_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': start_cb.__hash__}
        )
        ref = weakmethod(start_cb, _anim_weakref_callback)
    elif inspect.isfunction(start_cb):
        ref = weakref.ref(start_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        start_cb = anim_start_cb_t(start_cb)
        _anim_callback_storage[ref] = start_cb
    else:
        start_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_start_cb(a, start_cb)


_lib_lvgl.py_lv_anim_set_get_value_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    get_value_cb=anim_get_value_cb_t
)
_lib_lvgl.py_lv_anim_set_get_value_cb.restype = None


def anim_set_get_value_cb(
    a: anim_t,
    get_value_cb: anim_get_value_cb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_get_value_cb.argtypes.a
    )

    if inspect.ismethod(get_value_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': get_value_cb.__hash__}
        )
        ref = weakmethod(get_value_cb, _anim_weakref_callback)
    elif inspect.isfunction(get_value_cb):
        ref = weakref.ref(get_value_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        get_value_cb = anim_get_value_cb_t(get_value_cb)
        _anim_callback_storage[ref] = get_value_cb
    else:
        get_value_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_get_value_cb(a, get_value_cb)


_lib_lvgl.py_lv_anim_set_ready_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    ready_cb=anim_ready_cb_t
)
_lib_lvgl.py_lv_anim_set_ready_cb.restype = None


def anim_set_ready_cb(
    a: anim_t,
    ready_cb: anim_ready_cb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_ready_cb.argtypes.a
    )

    if inspect.ismethod(ready_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': ready_cb.__hash__}
        )
        ref = weakmethod(ready_cb, _anim_weakref_callback)
    elif inspect.isfunction(ready_cb):
        ref = weakref.ref(ready_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        ready_cb = anim_ready_cb_t(ready_cb)
        _anim_callback_storage[ref] = ready_cb
    else:
        ready_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_ready_cb(a, ready_cb)


_lib_lvgl.py_lv_anim_set_deleted_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    deleted_cb=anim_deleted_cb_t
)
_lib_lvgl.py_lv_anim_set_deleted_cb.restype = None


def anim_set_deleted_cb(
    a: anim_t,
    deleted_cb: anim_deleted_cb_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_deleted_cb.argtypes.a
    )

    if inspect.ismethod(deleted_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': deleted_cb.__hash__}
        )
        ref = weakmethod(deleted_cb, _anim_weakref_callback)
    elif inspect.isfunction(deleted_cb):
        ref = weakref.ref(deleted_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        deleted_cb = anim_deleted_cb_t(deleted_cb)
        _anim_callback_storage[ref] = deleted_cb
    else:
        deleted_cb = _anim_callback_storage[ref]

    _lib_lvgl.py_lv_anim_set_deleted_cb(a, deleted_cb)


_lib_lvgl.py_lv_anim_set_playback_time.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    time=uint32_t
)
_lib_lvgl.py_lv_anim_set_playback_time.restype = None


def anim_set_playback_time(
    a: anim_t,
    time: _type_uint32_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_playback_time.argtypes.a
    )

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_anim_set_playback_time.argtypes.time
    )

    _lib_lvgl.py_lv_anim_set_playback_time(a, time)


_lib_lvgl.py_lv_anim_set_playback_delay.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    delay=uint32_t
)
_lib_lvgl.py_lv_anim_set_playback_delay.restype = None


def anim_set_playback_delay(
    a: anim_t,
    delay: _type_uint32_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_playback_delay.argtypes.a
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_anim_set_playback_delay.argtypes.delay
    )

    _lib_lvgl.py_lv_anim_set_playback_delay(a, delay)


_lib_lvgl.py_lv_anim_set_repeat_count.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    cnt=uint16_t
)
_lib_lvgl.py_lv_anim_set_repeat_count.restype = None


def anim_set_repeat_count(
    a: anim_t,
    cnt: _type_uint16_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_repeat_count.argtypes.a
    )

    cnt = _convert_to_ctype(
        cnt, 
        _lib_lvgl.py_lv_anim_set_repeat_count.argtypes.cnt
    )

    _lib_lvgl.py_lv_anim_set_repeat_count(a, cnt)


_lib_lvgl.py_lv_anim_set_repeat_delay.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    delay=uint32_t
)
_lib_lvgl.py_lv_anim_set_repeat_delay.restype = None


def anim_set_repeat_delay(
    a: anim_t,
    delay: _type_uint32_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_repeat_delay.argtypes.a
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_anim_set_repeat_delay.argtypes.delay
    )

    _lib_lvgl.py_lv_anim_set_repeat_delay(a, delay)


_lib_lvgl.py_lv_anim_set_early_apply.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    en=bool_t
)
_lib_lvgl.py_lv_anim_set_early_apply.restype = None


def anim_set_early_apply(
    a: anim_t,
    en: _type_bool_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_early_apply.argtypes.a
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_anim_set_early_apply.argtypes.en
    )

    _lib_lvgl.py_lv_anim_set_early_apply(a, en)


_lib_lvgl.py_lv_anim_set_user_data.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    user_data=void_t
)
_lib_lvgl.py_lv_anim_set_user_data.restype = None


def anim_set_user_data(
    a: anim_t,
    user_data: void_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_user_data.argtypes.a
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_anim_set_user_data.argtypes.user_data
    )

    _lib_lvgl.py_lv_anim_set_user_data(a, user_data)


_lib_lvgl.py_lv_anim_set_bezier3_param.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    x1=int16_t,
    y1=int16_t,
    x2=int16_t,
    y2=int16_t
)
_lib_lvgl.py_lv_anim_set_bezier3_param.restype = None


def anim_set_bezier3_param(
    a: anim_t,
    x1: _type_int16_t,
    y1: _type_int16_t,
    x2: _type_int16_t,
    y2: _type_int16_t
) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_set_bezier3_param.argtypes.a
    )

    x1 = _convert_to_ctype(
        x1, 
        _lib_lvgl.py_lv_anim_set_bezier3_param.argtypes.x1
    )

    y1 = _convert_to_ctype(
        y1, 
        _lib_lvgl.py_lv_anim_set_bezier3_param.argtypes.y1
    )

    x2 = _convert_to_ctype(
        x2, 
        _lib_lvgl.py_lv_anim_set_bezier3_param.argtypes.x2
    )

    y2 = _convert_to_ctype(
        y2, 
        _lib_lvgl.py_lv_anim_set_bezier3_param.argtypes.y2
    )

    _lib_lvgl.py_lv_anim_set_bezier3_param(a, x1, y1, x2, y2)


_lib_lvgl.py_lv_anim_start.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_start.restype = _ctypes.POINTER(anim_t)


def anim_start(a: anim_t) -> anim_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_start.argtypes.a
    )

    res = _lib_lvgl.py_lv_anim_start(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_start.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_start.restype)
    )


_lib_lvgl.py_lv_anim_get_delay.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_get_delay.restype = uint32_t


def anim_get_delay(a: anim_t) -> uint32_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_get_delay.argtypes.a
    )

    res = _lib_lvgl.py_lv_anim_get_delay(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_get_delay.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_get_delay.restype)
    )


_lib_lvgl.py_lv_anim_get_playtime.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_get_playtime.restype = uint32_t


def anim_get_playtime(a: anim_t) -> uint32_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_get_playtime.argtypes.a
    )

    res = _lib_lvgl.py_lv_anim_get_playtime(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_get_playtime.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_get_playtime.restype)
    )


_lib_lvgl.py_lv_anim_get_time.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_get_time.restype = uint32_t


def anim_get_time(a: anim_t) -> uint32_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_get_time.argtypes.a
    )

    res = _lib_lvgl.py_lv_anim_get_time(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_get_time.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_get_time.restype)
    )


_lib_lvgl.py_lv_anim_get_repeat_count.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_get_repeat_count.restype = uint16_t


def anim_get_repeat_count(a: anim_t) -> uint16_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_get_repeat_count.argtypes.a
    )

    res = _lib_lvgl.py_lv_anim_get_repeat_count(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_get_repeat_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_get_repeat_count.restype)
    )


_lib_lvgl.py_lv_anim_get_user_data.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_get_user_data.restype = void_t


def anim_get_user_data(a: anim_t) -> void_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_get_user_data.argtypes.a
    )

    res = _lib_lvgl.py_lv_anim_get_user_data(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_get_user_data.restype)
    )


_lib_lvgl.py_lv_anim_del.argtypes = __CArgList(
    var=void_t,
    exec_cb=anim_exec_xcb_t
)
_lib_lvgl.py_lv_anim_del.restype = bool_t


def anim_del(
    var: void_t,
    exec_cb: anim_exec_xcb_t
) -> bool_t:
    var = _convert_to_ctype(
        var, 
        _lib_lvgl.py_lv_anim_del.argtypes.var
    )

    if inspect.ismethod(exec_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': exec_cb.__hash__}
        )
        ref = weakmethod(exec_cb, _anim_weakref_callback)
    elif inspect.isfunction(exec_cb):
        ref = weakref.ref(exec_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        exec_cb = anim_exec_xcb_t(exec_cb)
        _anim_callback_storage[ref] = exec_cb
    else:
        exec_cb = _anim_callback_storage[ref]

    res = _lib_lvgl.py_lv_anim_del(var, exec_cb)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_del.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_del.restype)
    )


_lib_lvgl.py_lv_anim_del_all.argtypes = __CArgList()
_lib_lvgl.py_lv_anim_del_all.restype = None


def anim_del_all() -> None:

    _lib_lvgl.py_lv_anim_del_all()


_lib_lvgl.py_lv_anim_get.argtypes = __CArgList(
    var=void_t,
    exec_cb=anim_exec_xcb_t
)
_lib_lvgl.py_lv_anim_get.restype = _ctypes.POINTER(anim_t)


def anim_get(
    var: void_t,
    exec_cb: anim_exec_xcb_t
) -> anim_t:
    var = _convert_to_ctype(
        var, 
        _lib_lvgl.py_lv_anim_get.argtypes.var
    )

    if inspect.ismethod(exec_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': exec_cb.__hash__}
        )
        ref = weakmethod(exec_cb, _anim_weakref_callback)
    elif inspect.isfunction(exec_cb):
        ref = weakref.ref(exec_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        exec_cb = anim_exec_xcb_t(exec_cb)
        _anim_callback_storage[ref] = exec_cb
    else:
        exec_cb = _anim_callback_storage[ref]

    res = _lib_lvgl.py_lv_anim_get(var, exec_cb)
    
    for key, value in _anim_callback_storage.items():
        if value == res:
            return key()
        
    return None


_lib_lvgl.py_lv_anim_get_timer.argtypes = __CArgList()
_lib_lvgl.py_lv_anim_get_timer.restype = _ctypes.POINTER(_timer_t)


def anim_get_timer() -> _timer_t:

    res = _lib_lvgl.py_lv_anim_get_timer()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_get_timer.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_get_timer.restype)
    )


_lib_lvgl.py_lv_anim_custom_del.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    exec_cb=anim_custom_exec_cb_t
)
_lib_lvgl.py_lv_anim_custom_del.restype = bool_t


def anim_custom_del(
    a: anim_t,
    exec_cb: anim_custom_exec_cb_t
) -> bool_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_custom_del.argtypes.a
    )

    if inspect.ismethod(exec_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': exec_cb.__hash__}
        )
        ref = weakmethod(exec_cb, _anim_weakref_callback)
    elif inspect.isfunction(exec_cb):
        ref = weakref.ref(exec_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        exec_cb = anim_custom_exec_cb_t(exec_cb)
        _anim_callback_storage[ref] = exec_cb
    else:
        exec_cb = _anim_callback_storage[ref]

    res = _lib_lvgl.py_lv_anim_custom_del(a, exec_cb)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_custom_del.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_custom_del.restype)
    )


_lib_lvgl.py_lv_anim_custom_get.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t),
    exec_cb=anim_custom_exec_cb_t
)
_lib_lvgl.py_lv_anim_custom_get.restype = _ctypes.POINTER(anim_t)


def anim_custom_get(
    a: anim_t,
    exec_cb: anim_custom_exec_cb_t
) -> anim_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_custom_get.argtypes.a
    )

    if inspect.ismethod(exec_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': exec_cb.__hash__}
        )
        ref = weakmethod(exec_cb, _anim_weakref_callback)
    elif inspect.isfunction(exec_cb):
        ref = weakref.ref(exec_cb, _anim_weakref_callback)
    else:
        raise TypeError

    if ref not in _anim_callback_storage:
        exec_cb = anim_custom_exec_cb_t(exec_cb)
        _anim_callback_storage[ref] = exec_cb
    else:
        exec_cb = _anim_callback_storage[ref]

    res = _lib_lvgl.py_lv_anim_custom_get(a, exec_cb)
    
    for key, value in _anim_callback_storage.items():
        if value == res:
            return key()
        
    return None


_lib_lvgl.py_lv_anim_count_running.argtypes = __CArgList()
_lib_lvgl.py_lv_anim_count_running.restype = uint16_t


def anim_count_running() -> uint16_t:

    res = _lib_lvgl.py_lv_anim_count_running()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_count_running.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_count_running.restype)
    )


_lib_lvgl.py_lv_anim_speed_to_time.argtypes = __CArgList(
    speed=uint32_t,
    start=int32_t,
    end=int32_t
)
_lib_lvgl.py_lv_anim_speed_to_time.restype = uint32_t


def anim_speed_to_time(
    speed: _type_uint32_t,
    start: _type_int32_t,
    end: _type_int32_t
) -> uint32_t:
    speed = _convert_to_ctype(
        speed, 
        _lib_lvgl.py_lv_anim_speed_to_time.argtypes.speed
    )

    start = _convert_to_ctype(
        start, 
        _lib_lvgl.py_lv_anim_speed_to_time.argtypes.start
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_anim_speed_to_time.argtypes.end
    )

    res = _lib_lvgl.py_lv_anim_speed_to_time(speed, start, end)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_speed_to_time.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_speed_to_time.restype)
    )


_lib_lvgl.py_lv_anim_refr_now.argtypes = __CArgList()
_lib_lvgl.py_lv_anim_refr_now.restype = None


def anim_refr_now() -> None:

    _lib_lvgl.py_lv_anim_refr_now()


_lib_lvgl.py_lv_anim_path_linear.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_linear.restype = int32_t


def anim_path_linear(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_linear(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_linear.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_linear.restype)
    )


_lib_lvgl.py_lv_anim_path_ease_in.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_ease_in.restype = int32_t


def anim_path_ease_in(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_ease_in(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_ease_in.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_ease_in.restype)
    )


_lib_lvgl.py_lv_anim_path_ease_out.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_ease_out.restype = int32_t


def anim_path_ease_out(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_ease_out(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_ease_out.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_ease_out.restype)
    )


_lib_lvgl.py_lv_anim_path_ease_in_out.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_ease_in_out.restype = int32_t


def anim_path_ease_in_out(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_ease_in_out(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_ease_in_out.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_ease_in_out.restype)
    )


_lib_lvgl.py_lv_anim_path_overshoot.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_overshoot.restype = int32_t


def anim_path_overshoot(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_overshoot(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_overshoot.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_overshoot.restype)
    )


_lib_lvgl.py_lv_anim_path_bounce.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_bounce.restype = int32_t


def anim_path_bounce(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_bounce(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_bounce.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_bounce.restype)
    )


_lib_lvgl.py_lv_anim_path_step.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_step.restype = int32_t


def anim_path_step(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_step(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_step.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_step.restype)
    )


_lib_lvgl.py_lv_anim_path_custom_bezier3.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_path_custom_bezier3.restype = int32_t


def anim_path_custom_bezier3(a: anim_t) -> int32_t:

    res = _lib_lvgl.py_lv_anim_path_custom_bezier3(a)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_path_custom_bezier3.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_path_custom_bezier3.restype)
    )


_lib_lvgl.py_lv_anim_timeline_create.argtypes = __CArgList()
_lib_lvgl.py_lv_anim_timeline_create.restype = _ctypes.POINTER(anim_timeline_t)


def anim_timeline_create() -> anim_timeline_t:

    res = _lib_lvgl.py_lv_anim_timeline_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_timeline_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_timeline_create.restype)
    )


_lib_lvgl.py_lv_anim_timeline_del.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t)
)
_lib_lvgl.py_lv_anim_timeline_del.restype = None


def anim_timeline_del(at: anim_timeline_t) -> None:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_del.argtypes.at
    )

    _lib_lvgl.py_lv_anim_timeline_del(at)


_lib_lvgl.py_lv_anim_timeline_add.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t),
    start_time=uint32_t,
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_anim_timeline_add.restype = None


def anim_timeline_add(
    at: anim_timeline_t,
    start_time: _type_uint32_t,
    a: anim_t
) -> None:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_add.argtypes.at
    )

    start_time = _convert_to_ctype(
        start_time, 
        _lib_lvgl.py_lv_anim_timeline_add.argtypes.start_time
    )

    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_anim_timeline_add.argtypes.a
    )

    _lib_lvgl.py_lv_anim_timeline_add(at, start_time, a)


_lib_lvgl.py_lv_anim_timeline_start.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t)
)
_lib_lvgl.py_lv_anim_timeline_start.restype = uint32_t


def anim_timeline_start(at: anim_timeline_t) -> uint32_t:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_start.argtypes.at
    )

    res = _lib_lvgl.py_lv_anim_timeline_start(at)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_timeline_start.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_timeline_start.restype)
    )


_lib_lvgl.py_lv_anim_timeline_stop.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t)
)
_lib_lvgl.py_lv_anim_timeline_stop.restype = None


def anim_timeline_stop(at: anim_timeline_t) -> None:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_stop.argtypes.at
    )

    _lib_lvgl.py_lv_anim_timeline_stop(at)


_lib_lvgl.py_lv_anim_timeline_set_reverse.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t),
    reverse=bool_t
)
_lib_lvgl.py_lv_anim_timeline_set_reverse.restype = None


def anim_timeline_set_reverse(
    at: anim_timeline_t,
    reverse: _type_bool_t
) -> None:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_set_reverse.argtypes.at
    )

    reverse = _convert_to_ctype(
        reverse, 
        _lib_lvgl.py_lv_anim_timeline_set_reverse.argtypes.reverse
    )

    _lib_lvgl.py_lv_anim_timeline_set_reverse(at, reverse)


_lib_lvgl.py_lv_anim_timeline_set_progress.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t),
    progress=uint16_t
)
_lib_lvgl.py_lv_anim_timeline_set_progress.restype = None


def anim_timeline_set_progress(
    at: anim_timeline_t,
    progress: _type_uint16_t
) -> None:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_set_progress.argtypes.at
    )

    progress = _convert_to_ctype(
        progress, 
        _lib_lvgl.py_lv_anim_timeline_set_progress.argtypes.progress
    )

    _lib_lvgl.py_lv_anim_timeline_set_progress(at, progress)


_lib_lvgl.py_lv_anim_timeline_get_playtime.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t)
)
_lib_lvgl.py_lv_anim_timeline_get_playtime.restype = uint32_t


def anim_timeline_get_playtime(
    at: anim_timeline_t
) -> uint32_t:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_get_playtime.argtypes.at
    )

    res = _lib_lvgl.py_lv_anim_timeline_get_playtime(at)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_timeline_get_playtime.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_timeline_get_playtime.restype)
    )


_lib_lvgl.py_lv_anim_timeline_get_reverse.argtypes = __CArgList(
    at=_ctypes.POINTER(anim_timeline_t)
)
_lib_lvgl.py_lv_anim_timeline_get_reverse.restype = bool_t


def anim_timeline_get_reverse(
    at: anim_timeline_t
) -> bool_t:
    at = _convert_to_ctype(
        at, 
        _lib_lvgl.py_lv_anim_timeline_get_reverse.argtypes.at
    )

    res = _lib_lvgl.py_lv_anim_timeline_get_reverse(at)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_anim_timeline_get_reverse.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_anim_timeline_get_reverse.restype)
    )


_lib_lvgl.py_lv_area_set.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t),
    x1=coord_t,
    y1=coord_t,
    x2=coord_t,
    y2=coord_t
)
_lib_lvgl.py_lv_area_set.restype = None


def area_set(
    area_p: area_t,
    x1: coord_t,
    y1: coord_t,
    x2: coord_t,
    y2: coord_t
) -> None:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py_lv_area_set.argtypes.area_p
    )

    x1 = _convert_to_ctype(
        x1, 
        _lib_lvgl.py_lv_area_set.argtypes.x1
    )

    y1 = _convert_to_ctype(
        y1, 
        _lib_lvgl.py_lv_area_set.argtypes.y1
    )

    x2 = _convert_to_ctype(
        x2, 
        _lib_lvgl.py_lv_area_set.argtypes.x2
    )

    y2 = _convert_to_ctype(
        y2, 
        _lib_lvgl.py_lv_area_set.argtypes.y2
    )

    _lib_lvgl.py_lv_area_set(area_p, x1, y1, x2, y2)


_lib_lvgl.py_lv_area_copy.argtypes = __CArgList(
    dest=_ctypes.POINTER(area_t),
    src=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_area_copy.restype = None


def area_copy(dest: area_t, src: area_t) -> None:
    dest = _convert_to_ctype(
        dest, 
        _lib_lvgl.py_lv_area_copy.argtypes.dest
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_area_copy.argtypes.src
    )

    _lib_lvgl.py_lv_area_copy(dest, src)


_lib_lvgl.py_lv_area_get_width.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_area_get_width.restype = coord_t


def area_get_width(area_p: area_t) -> coord_t:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py_lv_area_get_width.argtypes.area_p
    )

    res = _lib_lvgl.py_lv_area_get_width(area_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_area_get_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_area_get_width.restype)
    )


_lib_lvgl.py_lv_area_get_height.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_area_get_height.restype = coord_t


def area_get_height(area_p: area_t) -> coord_t:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py_lv_area_get_height.argtypes.area_p
    )

    res = _lib_lvgl.py_lv_area_get_height(area_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_area_get_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_area_get_height.restype)
    )


_lib_lvgl.py_lv_area_set_width.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t),
    w=coord_t
)
_lib_lvgl.py_lv_area_set_width.restype = None


def area_set_width(area_p: area_t, w: coord_t) -> None:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py_lv_area_set_width.argtypes.area_p
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_area_set_width.argtypes.w
    )

    _lib_lvgl.py_lv_area_set_width(area_p, w)


_lib_lvgl.py_lv_area_set_height.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t),
    h=coord_t
)
_lib_lvgl.py_lv_area_set_height.restype = None


def area_set_height(
    area_p: area_t,
    h: coord_t
) -> None:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py_lv_area_set_height.argtypes.area_p
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_area_set_height.argtypes.h
    )

    _lib_lvgl.py_lv_area_set_height(area_p, h)


_lib_lvgl.py__lv_area_set_pos.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py__lv_area_set_pos.restype = None


def _area_set_pos(
    area_p: area_t,
    x: coord_t,
    y: coord_t
) -> None:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py__lv_area_set_pos.argtypes.area_p
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py__lv_area_set_pos.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py__lv_area_set_pos.argtypes.y
    )

    _lib_lvgl.py__lv_area_set_pos(area_p, x, y)


_lib_lvgl.py_lv_area_get_size.argtypes = __CArgList(
    area_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_area_get_size.restype = uint32_t


def area_get_size(area_p: area_t) -> uint32_t:
    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py_lv_area_get_size.argtypes.area_p
    )

    res = _lib_lvgl.py_lv_area_get_size(area_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_area_get_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_area_get_size.restype)
    )


_lib_lvgl.py_lv_area_increase.argtypes = __CArgList(
    area=_ctypes.POINTER(area_t),
    w_extra=coord_t,
    h_extra=coord_t
)
_lib_lvgl.py_lv_area_increase.restype = None


def area_increase(
    area: area_t,
    w_extra: coord_t,
    h_extra: coord_t
) -> None:
    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_area_increase.argtypes.area
    )

    w_extra = _convert_to_ctype(
        w_extra, 
        _lib_lvgl.py_lv_area_increase.argtypes.w_extra
    )

    h_extra = _convert_to_ctype(
        h_extra, 
        _lib_lvgl.py_lv_area_increase.argtypes.h_extra
    )

    _lib_lvgl.py_lv_area_increase(area, w_extra, h_extra)


_lib_lvgl.py_lv_area_move.argtypes = __CArgList(
    area=_ctypes.POINTER(area_t),
    x_ofs=coord_t,
    y_ofs=coord_t
)
_lib_lvgl.py_lv_area_move.restype = None


def area_move(
    area: area_t,
    x_ofs: coord_t,
    y_ofs: coord_t
) -> None:
    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_area_move.argtypes.area
    )

    x_ofs = _convert_to_ctype(
        x_ofs, 
        _lib_lvgl.py_lv_area_move.argtypes.x_ofs
    )

    y_ofs = _convert_to_ctype(
        y_ofs, 
        _lib_lvgl.py_lv_area_move.argtypes.y_ofs
    )

    _lib_lvgl.py_lv_area_move(area, x_ofs, y_ofs)


_lib_lvgl.py__lv_area_intersect.argtypes = __CArgList(
    res_p=_ctypes.POINTER(area_t),
    a1_p=_ctypes.POINTER(area_t),
    a2_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py__lv_area_intersect.restype = bool_t


def _area_intersect(
    res_p: area_t,
    a1_p: area_t,
    a2_p: area_t
) -> bool_t:
    res_p = _convert_to_ctype(
        res_p, 
        _lib_lvgl.py__lv_area_intersect.argtypes.res_p
    )

    a1_p = _convert_to_ctype(
        a1_p, 
        _lib_lvgl.py__lv_area_intersect.argtypes.a1_p
    )

    a2_p = _convert_to_ctype(
        a2_p, 
        _lib_lvgl.py__lv_area_intersect.argtypes.a2_p
    )

    res = _lib_lvgl.py__lv_area_intersect(res_p, a1_p, a2_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_area_intersect.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_area_intersect.restype)
    )


_lib_lvgl.py__lv_area_join.argtypes = __CArgList(
    a_res_p=_ctypes.POINTER(area_t),
    a1_p=_ctypes.POINTER(area_t),
    a2_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py__lv_area_join.restype = None


def _area_join(
    a_res_p: area_t,
    a1_p: area_t,
    a2_p: area_t
) -> None:
    a_res_p = _convert_to_ctype(
        a_res_p, 
        _lib_lvgl.py__lv_area_join.argtypes.a_res_p
    )

    a1_p = _convert_to_ctype(
        a1_p, 
        _lib_lvgl.py__lv_area_join.argtypes.a1_p
    )

    a2_p = _convert_to_ctype(
        a2_p, 
        _lib_lvgl.py__lv_area_join.argtypes.a2_p
    )

    _lib_lvgl.py__lv_area_join(a_res_p, a1_p, a2_p)


_lib_lvgl.py__lv_area_is_point_on.argtypes = __CArgList(
    a_p=_ctypes.POINTER(area_t),
    p_p=_ctypes.POINTER(point_t),
    radius=coord_t
)
_lib_lvgl.py__lv_area_is_point_on.restype = bool_t


def _area_is_point_on(
    a_p: area_t,
    p_p: point_t,
    radius: coord_t
) -> bool_t:
    a_p = _convert_to_ctype(
        a_p, 
        _lib_lvgl.py__lv_area_is_point_on.argtypes.a_p
    )

    p_p = _convert_to_ctype(
        p_p, 
        _lib_lvgl.py__lv_area_is_point_on.argtypes.p_p
    )

    radius = _convert_to_ctype(
        radius, 
        _lib_lvgl.py__lv_area_is_point_on.argtypes.radius
    )

    res = _lib_lvgl.py__lv_area_is_point_on(a_p, p_p, radius)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_area_is_point_on.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_area_is_point_on.restype)
    )


_lib_lvgl.py__lv_area_is_on.argtypes = __CArgList(
    a1_p=_ctypes.POINTER(area_t),
    a2_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py__lv_area_is_on.restype = bool_t


def _area_is_on(a1_p: area_t, a2_p: area_t) -> bool_t:
    a1_p = _convert_to_ctype(
        a1_p, 
        _lib_lvgl.py__lv_area_is_on.argtypes.a1_p
    )

    a2_p = _convert_to_ctype(
        a2_p, 
        _lib_lvgl.py__lv_area_is_on.argtypes.a2_p
    )

    res = _lib_lvgl.py__lv_area_is_on(a1_p, a2_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_area_is_on.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_area_is_on.restype)
    )


_lib_lvgl.py__lv_area_is_in.argtypes = __CArgList(
    ain_p=_ctypes.POINTER(area_t),
    aholder_p=_ctypes.POINTER(area_t),
    radius=coord_t
)
_lib_lvgl.py__lv_area_is_in.restype = bool_t


def _area_is_in(
    ain_p: area_t,
    aholder_p: area_t,
    radius: coord_t
) -> bool_t:
    ain_p = _convert_to_ctype(
        ain_p, 
        _lib_lvgl.py__lv_area_is_in.argtypes.ain_p
    )

    aholder_p = _convert_to_ctype(
        aholder_p, 
        _lib_lvgl.py__lv_area_is_in.argtypes.aholder_p
    )

    radius = _convert_to_ctype(
        radius, 
        _lib_lvgl.py__lv_area_is_in.argtypes.radius
    )

    res = _lib_lvgl.py__lv_area_is_in(ain_p, aholder_p, radius)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_area_is_in.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_area_is_in.restype)
    )


_lib_lvgl.py__lv_area_is_out.argtypes = __CArgList(
    aout_p=_ctypes.POINTER(area_t),
    aholder_p=_ctypes.POINTER(area_t),
    radius=coord_t
)
_lib_lvgl.py__lv_area_is_out.restype = bool_t


def _area_is_out(
    aout_p: area_t,
    aholder_p: area_t,
    radius: coord_t
) -> bool_t:
    aout_p = _convert_to_ctype(
        aout_p, 
        _lib_lvgl.py__lv_area_is_out.argtypes.aout_p
    )

    aholder_p = _convert_to_ctype(
        aholder_p, 
        _lib_lvgl.py__lv_area_is_out.argtypes.aholder_p
    )

    radius = _convert_to_ctype(
        radius, 
        _lib_lvgl.py__lv_area_is_out.argtypes.radius
    )

    res = _lib_lvgl.py__lv_area_is_out(aout_p, aholder_p, radius)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_area_is_out.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_area_is_out.restype)
    )


_lib_lvgl.py__lv_area_is_equal.argtypes = __CArgList(
    a=_ctypes.POINTER(area_t),
    b=_ctypes.POINTER(area_t)
)
_lib_lvgl.py__lv_area_is_equal.restype = bool_t


def _area_is_equal(a: area_t, b: area_t) -> bool_t:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py__lv_area_is_equal.argtypes.a
    )

    b = _convert_to_ctype(
        b, 
        _lib_lvgl.py__lv_area_is_equal.argtypes.b
    )

    res = _lib_lvgl.py__lv_area_is_equal(a, b)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_area_is_equal.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_area_is_equal.restype)
    )


_lib_lvgl.py_lv_area_align.argtypes = __CArgList(
    base=_ctypes.POINTER(area_t),
    to_align=_ctypes.POINTER(area_t),
    align=align_t,
    ofs_x=coord_t,
    ofs_y=coord_t
)
_lib_lvgl.py_lv_area_align.restype = None


def area_align(
    base: area_t,
    to_align: area_t,
    align: align_t,
    ofs_x: coord_t,
    ofs_y: coord_t
) -> None:
    base = _convert_to_ctype(
        base, 
        _lib_lvgl.py_lv_area_align.argtypes.base
    )

    to_align = _convert_to_ctype(
        to_align, 
        _lib_lvgl.py_lv_area_align.argtypes.to_align
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_area_align.argtypes.align
    )

    ofs_x = _convert_to_ctype(
        ofs_x, 
        _lib_lvgl.py_lv_area_align.argtypes.ofs_x
    )

    ofs_y = _convert_to_ctype(
        ofs_y, 
        _lib_lvgl.py_lv_area_align.argtypes.ofs_y
    )

    _lib_lvgl.py_lv_area_align(base, to_align, align, ofs_x, ofs_y)


_lib_lvgl.py_lv_point_transform.argtypes = __CArgList(
    p=_ctypes.POINTER(point_t),
    angle=int32_t,
    zoom=int32_t,
    pivot=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_point_transform.restype = None


def point_transform(
    p: point_t,
    angle: _type_int32_t,
    zoom: _type_int32_t,
    pivot: point_t
) -> None:
    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_point_transform.argtypes.p
    )

    angle = _convert_to_ctype(
        angle, 
        _lib_lvgl.py_lv_point_transform.argtypes.angle
    )

    zoom = _convert_to_ctype(
        zoom, 
        _lib_lvgl.py_lv_point_transform.argtypes.zoom
    )

    pivot = _convert_to_ctype(
        pivot, 
        _lib_lvgl.py_lv_point_transform.argtypes.pivot
    )

    _lib_lvgl.py_lv_point_transform(p, angle, zoom, pivot)


_lib_lvgl.py_lv_pct.argtypes = __CArgList(
    x=coord_t
)
_lib_lvgl.py_lv_pct.restype = coord_t


def pct(x: coord_t) -> coord_t:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_pct.argtypes.x
    )

    res = _lib_lvgl.py_lv_pct(x)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_pct.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_pct.restype)
    )


_lib_lvgl.py_lv_font_get_glyph_bitmap.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t),
    letter=uint32_t,
    buf_out=_ctypes.POINTER(uint8_t)
)
_lib_lvgl.py_lv_font_get_glyph_bitmap.restype = _ctypes.POINTER(uint8_t)


def font_get_glyph_bitmap(
    font: font_t,
    letter: _type_uint32_t,
    buf_out: _type_uint8_t
) -> uint8_t:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_get_glyph_bitmap.argtypes.font
    )

    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py_lv_font_get_glyph_bitmap.argtypes.letter
    )

    buf_out = _convert_to_ctype(
        buf_out, 
        _lib_lvgl.py_lv_font_get_glyph_bitmap.argtypes.buf_out
    )

    res = _lib_lvgl.py_lv_font_get_glyph_bitmap(font, letter, buf_out)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_get_glyph_bitmap.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_get_glyph_bitmap.restype)
    )


_lib_lvgl.py_lv_font_get_glyph_dsc.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t),
    dsc_out=_ctypes.POINTER(font_glyph_dsc_t),
    letter=uint32_t,
    letter_next=uint32_t
)
_lib_lvgl.py_lv_font_get_glyph_dsc.restype = bool_t


def font_get_glyph_dsc(
    font: font_t,
    dsc_out: font_glyph_dsc_t,
    letter: _type_uint32_t,
    letter_next: _type_uint32_t
) -> bool_t:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_get_glyph_dsc.argtypes.font
    )

    dsc_out = _convert_to_ctype(
        dsc_out, 
        _lib_lvgl.py_lv_font_get_glyph_dsc.argtypes.dsc_out
    )

    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py_lv_font_get_glyph_dsc.argtypes.letter
    )

    letter_next = _convert_to_ctype(
        letter_next, 
        _lib_lvgl.py_lv_font_get_glyph_dsc.argtypes.letter_next
    )

    res = _lib_lvgl.py_lv_font_get_glyph_dsc(font, dsc_out, letter, letter_next)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_get_glyph_dsc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_get_glyph_dsc.restype)
    )


_lib_lvgl.py_lv_font_get_glyph_width.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t),
    letter=uint32_t,
    letter_next=uint32_t
)
_lib_lvgl.py_lv_font_get_glyph_width.restype = uint16_t


def font_get_glyph_width(
    font: font_t,
    letter: _type_uint32_t,
    letter_next: _type_uint32_t
) -> uint16_t:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_get_glyph_width.argtypes.font
    )

    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py_lv_font_get_glyph_width.argtypes.letter
    )

    letter_next = _convert_to_ctype(
        letter_next, 
        _lib_lvgl.py_lv_font_get_glyph_width.argtypes.letter_next
    )

    res = _lib_lvgl.py_lv_font_get_glyph_width(font, letter, letter_next)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_get_glyph_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_get_glyph_width.restype)
    )


_lib_lvgl.py_lv_font_get_line_height.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t)
)
_lib_lvgl.py_lv_font_get_line_height.restype = coord_t


def font_get_line_height(font: font_t) -> coord_t:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_get_line_height.argtypes.font
    )

    res = _lib_lvgl.py_lv_font_get_line_height(font)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_get_line_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_get_line_height.restype)
    )


_lib_lvgl.py_lv_font_default.argtypes = __CArgList()
_lib_lvgl.py_lv_font_default.restype = _ctypes.POINTER(font_t)


def font_default() -> font_t:

    res = _lib_lvgl.py_lv_font_default()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_default.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_default.restype)
    )


_lib_lvgl.py_lv_color_format_get_size.argtypes = __CArgList(
    src_cf=color_format_t
)
_lib_lvgl.py_lv_color_format_get_size.restype = uint8_t


def color_format_get_size(
    src_cf: color_format_t
) -> uint8_t:
    src_cf = _convert_to_ctype(
        src_cf, 
        _lib_lvgl.py_lv_color_format_get_size.argtypes.src_cf
    )

    res = _lib_lvgl.py_lv_color_format_get_size(src_cf)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_format_get_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_format_get_size.restype)
    )


_lib_lvgl.py_lv_color_format_has_alpha.argtypes = __CArgList(
    src_cf=color_format_t
)
_lib_lvgl.py_lv_color_format_has_alpha.restype = bool_t


def color_format_has_alpha(
    src_cf: color_format_t
) -> bool_t:
    src_cf = _convert_to_ctype(
        src_cf, 
        _lib_lvgl.py_lv_color_format_has_alpha.argtypes.src_cf
    )

    res = _lib_lvgl.py_lv_color_format_has_alpha(src_cf)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_format_has_alpha.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_format_has_alpha.restype)
    )


_lib_lvgl.py_lv_color_to_32.argtypes = __CArgList(
    color=color_t,
    opa=opa_t
)
_lib_lvgl.py_lv_color_to_32.restype = color32_t


def color_to_32(color: color_t, opa: opa_t) -> color32_t:
    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_color_to_32.argtypes.color
    )

    opa = _convert_to_ctype(
        opa, 
        _lib_lvgl.py_lv_color_to_32.argtypes.opa
    )

    res = _lib_lvgl.py_lv_color_to_32(color, opa)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_to_32.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_to_32.restype)
    )


_lib_lvgl.py_lv_color_to_int.argtypes = __CArgList(
    c=color_t
)
_lib_lvgl.py_lv_color_to_int.restype = uint32_t


def color_to_int(c: color_t) -> uint32_t:
    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_color_to_int.argtypes.c
    )

    res = _lib_lvgl.py_lv_color_to_int(c)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_to_int.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_to_int.restype)
    )


_lib_lvgl.py_lv_color_from_int.argtypes = __CArgList(
    v=uint32_t
)
_lib_lvgl.py_lv_color_from_int.restype = color_t


def color_from_int(v: _type_uint32_t) -> color_t:
    v = _convert_to_ctype(
        v, 
        _lib_lvgl.py_lv_color_from_int.argtypes.v
    )

    res = _lib_lvgl.py_lv_color_from_int(v)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_from_int.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_from_int.restype)
    )


_lib_lvgl.py_lv_color_eq.argtypes = __CArgList(
    c1=color_t,
    c2=color_t
)
_lib_lvgl.py_lv_color_eq.restype = bool_t


def color_eq(c1: color_t, c2: color_t) -> bool_t:
    c1 = _convert_to_ctype(
        c1, 
        _lib_lvgl.py_lv_color_eq.argtypes.c1
    )

    c2 = _convert_to_ctype(
        c2, 
        _lib_lvgl.py_lv_color_eq.argtypes.c2
    )

    res = _lib_lvgl.py_lv_color_eq(c1, c2)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_eq.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_eq.restype)
    )


_lib_lvgl.py_lv_color32_eq.argtypes = __CArgList(
    c1=color32_t,
    c2=color32_t
)
_lib_lvgl.py_lv_color32_eq.restype = bool_t


def color32_eq(c1: color32_t, c2: color32_t) -> bool_t:
    c1 = _convert_to_ctype(
        c1, 
        _lib_lvgl.py_lv_color32_eq.argtypes.c1
    )

    c2 = _convert_to_ctype(
        c2, 
        _lib_lvgl.py_lv_color32_eq.argtypes.c2
    )

    res = _lib_lvgl.py_lv_color32_eq(c1, c2)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color32_eq.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color32_eq.restype)
    )


_lib_lvgl.py_lv_color_hex.argtypes = __CArgList(
    c=uint32_t
)
_lib_lvgl.py_lv_color_hex.restype = color_t


def color_hex(c: _type_uint32_t) -> color_t:
    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_color_hex.argtypes.c
    )

    res = _lib_lvgl.py_lv_color_hex(c)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_hex.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_hex.restype)
    )


_lib_lvgl.py_lv_color_make.argtypes = __CArgList(
    r=uint8_t,
    g=uint8_t,
    b=uint8_t
)
_lib_lvgl.py_lv_color_make.restype = color_t


def color_make(
    r: _type_uint8_t,
    g: _type_uint8_t,
    b: _type_uint8_t
) -> color_t:
    r = _convert_to_ctype(
        r, 
        _lib_lvgl.py_lv_color_make.argtypes.r
    )

    g = _convert_to_ctype(
        g, 
        _lib_lvgl.py_lv_color_make.argtypes.g
    )

    b = _convert_to_ctype(
        b, 
        _lib_lvgl.py_lv_color_make.argtypes.b
    )

    res = _lib_lvgl.py_lv_color_make(r, g, b)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_make.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_make.restype)
    )


_lib_lvgl.py_lv_color_hex3.argtypes = __CArgList(
    c=uint32_t
)
_lib_lvgl.py_lv_color_hex3.restype = color_t


def color_hex3(c: _type_uint32_t) -> color_t:
    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_color_hex3.argtypes.c
    )

    res = _lib_lvgl.py_lv_color_hex3(c)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_hex3.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_hex3.restype)
    )


_lib_lvgl.py_lv_color_to_u16.argtypes = __CArgList(
    color=color_t
)
_lib_lvgl.py_lv_color_to_u16.restype = uint16_t


def color_to_u16(color: color_t) -> uint16_t:
    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_color_to_u16.argtypes.color
    )

    res = _lib_lvgl.py_lv_color_to_u16(color)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_to_u16.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_to_u16.restype)
    )


_lib_lvgl.py_lv_color_to_u32.argtypes = __CArgList(
    color=color_t
)
_lib_lvgl.py_lv_color_to_u32.restype = uint32_t


def color_to_u32(color: color_t) -> uint32_t:
    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_color_to_u32.argtypes.color
    )

    res = _lib_lvgl.py_lv_color_to_u32(color)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_to_u32.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_to_u32.restype)
    )


_lib_lvgl.py_lv_color_16_16_mix.argtypes = __CArgList(
    c1=uint16_t,
    c2=uint16_t,
    mix=uint8_t
)
_lib_lvgl.py_lv_color_16_16_mix.restype = uint16_t


def color_16_16_mix(
    c1: _type_uint16_t,
    c2: _type_uint16_t,
    mix: _type_uint8_t
) -> uint16_t:
    c1 = _convert_to_ctype(
        c1, 
        _lib_lvgl.py_lv_color_16_16_mix.argtypes.c1
    )

    c2 = _convert_to_ctype(
        c2, 
        _lib_lvgl.py_lv_color_16_16_mix.argtypes.c2
    )

    mix = _convert_to_ctype(
        mix, 
        _lib_lvgl.py_lv_color_16_16_mix.argtypes.mix
    )

    res = _lib_lvgl.py_lv_color_16_16_mix(c1, c2, mix)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_16_16_mix.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_16_16_mix.restype)
    )


_lib_lvgl.py_lv_color_lighten.argtypes = __CArgList(
    c=color_t,
    lvl=opa_t
)
_lib_lvgl.py_lv_color_lighten.restype = color_t


def color_lighten(c: color_t, lvl: opa_t) -> color_t:
    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_color_lighten.argtypes.c
    )

    lvl = _convert_to_ctype(
        lvl, 
        _lib_lvgl.py_lv_color_lighten.argtypes.lvl
    )

    res = _lib_lvgl.py_lv_color_lighten(c, lvl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_lighten.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_lighten.restype)
    )


_lib_lvgl.py_lv_color_darken.argtypes = __CArgList(
    c=color_t,
    lvl=opa_t
)
_lib_lvgl.py_lv_color_darken.restype = color_t


def color_darken(c: color_t, lvl: opa_t) -> color_t:
    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_color_darken.argtypes.c
    )

    lvl = _convert_to_ctype(
        lvl, 
        _lib_lvgl.py_lv_color_darken.argtypes.lvl
    )

    res = _lib_lvgl.py_lv_color_darken(c, lvl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_darken.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_darken.restype)
    )


_lib_lvgl.py_lv_color_hsv_to_rgb.argtypes = __CArgList(
    h=uint16_t,
    s=uint8_t,
    v=uint8_t
)
_lib_lvgl.py_lv_color_hsv_to_rgb.restype = color_t


def color_hsv_to_rgb(
    h: _type_uint16_t,
    s: _type_uint8_t,
    v: _type_uint8_t
) -> color_t:
    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_color_hsv_to_rgb.argtypes.h
    )

    s = _convert_to_ctype(
        s, 
        _lib_lvgl.py_lv_color_hsv_to_rgb.argtypes.s
    )

    v = _convert_to_ctype(
        v, 
        _lib_lvgl.py_lv_color_hsv_to_rgb.argtypes.v
    )

    res = _lib_lvgl.py_lv_color_hsv_to_rgb(h, s, v)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_hsv_to_rgb.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_hsv_to_rgb.restype)
    )


_lib_lvgl.py_lv_color_rgb_to_hsv.argtypes = __CArgList(
    r8=uint8_t,
    g8=uint8_t,
    b8=uint8_t
)
_lib_lvgl.py_lv_color_rgb_to_hsv.restype = color_hsv_t


def color_rgb_to_hsv(
    r8: _type_uint8_t,
    g8: _type_uint8_t,
    b8: _type_uint8_t
) -> color_hsv_t:
    r8 = _convert_to_ctype(
        r8, 
        _lib_lvgl.py_lv_color_rgb_to_hsv.argtypes.r8
    )

    g8 = _convert_to_ctype(
        g8, 
        _lib_lvgl.py_lv_color_rgb_to_hsv.argtypes.g8
    )

    b8 = _convert_to_ctype(
        b8, 
        _lib_lvgl.py_lv_color_rgb_to_hsv.argtypes.b8
    )

    res = _lib_lvgl.py_lv_color_rgb_to_hsv(r8, g8, b8)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_rgb_to_hsv.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_rgb_to_hsv.restype)
    )


_lib_lvgl.py_lv_color_to_hsv.argtypes = __CArgList(
    color=color_t
)
_lib_lvgl.py_lv_color_to_hsv.restype = color_hsv_t


def color_to_hsv(color: color_t) -> color_hsv_t:
    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_color_to_hsv.argtypes.color
    )

    res = _lib_lvgl.py_lv_color_to_hsv(color)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_to_hsv.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_to_hsv.restype)
    )


_lib_lvgl.py_lv_color_white.argtypes = __CArgList()
_lib_lvgl.py_lv_color_white.restype = color_t


def color_white() -> color_t:

    res = _lib_lvgl.py_lv_color_white()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_white.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_white.restype)
    )


_lib_lvgl.py_lv_color_black.argtypes = __CArgList()
_lib_lvgl.py_lv_color_black.restype = color_t


def color_black() -> color_t:

    res = _lib_lvgl.py_lv_color_black()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_black.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_black.restype)
    )


_lib_lvgl.py_lv_palette_main.argtypes = __CArgList(
    p=palette_t
)
_lib_lvgl.py_lv_palette_main.restype = color_t


def palette_main(p: _type_palette_t) -> color_t:
    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_palette_main.argtypes.p
    )

    res = _lib_lvgl.py_lv_palette_main(p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_palette_main.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_palette_main.restype)
    )


_lib_lvgl.py_lv_palette_lighten.argtypes = __CArgList(
    p=palette_t,
    lvl=uint8_t
)
_lib_lvgl.py_lv_palette_lighten.restype = color_t


def palette_lighten(
    p: _type_palette_t,
    lvl: _type_uint8_t
) -> color_t:
    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_palette_lighten.argtypes.p
    )

    lvl = _convert_to_ctype(
        lvl, 
        _lib_lvgl.py_lv_palette_lighten.argtypes.lvl
    )

    res = _lib_lvgl.py_lv_palette_lighten(p, lvl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_palette_lighten.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_palette_lighten.restype)
    )


_lib_lvgl.py_lv_palette_darken.argtypes = __CArgList(
    p=palette_t,
    lvl=uint8_t
)
_lib_lvgl.py_lv_palette_darken.restype = color_t


def palette_darken(
    p: _type_palette_t,
    lvl: _type_uint8_t
) -> color_t:
    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_palette_darken.argtypes.p
    )

    lvl = _convert_to_ctype(
        lvl, 
        _lib_lvgl.py_lv_palette_darken.argtypes.lvl
    )

    res = _lib_lvgl.py_lv_palette_darken(p, lvl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_palette_darken.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_palette_darken.restype)
    )


_lib_lvgl.py_lv_color_mix.argtypes = __CArgList(
    c1=color_t,
    c2=color_t,
    mix=uint8_t
)
_lib_lvgl.py_lv_color_mix.restype = color_t


def color_mix(
    c1: color_t,
    c2: color_t,
    mix: _type_uint8_t
) -> color_t:
    c1 = _convert_to_ctype(
        c1, 
        _lib_lvgl.py_lv_color_mix.argtypes.c1
    )

    c2 = _convert_to_ctype(
        c2, 
        _lib_lvgl.py_lv_color_mix.argtypes.c2
    )

    mix = _convert_to_ctype(
        mix, 
        _lib_lvgl.py_lv_color_mix.argtypes.mix
    )

    res = _lib_lvgl.py_lv_color_mix(c1, c2, mix)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_mix.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_mix.restype)
    )


_lib_lvgl.py_lv_color_mix32.argtypes = __CArgList(
    fg=color32_t,
    bg=color32_t
)
_lib_lvgl.py_lv_color_mix32.restype = color32_t


def color_mix32(fg: color32_t, bg: color32_t) -> color32_t:
    fg = _convert_to_ctype(
        fg, 
        _lib_lvgl.py_lv_color_mix32.argtypes.fg
    )

    bg = _convert_to_ctype(
        bg, 
        _lib_lvgl.py_lv_color_mix32.argtypes.bg
    )

    res = _lib_lvgl.py_lv_color_mix32(fg, bg)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_mix32.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_mix32.restype)
    )


_lib_lvgl.py_lv_color_brightness.argtypes = __CArgList(
    c=color_t
)
_lib_lvgl.py_lv_color_brightness.restype = uint8_t


def color_brightness(c: color_t) -> uint8_t:
    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_color_brightness.argtypes.c
    )

    res = _lib_lvgl.py_lv_color_brightness(c)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_color_brightness.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_color_brightness.restype)
    )


_lib_lvgl.py_lv_color_filter_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(color_filter_dsc_t),
    cb=color_filter_cb_t
)
_lib_lvgl.py_lv_color_filter_dsc_init.restype = None


_color_callback_storage = {}


def _color_weakref_callback(ref):
    if ref in _color_callback_storage:
        del _color_callback_storage[ref]


def color_filter_dsc_init(
    dsc: color_filter_dsc_t,
    cb: color_filter_cb_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_color_filter_dsc_init.argtypes.dsc
    )

    if inspect.ismethod(cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': cb.__hash__}
        )
        ref = weakmethod(cb, _color_weakref_callback)
    elif inspect.isfunction(cb):
        ref = weakref.ref(cb, _color_weakref_callback)
    else:
        raise TypeError

    if ref not in _color_callback_storage:
        cb = color_filter_cb_t(cb)
        _color_callback_storage[ref] = cb
    else:
        cb = _color_callback_storage[ref]

    _lib_lvgl.py_lv_color_filter_dsc_init(dsc, cb)


_lib_lvgl.py_lv_txt_get_size.argtypes = __CArgList(
    size_res=_ctypes.POINTER(point_t),
    text=_ctypes.POINTER(char_t),
    font=_ctypes.POINTER(font_t),
    letter_space=coord_t,
    line_space=coord_t,
    max_width=coord_t,
    flag=text_flag_t
)
_lib_lvgl.py_lv_txt_get_size.restype = None


def txt_get_size(
    size_res: point_t,
    text: _type_char_t,
    font: font_t,
    letter_space: coord_t,
    line_space: coord_t,
    max_width: coord_t,
    flag: text_flag_t
) -> None:
    size_res = _convert_to_ctype(
        size_res, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.size_res
    )

    text = _convert_to_ctype(
        text, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.text
    )

    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.font
    )

    letter_space = _convert_to_ctype(
        letter_space, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.letter_space
    )

    line_space = _convert_to_ctype(
        line_space, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.line_space
    )

    max_width = _convert_to_ctype(
        max_width, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.max_width
    )

    flag = _convert_to_ctype(
        flag, 
        _lib_lvgl.py_lv_txt_get_size.argtypes.flag
    )

    _lib_lvgl.py_lv_txt_get_size(size_res, text, font, letter_space, line_space, max_width, flag)


_lib_lvgl.py__lv_txt_get_next_line.argtypes = __CArgList(
    txt=_ctypes.POINTER(char_t),
    font=_ctypes.POINTER(font_t),
    letter_space=coord_t,
    max_width=coord_t,
    used_width=_ctypes.POINTER(coord_t),
    flag=text_flag_t
)
_lib_lvgl.py__lv_txt_get_next_line.restype = uint32_t


def _txt_get_next_line(
    txt: _type_char_t,
    font: font_t,
    letter_space: coord_t,
    max_width: coord_t,
    used_width: coord_t,
    flag: text_flag_t
) -> uint32_t:
    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py__lv_txt_get_next_line.argtypes.txt
    )

    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py__lv_txt_get_next_line.argtypes.font
    )

    letter_space = _convert_to_ctype(
        letter_space, 
        _lib_lvgl.py__lv_txt_get_next_line.argtypes.letter_space
    )

    max_width = _convert_to_ctype(
        max_width, 
        _lib_lvgl.py__lv_txt_get_next_line.argtypes.max_width
    )

    used_width = _convert_to_ctype(
        used_width, 
        _lib_lvgl.py__lv_txt_get_next_line.argtypes.used_width
    )

    flag = _convert_to_ctype(
        flag, 
        _lib_lvgl.py__lv_txt_get_next_line.argtypes.flag
    )

    res = _lib_lvgl.py__lv_txt_get_next_line(txt, font, letter_space, max_width, used_width, flag)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_txt_get_next_line.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_txt_get_next_line.restype)
    )


_lib_lvgl.py_lv_txt_get_width.argtypes = __CArgList(
    txt=_ctypes.POINTER(char_t),
    length=uint32_t,
    font=_ctypes.POINTER(font_t),
    letter_space=coord_t
)
_lib_lvgl.py_lv_txt_get_width.restype = coord_t


def txt_get_width(
    txt: _type_char_t,
    length: _type_uint32_t,
    font: font_t,
    letter_space: coord_t
) -> coord_t:
    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_txt_get_width.argtypes.txt
    )

    length = _convert_to_ctype(
        length, 
        _lib_lvgl.py_lv_txt_get_width.argtypes.length
    )

    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_txt_get_width.argtypes.font
    )

    letter_space = _convert_to_ctype(
        letter_space, 
        _lib_lvgl.py_lv_txt_get_width.argtypes.letter_space
    )

    res = _lib_lvgl.py_lv_txt_get_width(txt, length, font, letter_space)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_txt_get_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_txt_get_width.restype)
    )


_lib_lvgl.py__lv_txt_ins.argtypes = __CArgList(
    txt_buf=_ctypes.POINTER(char_t),
    pos=uint32_t,
    ins_txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py__lv_txt_ins.restype = None


def _txt_ins(
    txt_buf: _type_char_t,
    pos: _type_uint32_t,
    ins_txt: _type_char_t
) -> None:
    txt_buf = _convert_to_ctype(
        txt_buf, 
        _lib_lvgl.py__lv_txt_ins.argtypes.txt_buf
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py__lv_txt_ins.argtypes.pos
    )

    ins_txt = _convert_to_ctype(
        ins_txt, 
        _lib_lvgl.py__lv_txt_ins.argtypes.ins_txt
    )

    _lib_lvgl.py__lv_txt_ins(txt_buf, pos, ins_txt)


_lib_lvgl.py__lv_txt_cut.argtypes = __CArgList(
    txt=_ctypes.POINTER(char_t),
    pos=uint32_t,
    len=uint32_t
)
_lib_lvgl.py__lv_txt_cut.restype = None


def _txt_cut(
    txt: _type_char_t,
    pos: _type_uint32_t,
    len: _type_uint32_t
) -> None:
    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py__lv_txt_cut.argtypes.txt
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py__lv_txt_cut.argtypes.pos
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py__lv_txt_cut.argtypes.len
    )

    _lib_lvgl.py__lv_txt_cut(txt, pos, len)


_lib_lvgl.py__lv_txt_is_break_char.argtypes = __CArgList(
    letter=uint32_t
)
_lib_lvgl.py__lv_txt_is_break_char.restype = bool_t


def _txt_is_break_char(letter: _type_uint32_t) -> bool_t:
    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py__lv_txt_is_break_char.argtypes.letter
    )

    res = _lib_lvgl.py__lv_txt_is_break_char(letter)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_txt_is_break_char.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_txt_is_break_char.restype)
    )


_lib_lvgl.py__lv_txt_is_a_word.argtypes = __CArgList(
    letter=uint32_t
)
_lib_lvgl.py__lv_txt_is_a_word.restype = bool_t


def _txt_is_a_word(letter: _type_uint32_t) -> bool_t:
    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py__lv_txt_is_a_word.argtypes.letter
    )

    res = _lib_lvgl.py__lv_txt_is_a_word(letter)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_txt_is_a_word.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_txt_is_a_word.restype)
    )


_lib_lvgl.py__lv_bidi_process.argtypes = __CArgList(
    str_in=_ctypes.POINTER(char_t),
    str_out=_ctypes.POINTER(char_t),
    base_dir=base_dir_t
)
_lib_lvgl.py__lv_bidi_process.restype = None


def _bidi_process(
    str_in: _type_char_t,
    str_out: _type_char_t,
    base_dir: base_dir_t
) -> None:
    str_in = _convert_to_ctype(
        str_in, 
        _lib_lvgl.py__lv_bidi_process.argtypes.str_in
    )

    str_out = _convert_to_ctype(
        str_out, 
        _lib_lvgl.py__lv_bidi_process.argtypes.str_out
    )

    base_dir = _convert_to_ctype(
        base_dir, 
        _lib_lvgl.py__lv_bidi_process.argtypes.base_dir
    )

    _lib_lvgl.py__lv_bidi_process(str_in, str_out, base_dir)


_lib_lvgl.py__lv_bidi_detect_base_dir.argtypes = __CArgList(
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py__lv_bidi_detect_base_dir.restype = base_dir_t


def _bidi_detect_base_dir(txt: _type_char_t) -> base_dir_t:
    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py__lv_bidi_detect_base_dir.argtypes.txt
    )

    res = _lib_lvgl.py__lv_bidi_detect_base_dir(txt)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_bidi_detect_base_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_bidi_detect_base_dir.restype)
    )


_lib_lvgl.py__lv_bidi_get_logical_pos.argtypes = __CArgList(
    str_in=_ctypes.POINTER(char_t),
    bidi_txt=_ctypes.POINTER(_ctypes.POINTER(char_t)),
    len=uint32_t,
    base_dir=base_dir_t,
    visual_pos=uint32_t,
    is_rtl=_ctypes.POINTER(bool_t)
)
_lib_lvgl.py__lv_bidi_get_logical_pos.restype = uint16_t


def _bidi_get_logical_pos(
    str_in: _type_char_t,
    bidi_txt: _type_char_t,
    len: _type_uint32_t,
    base_dir: base_dir_t,
    visual_pos: _type_uint32_t,
    is_rtl: _type_bool_t
) -> uint16_t:
    str_in = _convert_to_ctype(
        str_in, 
        _lib_lvgl.py__lv_bidi_get_logical_pos.argtypes.str_in
    )

    bidi_txt = _convert_to_ctype(
        bidi_txt, 
        _lib_lvgl.py__lv_bidi_get_logical_pos.argtypes.bidi_txt
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py__lv_bidi_get_logical_pos.argtypes.len
    )

    base_dir = _convert_to_ctype(
        base_dir, 
        _lib_lvgl.py__lv_bidi_get_logical_pos.argtypes.base_dir
    )

    visual_pos = _convert_to_ctype(
        visual_pos, 
        _lib_lvgl.py__lv_bidi_get_logical_pos.argtypes.visual_pos
    )

    is_rtl = _convert_to_ctype(
        is_rtl, 
        _lib_lvgl.py__lv_bidi_get_logical_pos.argtypes.is_rtl
    )

    res = _lib_lvgl.py__lv_bidi_get_logical_pos(str_in, bidi_txt, len, base_dir, visual_pos, is_rtl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_bidi_get_logical_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_bidi_get_logical_pos.restype)
    )


_lib_lvgl.py__lv_bidi_get_visual_pos.argtypes = __CArgList(
    str_in=_ctypes.POINTER(char_t),
    bidi_txt=_ctypes.POINTER(_ctypes.POINTER(char_t)),
    len=uint16_t,
    base_dir=base_dir_t,
    logical_pos=uint32_t,
    is_rtl=_ctypes.POINTER(bool_t)
)
_lib_lvgl.py__lv_bidi_get_visual_pos.restype = uint16_t


def _bidi_get_visual_pos(
    str_in: _type_char_t,
    bidi_txt: _type_char_t,
    len: _type_uint16_t,
    base_dir: base_dir_t,
    logical_pos: _type_uint32_t,
    is_rtl: _type_bool_t
) -> uint16_t:
    str_in = _convert_to_ctype(
        str_in, 
        _lib_lvgl.py__lv_bidi_get_visual_pos.argtypes.str_in
    )

    bidi_txt = _convert_to_ctype(
        bidi_txt, 
        _lib_lvgl.py__lv_bidi_get_visual_pos.argtypes.bidi_txt
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py__lv_bidi_get_visual_pos.argtypes.len
    )

    base_dir = _convert_to_ctype(
        base_dir, 
        _lib_lvgl.py__lv_bidi_get_visual_pos.argtypes.base_dir
    )

    logical_pos = _convert_to_ctype(
        logical_pos, 
        _lib_lvgl.py__lv_bidi_get_visual_pos.argtypes.logical_pos
    )

    is_rtl = _convert_to_ctype(
        is_rtl, 
        _lib_lvgl.py__lv_bidi_get_visual_pos.argtypes.is_rtl
    )

    res = _lib_lvgl.py__lv_bidi_get_visual_pos(str_in, bidi_txt, len, base_dir, logical_pos, is_rtl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_bidi_get_visual_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_bidi_get_visual_pos.restype)
    )


_lib_lvgl.py__lv_bidi_process_paragraph.argtypes = __CArgList(
    str_in=_ctypes.POINTER(char_t),
    str_out=_ctypes.POINTER(char_t),
    len=uint32_t,
    base_dir=base_dir_t,
    pos_conv_out=_ctypes.POINTER(uint16_t),
    pos_conv_len=uint16_t
)
_lib_lvgl.py__lv_bidi_process_paragraph.restype = None


def _bidi_process_paragraph(
    str_in: _type_char_t,
    str_out: _type_char_t,
    len: _type_uint32_t,
    base_dir: base_dir_t,
    pos_conv_out: _type_uint16_t,
    pos_conv_len: _type_uint16_t
) -> None:
    str_in = _convert_to_ctype(
        str_in, 
        _lib_lvgl.py__lv_bidi_process_paragraph.argtypes.str_in
    )

    str_out = _convert_to_ctype(
        str_out, 
        _lib_lvgl.py__lv_bidi_process_paragraph.argtypes.str_out
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py__lv_bidi_process_paragraph.argtypes.len
    )

    base_dir = _convert_to_ctype(
        base_dir, 
        _lib_lvgl.py__lv_bidi_process_paragraph.argtypes.base_dir
    )

    pos_conv_out = _convert_to_ctype(
        pos_conv_out, 
        _lib_lvgl.py__lv_bidi_process_paragraph.argtypes.pos_conv_out
    )

    pos_conv_len = _convert_to_ctype(
        pos_conv_len, 
        _lib_lvgl.py__lv_bidi_process_paragraph.argtypes.pos_conv_len
    )

    _lib_lvgl.py__lv_bidi_process_paragraph(str_in, str_out, len, base_dir, pos_conv_out, pos_conv_len)


_lib_lvgl.py_lv_bidi_calculate_align.argtypes = __CArgList(
    align=_ctypes.POINTER(text_align_t),
    base_dir=_ctypes.POINTER(base_dir_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_bidi_calculate_align.restype = None


def bidi_calculate_align(
    align: text_align_t,
    base_dir: base_dir_t,
    txt: _type_char_t
) -> None:
    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_bidi_calculate_align.argtypes.align
    )

    base_dir = _convert_to_ctype(
        base_dir, 
        _lib_lvgl.py_lv_bidi_calculate_align.argtypes.base_dir
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_bidi_calculate_align.argtypes.txt
    )

    _lib_lvgl.py_lv_bidi_calculate_align(align, base_dir, txt)


_lib_lvgl.py_lv_style_init.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t)
)
_lib_lvgl.py_lv_style_init.restype = None


def style_init(style: style_t) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_init.argtypes.style
    )

    _lib_lvgl.py_lv_style_init(style)


_lib_lvgl.py_lv_style_reset.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t)
)
_lib_lvgl.py_lv_style_reset.restype = None


def style_reset(style: style_t) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_reset.argtypes.style
    )

    _lib_lvgl.py_lv_style_reset(style)


_lib_lvgl.py_lv_style_register_prop.argtypes = __CArgList(
    flag=uint8_t
)
_lib_lvgl.py_lv_style_register_prop.restype = style_prop_t


def style_register_prop(flag: _type_uint8_t) -> style_prop_t:
    flag = _convert_to_ctype(
        flag, 
        _lib_lvgl.py_lv_style_register_prop.argtypes.flag
    )

    res = _lib_lvgl.py_lv_style_register_prop(flag)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_register_prop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_register_prop.restype)
    )


_lib_lvgl.py_lv_style_get_num_custom_props.argtypes = __CArgList()
_lib_lvgl.py_lv_style_get_num_custom_props.restype = style_prop_t


def style_get_num_custom_props() -> style_prop_t:

    res = _lib_lvgl.py_lv_style_get_num_custom_props()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_get_num_custom_props.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_get_num_custom_props.restype)
    )


_lib_lvgl.py_lv_style_remove_prop.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    prop=style_prop_t
)
_lib_lvgl.py_lv_style_remove_prop.restype = bool_t


def style_remove_prop(
    style: style_t,
    prop: style_prop_t
) -> bool_t:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_remove_prop.argtypes.style
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_remove_prop.argtypes.prop
    )

    res = _lib_lvgl.py_lv_style_remove_prop(style, prop)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_remove_prop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_remove_prop.restype)
    )


_lib_lvgl.py_lv_style_set_prop.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    prop=style_prop_t,
    value=style_value_t
)
_lib_lvgl.py_lv_style_set_prop.restype = None


def style_set_prop(
    style: style_t,
    prop: style_prop_t,
    value: style_value_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_prop.argtypes.style
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_set_prop.argtypes.prop
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_prop.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_prop(style, prop, value)


_lib_lvgl.py_lv_style_set_prop_meta.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    prop=style_prop_t,
    meta=uint16_t
)
_lib_lvgl.py_lv_style_set_prop_meta.restype = None


def style_set_prop_meta(
    style: style_t,
    prop: style_prop_t,
    meta: _type_uint16_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_prop_meta.argtypes.style
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_set_prop_meta.argtypes.prop
    )

    meta = _convert_to_ctype(
        meta, 
        _lib_lvgl.py_lv_style_set_prop_meta.argtypes.meta
    )

    _lib_lvgl.py_lv_style_set_prop_meta(style, prop, meta)


_lib_lvgl.py_lv_style_get_prop.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    prop=style_prop_t,
    value=_ctypes.POINTER(style_value_t)
)
_lib_lvgl.py_lv_style_get_prop.restype = style_res_t


def style_get_prop(
    style: style_t,
    prop: style_prop_t,
    value: style_value_t
) -> style_res_t:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_get_prop.argtypes.style
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_get_prop.argtypes.prop
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_get_prop.argtypes.value
    )

    res = _lib_lvgl.py_lv_style_get_prop(style, prop, value)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_get_prop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_get_prop.restype)
    )


_lib_lvgl.py_lv_style_transition_dsc_init.argtypes = __CArgList(
    tr=_ctypes.POINTER(style_transition_dsc_t),
    props=_ctypes.POINTER(style_prop_t),
    path_cb=anim_path_cb_t,
    time=uint32_t,
    delay=uint32_t,
    user_data=void_t
)
_lib_lvgl.py_lv_style_transition_dsc_init.restype = None


_style_callback_storage = {}


def _style_weakref_callback(ref):
    if ref in _style_callback_storage:
        del _style_callback_storage[ref]


def style_transition_dsc_init(
    tr: style_transition_dsc_t,
    props: List[style_prop_t],
    path_cb: anim_path_cb_t,
    time: _type_uint32_t,
    delay: _type_uint32_t,
    user_data: void_t
) -> None:
    tr = _convert_to_ctype(
        tr, 
        _lib_lvgl.py_lv_style_transition_dsc_init.argtypes.tr
    )

    props = _convert_to_ctype(
        props, 
        _lib_lvgl.py_lv_style_transition_dsc_init.argtypes.props
    )

    if inspect.ismethod(path_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': path_cb.__hash__}
        )
        ref = weakmethod(path_cb, _style_weakref_callback)
    elif inspect.isfunction(path_cb):
        ref = weakref.ref(path_cb, _style_weakref_callback)
    else:
        raise TypeError

    if ref not in _style_callback_storage:
        path_cb = anim_path_cb_t(path_cb)
        _style_callback_storage[ref] = path_cb
    else:
        path_cb = _style_callback_storage[ref]

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_style_transition_dsc_init.argtypes.time
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_style_transition_dsc_init.argtypes.delay
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_style_transition_dsc_init.argtypes.user_data
    )

    _lib_lvgl.py_lv_style_transition_dsc_init(tr, props, path_cb, time, delay, user_data)


_lib_lvgl.py_lv_style_prop_get_default.argtypes = __CArgList(
    prop=style_prop_t
)
_lib_lvgl.py_lv_style_prop_get_default.restype = style_value_t


def style_prop_get_default(prop: style_prop_t) -> style_value_t:
    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_prop_get_default.argtypes.prop
    )

    res = _lib_lvgl.py_lv_style_prop_get_default(prop)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_prop_get_default.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_prop_get_default.restype)
    )


_lib_lvgl.py_lv_style_get_prop_inlined.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    prop=style_prop_t,
    value=_ctypes.POINTER(style_value_t)
)
_lib_lvgl.py_lv_style_get_prop_inlined.restype = style_res_t


def style_get_prop_inlined(
    style: style_t,
    prop: style_prop_t,
    value: style_value_t
) -> style_res_t:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_get_prop_inlined.argtypes.style
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_get_prop_inlined.argtypes.prop
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_get_prop_inlined.argtypes.value
    )

    res = _lib_lvgl.py_lv_style_get_prop_inlined(style, prop, value)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_get_prop_inlined.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_get_prop_inlined.restype)
    )


_lib_lvgl.py_lv_style_is_empty.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t)
)
_lib_lvgl.py_lv_style_is_empty.restype = bool_t


def style_is_empty(style: style_t) -> bool_t:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_is_empty.argtypes.style
    )

    res = _lib_lvgl.py_lv_style_is_empty(style)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_is_empty.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_is_empty.restype)
    )


_lib_lvgl.py__lv_style_get_prop_group.argtypes = __CArgList(
    prop=style_prop_t
)
_lib_lvgl.py__lv_style_get_prop_group.restype = uint8_t


def _style_get_prop_group(prop: style_prop_t) -> uint8_t:
    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py__lv_style_get_prop_group.argtypes.prop
    )

    res = _lib_lvgl.py__lv_style_get_prop_group(prop)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_style_get_prop_group.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_style_get_prop_group.restype)
    )


_lib_lvgl.py__lv_style_prop_lookup_flags.argtypes = __CArgList(
    prop=style_prop_t
)
_lib_lvgl.py__lv_style_prop_lookup_flags.restype = uint8_t


def _style_prop_lookup_flags(
    prop: style_prop_t
) -> uint8_t:
    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py__lv_style_prop_lookup_flags.argtypes.prop
    )

    res = _lib_lvgl.py__lv_style_prop_lookup_flags(prop)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_style_prop_lookup_flags.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_style_prop_lookup_flags.restype)
    )


_lib_lvgl.py_lv_style_set_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_width.restype = None


def style_set_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_width(style, value)


_lib_lvgl.py_lv_style_set_min_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_min_width.restype = None


def style_set_min_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_min_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_min_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_min_width(style, value)


_lib_lvgl.py_lv_style_set_max_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_max_width.restype = None


def style_set_max_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_max_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_max_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_max_width(style, value)


_lib_lvgl.py_lv_style_set_height.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_height.restype = None


def style_set_height(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_height.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_height.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_height(style, value)


_lib_lvgl.py_lv_style_set_min_height.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_min_height.restype = None


def style_set_min_height(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_min_height.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_min_height.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_min_height(style, value)


_lib_lvgl.py_lv_style_set_max_height.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_max_height.restype = None


def style_set_max_height(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_max_height.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_max_height.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_max_height(style, value)


_lib_lvgl.py_lv_style_set_x.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_x.restype = None


def style_set_x(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_x.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_x.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_x(style, value)


_lib_lvgl.py_lv_style_set_y.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_y.restype = None


def style_set_y(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_y.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_y.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_y(style, value)


_lib_lvgl.py_lv_style_set_align.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=align_t
)
_lib_lvgl.py_lv_style_set_align.restype = None


def style_set_align(
    style: style_t,
    value: align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_align.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_align.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_align(style, value)


_lib_lvgl.py_lv_style_set_transform_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_transform_width.restype = None


def style_set_transform_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transform_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transform_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transform_width(style, value)


_lib_lvgl.py_lv_style_set_transform_height.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_transform_height.restype = None


def style_set_transform_height(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transform_height.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transform_height.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transform_height(style, value)


_lib_lvgl.py_lv_style_set_translate_x.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_translate_x.restype = None


def style_set_translate_x(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_translate_x.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_translate_x.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_translate_x(style, value)


_lib_lvgl.py_lv_style_set_translate_y.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_translate_y.restype = None


def style_set_translate_y(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_translate_y.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_translate_y.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_translate_y(style, value)


_lib_lvgl.py_lv_style_set_transform_zoom.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_transform_zoom.restype = None


def style_set_transform_zoom(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transform_zoom.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transform_zoom.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transform_zoom(style, value)


_lib_lvgl.py_lv_style_set_transform_angle.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_transform_angle.restype = None


def style_set_transform_angle(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transform_angle.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transform_angle.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transform_angle(style, value)


_lib_lvgl.py_lv_style_set_transform_pivot_x.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_transform_pivot_x.restype = None


def style_set_transform_pivot_x(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transform_pivot_x.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transform_pivot_x.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transform_pivot_x(style, value)


_lib_lvgl.py_lv_style_set_transform_pivot_y.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_transform_pivot_y.restype = None


def style_set_transform_pivot_y(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transform_pivot_y.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transform_pivot_y.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transform_pivot_y(style, value)


_lib_lvgl.py_lv_style_set_pad_top.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_top.restype = None


def style_set_pad_top(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_top.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_top.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_top(style, value)


_lib_lvgl.py_lv_style_set_pad_bottom.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_bottom.restype = None


def style_set_pad_bottom(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_bottom.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_bottom.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_bottom(style, value)


_lib_lvgl.py_lv_style_set_pad_left.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_left.restype = None


def style_set_pad_left(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_left.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_left.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_left(style, value)


_lib_lvgl.py_lv_style_set_pad_right.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_right.restype = None


def style_set_pad_right(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_right.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_right.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_right(style, value)


_lib_lvgl.py_lv_style_set_pad_row.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_row.restype = None


def style_set_pad_row(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_row.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_row.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_row(style, value)


_lib_lvgl.py_lv_style_set_pad_column.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_column.restype = None


def style_set_pad_column(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_column.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_column.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_column(style, value)


_lib_lvgl.py_lv_style_set_margin_top.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_margin_top.restype = None


def style_set_margin_top(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_margin_top.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_margin_top.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_margin_top(style, value)


_lib_lvgl.py_lv_style_set_margin_bottom.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_margin_bottom.restype = None


def style_set_margin_bottom(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_margin_bottom.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_margin_bottom.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_margin_bottom(style, value)


_lib_lvgl.py_lv_style_set_margin_left.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_margin_left.restype = None


def style_set_margin_left(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_margin_left.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_margin_left.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_margin_left(style, value)


_lib_lvgl.py_lv_style_set_margin_right.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_margin_right.restype = None


def style_set_margin_right(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_margin_right.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_margin_right.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_margin_right(style, value)


_lib_lvgl.py_lv_style_set_bg_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_bg_color.restype = None


def style_set_bg_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_color(style, value)


_lib_lvgl.py_lv_style_set_bg_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_bg_opa.restype = None


def style_set_bg_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_opa(style, value)


_lib_lvgl.py_lv_style_set_bg_grad_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_bg_grad_color.restype = None


def style_set_bg_grad_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_grad_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_grad_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_grad_color(style, value)


_lib_lvgl.py_lv_style_set_bg_grad_dir.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=grad_dir_t
)
_lib_lvgl.py_lv_style_set_bg_grad_dir.restype = None


def style_set_bg_grad_dir(
    style: style_t,
    value: grad_dir_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_grad_dir.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_grad_dir.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_grad_dir(style, value)


_lib_lvgl.py_lv_style_set_bg_main_stop.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_bg_main_stop.restype = None


def style_set_bg_main_stop(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_main_stop.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_main_stop.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_main_stop(style, value)


_lib_lvgl.py_lv_style_set_bg_grad_stop.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_bg_grad_stop.restype = None


def style_set_bg_grad_stop(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_grad_stop.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_grad_stop.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_grad_stop(style, value)


_lib_lvgl.py_lv_style_set_bg_grad.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(grad_dsc_t)
)
_lib_lvgl.py_lv_style_set_bg_grad.restype = None


def style_set_bg_grad(
    style: style_t,
    value: grad_dsc_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_grad.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_grad.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_grad(style, value)


_lib_lvgl.py_lv_style_set_bg_dither_mode.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=dither_mode_t
)
_lib_lvgl.py_lv_style_set_bg_dither_mode.restype = None


def style_set_bg_dither_mode(
    style: style_t,
    value: dither_mode_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_dither_mode.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_dither_mode.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_dither_mode(style, value)


_lib_lvgl.py_lv_style_set_bg_img_src.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=void_t
)
_lib_lvgl.py_lv_style_set_bg_img_src.restype = None


def style_set_bg_img_src(
    style: style_t,
    value: void_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_img_src.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_img_src.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_img_src(style, value)


_lib_lvgl.py_lv_style_set_bg_img_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_bg_img_opa.restype = None


def style_set_bg_img_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_img_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_img_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_img_opa(style, value)


_lib_lvgl.py_lv_style_set_bg_img_recolor.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_bg_img_recolor.restype = None


def style_set_bg_img_recolor(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_img_recolor.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_img_recolor.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_img_recolor(style, value)


_lib_lvgl.py_lv_style_set_bg_img_recolor_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_bg_img_recolor_opa.restype = None


def style_set_bg_img_recolor_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_img_recolor_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_img_recolor_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_img_recolor_opa(style, value)


_lib_lvgl.py_lv_style_set_bg_img_tiled.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=bool_t
)
_lib_lvgl.py_lv_style_set_bg_img_tiled.restype = None


def style_set_bg_img_tiled(
    style: style_t,
    value: _type_bool_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_bg_img_tiled.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_bg_img_tiled.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_bg_img_tiled(style, value)


_lib_lvgl.py_lv_style_set_border_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_border_color.restype = None


def style_set_border_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_border_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_border_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_border_color(style, value)


_lib_lvgl.py_lv_style_set_border_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_border_opa.restype = None


def style_set_border_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_border_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_border_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_border_opa(style, value)


_lib_lvgl.py_lv_style_set_border_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_border_width.restype = None


def style_set_border_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_border_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_border_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_border_width(style, value)


_lib_lvgl.py_lv_style_set_border_side.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=border_side_t
)
_lib_lvgl.py_lv_style_set_border_side.restype = None


def style_set_border_side(
    style: style_t,
    value: border_side_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_border_side.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_border_side.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_border_side(style, value)


_lib_lvgl.py_lv_style_set_border_post.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=bool_t
)
_lib_lvgl.py_lv_style_set_border_post.restype = None


def style_set_border_post(
    style: style_t,
    value: _type_bool_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_border_post.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_border_post.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_border_post(style, value)


_lib_lvgl.py_lv_style_set_outline_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_outline_width.restype = None


def style_set_outline_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_outline_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_outline_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_outline_width(style, value)


_lib_lvgl.py_lv_style_set_outline_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_outline_color.restype = None


def style_set_outline_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_outline_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_outline_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_outline_color(style, value)


_lib_lvgl.py_lv_style_set_outline_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_outline_opa.restype = None


def style_set_outline_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_outline_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_outline_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_outline_opa(style, value)


_lib_lvgl.py_lv_style_set_outline_pad.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_outline_pad.restype = None


def style_set_outline_pad(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_outline_pad.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_outline_pad.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_outline_pad(style, value)


_lib_lvgl.py_lv_style_set_shadow_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_shadow_width.restype = None


def style_set_shadow_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_shadow_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_shadow_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_shadow_width(style, value)


_lib_lvgl.py_lv_style_set_shadow_ofs_x.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_shadow_ofs_x.restype = None


def style_set_shadow_ofs_x(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_shadow_ofs_x.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_shadow_ofs_x.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_shadow_ofs_x(style, value)


_lib_lvgl.py_lv_style_set_shadow_ofs_y.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_shadow_ofs_y.restype = None


def style_set_shadow_ofs_y(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_shadow_ofs_y.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_shadow_ofs_y.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_shadow_ofs_y(style, value)


_lib_lvgl.py_lv_style_set_shadow_spread.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_shadow_spread.restype = None


def style_set_shadow_spread(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_shadow_spread.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_shadow_spread.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_shadow_spread(style, value)


_lib_lvgl.py_lv_style_set_shadow_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_shadow_color.restype = None


def style_set_shadow_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_shadow_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_shadow_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_shadow_color(style, value)


_lib_lvgl.py_lv_style_set_shadow_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_shadow_opa.restype = None


def style_set_shadow_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_shadow_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_shadow_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_shadow_opa(style, value)


_lib_lvgl.py_lv_style_set_img_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_img_opa.restype = None


def style_set_img_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_img_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_img_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_img_opa(style, value)


_lib_lvgl.py_lv_style_set_img_recolor.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_img_recolor.restype = None


def style_set_img_recolor(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_img_recolor.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_img_recolor.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_img_recolor(style, value)


_lib_lvgl.py_lv_style_set_img_recolor_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_img_recolor_opa.restype = None


def style_set_img_recolor_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_img_recolor_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_img_recolor_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_img_recolor_opa(style, value)


_lib_lvgl.py_lv_style_set_line_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_line_width.restype = None


def style_set_line_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_line_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_line_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_line_width(style, value)


_lib_lvgl.py_lv_style_set_line_dash_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_line_dash_width.restype = None


def style_set_line_dash_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_line_dash_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_line_dash_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_line_dash_width(style, value)


_lib_lvgl.py_lv_style_set_line_dash_gap.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_line_dash_gap.restype = None


def style_set_line_dash_gap(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_line_dash_gap.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_line_dash_gap.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_line_dash_gap(style, value)


_lib_lvgl.py_lv_style_set_line_rounded.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=bool_t
)
_lib_lvgl.py_lv_style_set_line_rounded.restype = None


def style_set_line_rounded(
    style: style_t,
    value: _type_bool_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_line_rounded.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_line_rounded.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_line_rounded(style, value)


_lib_lvgl.py_lv_style_set_line_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_line_color.restype = None


def style_set_line_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_line_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_line_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_line_color(style, value)


_lib_lvgl.py_lv_style_set_line_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_line_opa.restype = None


def style_set_line_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_line_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_line_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_line_opa(style, value)


_lib_lvgl.py_lv_style_set_arc_width.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_arc_width.restype = None


def style_set_arc_width(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_arc_width.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_arc_width.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_arc_width(style, value)


_lib_lvgl.py_lv_style_set_arc_rounded.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=bool_t
)
_lib_lvgl.py_lv_style_set_arc_rounded.restype = None


def style_set_arc_rounded(
    style: style_t,
    value: _type_bool_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_arc_rounded.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_arc_rounded.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_arc_rounded(style, value)


_lib_lvgl.py_lv_style_set_arc_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_arc_color.restype = None


def style_set_arc_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_arc_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_arc_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_arc_color(style, value)


_lib_lvgl.py_lv_style_set_arc_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_arc_opa.restype = None


def style_set_arc_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_arc_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_arc_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_arc_opa(style, value)


_lib_lvgl.py_lv_style_set_arc_img_src.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=void_t
)
_lib_lvgl.py_lv_style_set_arc_img_src.restype = None


def style_set_arc_img_src(
    style: style_t,
    value: void_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_arc_img_src.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_arc_img_src.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_arc_img_src(style, value)


_lib_lvgl.py_lv_style_set_text_color.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=color_t
)
_lib_lvgl.py_lv_style_set_text_color.restype = None


def style_set_text_color(
    style: style_t,
    value: color_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_color.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_color.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_color(style, value)


_lib_lvgl.py_lv_style_set_text_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_text_opa.restype = None


def style_set_text_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_opa(style, value)


_lib_lvgl.py_lv_style_set_text_font.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(font_t)
)
_lib_lvgl.py_lv_style_set_text_font.restype = None


def style_set_text_font(
    style: style_t,
    value: font_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_font.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_font.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_font(style, value)


_lib_lvgl.py_lv_style_set_text_letter_space.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_text_letter_space.restype = None


def style_set_text_letter_space(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_letter_space.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_letter_space.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_letter_space(style, value)


_lib_lvgl.py_lv_style_set_text_line_space.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_text_line_space.restype = None


def style_set_text_line_space(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_line_space.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_line_space.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_line_space(style, value)


_lib_lvgl.py_lv_style_set_text_decor.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=text_decor_t
)
_lib_lvgl.py_lv_style_set_text_decor.restype = None


def style_set_text_decor(
    style: style_t,
    value: text_decor_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_decor.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_decor.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_decor(style, value)


_lib_lvgl.py_lv_style_set_text_align.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=text_align_t
)
_lib_lvgl.py_lv_style_set_text_align.restype = None


def style_set_text_align(
    style: style_t,
    value: text_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_text_align.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_text_align.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_text_align(style, value)


_lib_lvgl.py_lv_style_set_radius.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_radius.restype = None


def style_set_radius(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_radius.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_radius.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_radius(style, value)


_lib_lvgl.py_lv_style_set_clip_corner.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=bool_t
)
_lib_lvgl.py_lv_style_set_clip_corner.restype = None


def style_set_clip_corner(
    style: style_t,
    value: _type_bool_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_clip_corner.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_clip_corner.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_clip_corner(style, value)


_lib_lvgl.py_lv_style_set_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_opa.restype = None


def style_set_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_opa(style, value)


_lib_lvgl.py_lv_style_set_color_filter_dsc.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(color_filter_dsc_t)
)
_lib_lvgl.py_lv_style_set_color_filter_dsc.restype = None


def style_set_color_filter_dsc(
    style: style_t,
    value: color_filter_dsc_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_color_filter_dsc.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_color_filter_dsc.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_color_filter_dsc(style, value)


_lib_lvgl.py_lv_style_set_color_filter_opa.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=opa_t
)
_lib_lvgl.py_lv_style_set_color_filter_opa.restype = None


def style_set_color_filter_opa(
    style: style_t,
    value: opa_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_color_filter_opa.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_color_filter_opa.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_color_filter_opa(style, value)


_lib_lvgl.py_lv_style_set_anim.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_style_set_anim.restype = None


def style_set_anim(
    style: style_t,
    value: anim_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_anim.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_anim.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_anim(style, value)


_lib_lvgl.py_lv_style_set_anim_time.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=uint32_t
)
_lib_lvgl.py_lv_style_set_anim_time.restype = None


def style_set_anim_time(
    style: style_t,
    value: _type_uint32_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_anim_time.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_anim_time.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_anim_time(style, value)


_lib_lvgl.py_lv_style_set_anim_speed.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=uint32_t
)
_lib_lvgl.py_lv_style_set_anim_speed.restype = None


def style_set_anim_speed(
    style: style_t,
    value: _type_uint32_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_anim_speed.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_anim_speed.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_anim_speed(style, value)


_lib_lvgl.py_lv_style_set_transition.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(style_transition_dsc_t)
)
_lib_lvgl.py_lv_style_set_transition.restype = None


def style_set_transition(
    style: style_t,
    value: style_transition_dsc_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_transition.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_transition.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_transition(style, value)


_lib_lvgl.py_lv_style_set_blend_mode.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=blend_mode_t
)
_lib_lvgl.py_lv_style_set_blend_mode.restype = None


def style_set_blend_mode(
    style: style_t,
    value: blend_mode_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_blend_mode.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_blend_mode.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_blend_mode(style, value)


_lib_lvgl.py_lv_style_set_layout.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=uint16_t
)
_lib_lvgl.py_lv_style_set_layout.restype = None


def style_set_layout(
    style: style_t,
    value: _type_uint16_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_layout.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_layout.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_layout(style, value)


_lib_lvgl.py_lv_style_set_base_dir.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=base_dir_t
)
_lib_lvgl.py_lv_style_set_base_dir.restype = None


def style_set_base_dir(
    style: style_t,
    value: base_dir_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_base_dir.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_base_dir.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_base_dir(style, value)


_lib_lvgl.py_lv_style_set_size.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    width=coord_t,
    height=coord_t
)
_lib_lvgl.py_lv_style_set_size.restype = None


def style_set_size(
    style: style_t,
    width: coord_t,
    height: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_size.argtypes.style
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_style_set_size.argtypes.width
    )

    height = _convert_to_ctype(
        height, 
        _lib_lvgl.py_lv_style_set_size.argtypes.height
    )

    _lib_lvgl.py_lv_style_set_size(style, width, height)


_lib_lvgl.py_lv_style_set_pad_all.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_all.restype = None


def style_set_pad_all(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_all.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_all.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_all(style, value)


_lib_lvgl.py_lv_style_set_pad_hor.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_hor.restype = None


def style_set_pad_hor(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_hor.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_hor.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_hor(style, value)


_lib_lvgl.py_lv_style_set_pad_ver.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_ver.restype = None


def style_set_pad_ver(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_ver.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_ver.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_ver(style, value)


_lib_lvgl.py_lv_style_set_pad_gap.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_pad_gap.restype = None


def style_set_pad_gap(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_pad_gap.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_pad_gap.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_pad_gap(style, value)


_lib_lvgl.py_lv_style_prop_has_flag.argtypes = __CArgList(
    prop=style_prop_t,
    flag=uint8_t
)
_lib_lvgl.py_lv_style_prop_has_flag.restype = bool_t


def style_prop_has_flag(
    prop: style_prop_t,
    flag: _type_uint8_t
) -> bool_t:
    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_style_prop_has_flag.argtypes.prop
    )

    flag = _convert_to_ctype(
        flag, 
        _lib_lvgl.py_lv_style_prop_has_flag.argtypes.flag
    )

    res = _lib_lvgl.py_lv_style_prop_has_flag(prop, flag)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_style_prop_has_flag.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_style_prop_has_flag.restype)
    )


_lib_lvgl.py__lv_event_push.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py__lv_event_push.restype = None


def _event_push(e: event_t) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py__lv_event_push.argtypes.e
    )

    _lib_lvgl.py__lv_event_push(e)


_lib_lvgl.py__lv_event_pop.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py__lv_event_pop.restype = None


def _event_pop(e: event_t) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py__lv_event_pop.argtypes.e
    )

    _lib_lvgl.py__lv_event_pop(e)


_lib_lvgl.py_lv_event_send.argtypes = __CArgList(
    list=_ctypes.POINTER(event_list_t),
    e=_ctypes.POINTER(event_t),
    preprocess=bool_t
)
_lib_lvgl.py_lv_event_send.restype = res_t


def event_send(
    list: event_list_t,
    e: event_t,
    preprocess: _type_bool_t
) -> res_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_event_send.argtypes.list
    )

    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_send.argtypes.e
    )

    preprocess = _convert_to_ctype(
        preprocess, 
        _lib_lvgl.py_lv_event_send.argtypes.preprocess
    )

    res = _lib_lvgl.py_lv_event_send(list, e, preprocess)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_send.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_send.restype)
    )


_lib_lvgl.py_lv_event_add.argtypes = __CArgList(
    list=_ctypes.POINTER(event_list_t),
    cb=event_cb_t,
    filter=event_code_t,
    user_data=void_t
)
_lib_lvgl.py_lv_event_add.restype = None


_event_callback_storage = {}


def _event_weakref_callback(ref):
    if ref in _event_callback_storage:
        del _event_callback_storage[ref]


def event_add(
    list: event_list_t,
    cb: event_cb_t,
    filter: _type_event_code_t,
    user_data: void_t
) -> None:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_event_add.argtypes.list
    )

    if inspect.ismethod(cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': cb.__hash__}
        )
        ref = weakmethod(cb, _event_weakref_callback)
    elif inspect.isfunction(cb):
        ref = weakref.ref(cb, _event_weakref_callback)
    else:
        raise TypeError

    if ref not in _event_callback_storage:
        cb = event_cb_t(cb)
        _event_callback_storage[ref] = cb
    else:
        cb = _event_callback_storage[ref]

    filter = _convert_to_ctype(
        filter, 
        _lib_lvgl.py_lv_event_add.argtypes.filter
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_event_add.argtypes.user_data
    )

    _lib_lvgl.py_lv_event_add(list, cb, filter, user_data)


_lib_lvgl.py_lv_event_get_count.argtypes = __CArgList(
    list=_ctypes.POINTER(event_list_t)
)
_lib_lvgl.py_lv_event_get_count.restype = uint32_t


def event_get_count(list: event_list_t) -> uint32_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_event_get_count.argtypes.list
    )

    res = _lib_lvgl.py_lv_event_get_count(list)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_count.restype)
    )


_lib_lvgl.py_lv_event_get_dsc.argtypes = __CArgList(
    list=_ctypes.POINTER(event_list_t),
    index=uint32_t
)
_lib_lvgl.py_lv_event_get_dsc.restype = _ctypes.POINTER(event_dsc_t)


def event_get_dsc(
    list: event_list_t,
    index: _type_uint32_t
) -> event_dsc_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_event_get_dsc.argtypes.list
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_event_get_dsc.argtypes.index
    )

    res = _lib_lvgl.py_lv_event_get_dsc(list, index)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_dsc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_dsc.restype)
    )


_lib_lvgl.py_lv_event_dsc_get_cb.argtypes = __CArgList(
    dsc=_ctypes.POINTER(event_dsc_t)
)
_lib_lvgl.py_lv_event_dsc_get_cb.restype = event_cb_t


def event_dsc_get_cb(dsc: event_dsc_t) -> event_cb_t:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_event_dsc_get_cb.argtypes.dsc
    )

    res = _lib_lvgl.py_lv_event_dsc_get_cb(dsc)
    
    for key, value in _event_callback_storage.items():
        if value == res:
            return key()
        
    return None


_lib_lvgl.py_lv_event_dsc_get_user_data.argtypes = __CArgList(
    dsc=_ctypes.POINTER(event_dsc_t)
)
_lib_lvgl.py_lv_event_dsc_get_user_data.restype = void_t


def event_dsc_get_user_data(dsc: event_dsc_t) -> void_t:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_event_dsc_get_user_data.argtypes.dsc
    )

    res = _lib_lvgl.py_lv_event_dsc_get_user_data(dsc)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_dsc_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_dsc_get_user_data.restype)
    )


_lib_lvgl.py_lv_event_remove.argtypes = __CArgList(
    list=_ctypes.POINTER(event_list_t),
    index=uint32_t
)
_lib_lvgl.py_lv_event_remove.restype = bool_t


def event_remove(
    list: event_list_t,
    index: _type_uint32_t
) -> bool_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_event_remove.argtypes.list
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_event_remove.argtypes.index
    )

    res = _lib_lvgl.py_lv_event_remove(list, index)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_remove.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_remove.restype)
    )


_lib_lvgl.py_lv_event_get_target.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_target.restype = void_t


def event_get_target(e: event_t) -> void_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_target.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_target(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_target.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_target.restype)
    )


_lib_lvgl.py_lv_event_get_current_target.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_current_target.restype = void_t


def event_get_current_target(e: event_t) -> void_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_current_target.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_current_target(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_current_target.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_current_target.restype)
    )


_lib_lvgl.py_lv_event_get_code.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_code.restype = event_code_t


def event_get_code(e: event_t) -> event_code_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_code.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_code(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_code.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_code.restype)
    )


_lib_lvgl.py_lv_event_get_param.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_param.restype = void_t


def event_get_param(e: event_t) -> void_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_param.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_param(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_param.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_param.restype)
    )


_lib_lvgl.py_lv_event_get_user_data.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_user_data.restype = void_t


def event_get_user_data(e: event_t) -> void_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_user_data.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_user_data(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_user_data.restype)
    )


_lib_lvgl.py_lv_event_stop_bubbling.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_stop_bubbling.restype = None


def event_stop_bubbling(e: event_t) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_stop_bubbling.argtypes.e
    )

    _lib_lvgl.py_lv_event_stop_bubbling(e)


_lib_lvgl.py_lv_event_stop_processing.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_stop_processing.restype = None


def event_stop_processing(e: event_t) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_stop_processing.argtypes.e
    )

    _lib_lvgl.py_lv_event_stop_processing(e)


_lib_lvgl.py_lv_event_register_id.argtypes = __CArgList()
_lib_lvgl.py_lv_event_register_id.restype = uint32_t


def event_register_id() -> uint32_t:

    res = _lib_lvgl.py_lv_event_register_id()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_register_id.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_register_id.restype)
    )


_lib_lvgl.py__lv_event_mark_deleted.argtypes = __CArgList(
    target=void_t
)
_lib_lvgl.py__lv_event_mark_deleted.restype = None


def _event_mark_deleted(target: void_t) -> None:
    target = _convert_to_ctype(
        target, 
        _lib_lvgl.py__lv_event_mark_deleted.argtypes.target
    )

    _lib_lvgl.py__lv_event_mark_deleted(target)


_lib_lvgl.py_lv_img_buf_set_palette.argtypes = __CArgList(
    dsc=_ctypes.POINTER(img_dsc_t),
    id=uint8_t,
    c=color32_t
)
_lib_lvgl.py_lv_img_buf_set_palette.restype = None


def img_buf_set_palette(
    dsc: img_dsc_t,
    id: _type_uint8_t,
    c: color32_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_buf_set_palette.argtypes.dsc
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_img_buf_set_palette.argtypes.id
    )

    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_img_buf_set_palette.argtypes.c
    )

    _lib_lvgl.py_lv_img_buf_set_palette(dsc, id, c)


_lib_lvgl.py_lv_img_buf_free.argtypes = __CArgList(
    dsc=_ctypes.POINTER(img_dsc_t)
)
_lib_lvgl.py_lv_img_buf_free.restype = None


def img_buf_free(dsc: img_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_buf_free.argtypes.dsc
    )

    _lib_lvgl.py_lv_img_buf_free(dsc)


_lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes = __CArgList(
    res=_ctypes.POINTER(area_t),
    w=coord_t,
    h=coord_t,
    angle=coord_t,
    zoom=uint16_t,
    pivot=_ctypes.POINTER(point_t)
)
_lib_lvgl.py__lv_img_buf_get_transformed_area.restype = None


def _img_buf_get_transformed_area(
    res: area_t,
    w: coord_t,
    h: coord_t,
    angle: coord_t,
    zoom: _type_uint16_t,
    pivot: point_t
) -> None:
    res = _convert_to_ctype(
        res, 
        _lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes.res
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes.w
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes.h
    )

    angle = _convert_to_ctype(
        angle, 
        _lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes.angle
    )

    zoom = _convert_to_ctype(
        zoom, 
        _lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes.zoom
    )

    pivot = _convert_to_ctype(
        pivot, 
        _lib_lvgl.py__lv_img_buf_get_transformed_area.argtypes.pivot
    )

    _lib_lvgl.py__lv_img_buf_get_transformed_area(res, w, h, angle, zoom, pivot)


_lib_lvgl.py__lv_fs_init.argtypes = __CArgList()
_lib_lvgl.py__lv_fs_init.restype = None


def _fs_init() -> None:

    _lib_lvgl.py__lv_fs_init()


_lib_lvgl.py_lv_fs_drv_init.argtypes = __CArgList(
    drv=_ctypes.POINTER(fs_drv_t)
)
_lib_lvgl.py_lv_fs_drv_init.restype = None


def fs_drv_init(drv: fs_drv_t) -> None:
    drv = _convert_to_ctype(
        drv, 
        _lib_lvgl.py_lv_fs_drv_init.argtypes.drv
    )

    _lib_lvgl.py_lv_fs_drv_init(drv)


_lib_lvgl.py_lv_fs_drv_register.argtypes = __CArgList(
    drv=_ctypes.POINTER(fs_drv_t)
)
_lib_lvgl.py_lv_fs_drv_register.restype = None


def fs_drv_register(drv: fs_drv_t) -> None:
    drv = _convert_to_ctype(
        drv, 
        _lib_lvgl.py_lv_fs_drv_register.argtypes.drv
    )

    _lib_lvgl.py_lv_fs_drv_register(drv)


_lib_lvgl.py_lv_fs_get_drv.argtypes = __CArgList(
    letter=char_t
)
_lib_lvgl.py_lv_fs_get_drv.restype = _ctypes.POINTER(fs_drv_t)


def fs_get_drv(letter: _type_char_t) -> fs_drv_t:
    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py_lv_fs_get_drv.argtypes.letter
    )

    res = _lib_lvgl.py_lv_fs_get_drv(letter)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_get_drv.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_get_drv.restype)
    )


_lib_lvgl.py_lv_fs_is_ready.argtypes = __CArgList(
    letter=char_t
)
_lib_lvgl.py_lv_fs_is_ready.restype = bool_t


def fs_is_ready(letter: _type_char_t) -> bool_t:
    letter = _convert_to_ctype(
        letter, 
        _lib_lvgl.py_lv_fs_is_ready.argtypes.letter
    )

    res = _lib_lvgl.py_lv_fs_is_ready(letter)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_is_ready.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_is_ready.restype)
    )


_lib_lvgl.py_lv_fs_open.argtypes = __CArgList(
    file_p=_ctypes.POINTER(fs_file_t),
    path=_ctypes.POINTER(char_t),
    mode=fs_mode_t
)
_lib_lvgl.py_lv_fs_open.restype = fs_res_t


def fs_open(
    file_p: fs_file_t,
    path: _type_char_t,
    mode: fs_mode_t
) -> fs_res_t:
    file_p = _convert_to_ctype(
        file_p, 
        _lib_lvgl.py_lv_fs_open.argtypes.file_p
    )

    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_fs_open.argtypes.path
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_fs_open.argtypes.mode
    )

    res = _lib_lvgl.py_lv_fs_open(file_p, path, mode)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_open.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_open.restype)
    )


_lib_lvgl.py_lv_fs_close.argtypes = __CArgList(
    file_p=_ctypes.POINTER(fs_file_t)
)
_lib_lvgl.py_lv_fs_close.restype = fs_res_t


def fs_close(file_p: fs_file_t) -> fs_res_t:
    file_p = _convert_to_ctype(
        file_p, 
        _lib_lvgl.py_lv_fs_close.argtypes.file_p
    )

    res = _lib_lvgl.py_lv_fs_close(file_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_close.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_close.restype)
    )


_lib_lvgl.py_lv_fs_read.argtypes = __CArgList(
    file_p=_ctypes.POINTER(fs_file_t),
    buf=void_t,
    btr=uint32_t,
    br=_ctypes.POINTER(uint32_t)
)
_lib_lvgl.py_lv_fs_read.restype = fs_res_t


def fs_read(
    file_p: fs_file_t,
    buf: void_t,
    btr: _type_uint32_t,
    br: _type_uint32_t
) -> fs_res_t:
    file_p = _convert_to_ctype(
        file_p, 
        _lib_lvgl.py_lv_fs_read.argtypes.file_p
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_fs_read.argtypes.buf
    )

    btr = _convert_to_ctype(
        btr, 
        _lib_lvgl.py_lv_fs_read.argtypes.btr
    )

    br = _convert_to_ctype(
        br, 
        _lib_lvgl.py_lv_fs_read.argtypes.br
    )

    res = _lib_lvgl.py_lv_fs_read(file_p, buf, btr, br)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_read.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_read.restype)
    )


_lib_lvgl.py_lv_fs_write.argtypes = __CArgList(
    file_p=_ctypes.POINTER(fs_file_t),
    buf=void_t,
    btw=uint32_t,
    bw=_ctypes.POINTER(uint32_t)
)
_lib_lvgl.py_lv_fs_write.restype = fs_res_t


def fs_write(
    file_p: fs_file_t,
    buf: void_t,
    btw: _type_uint32_t,
    bw: _type_uint32_t
) -> fs_res_t:
    file_p = _convert_to_ctype(
        file_p, 
        _lib_lvgl.py_lv_fs_write.argtypes.file_p
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_fs_write.argtypes.buf
    )

    btw = _convert_to_ctype(
        btw, 
        _lib_lvgl.py_lv_fs_write.argtypes.btw
    )

    bw = _convert_to_ctype(
        bw, 
        _lib_lvgl.py_lv_fs_write.argtypes.bw
    )

    res = _lib_lvgl.py_lv_fs_write(file_p, buf, btw, bw)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_write.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_write.restype)
    )


_lib_lvgl.py_lv_fs_seek.argtypes = __CArgList(
    file_p=_ctypes.POINTER(fs_file_t),
    pos=uint32_t,
    whence=fs_whence_t
)
_lib_lvgl.py_lv_fs_seek.restype = fs_res_t


def fs_seek(
    file_p: fs_file_t,
    pos: _type_uint32_t,
    whence: _type_fs_whence_t
) -> fs_res_t:
    file_p = _convert_to_ctype(
        file_p, 
        _lib_lvgl.py_lv_fs_seek.argtypes.file_p
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_fs_seek.argtypes.pos
    )

    whence = _convert_to_ctype(
        whence, 
        _lib_lvgl.py_lv_fs_seek.argtypes.whence
    )

    res = _lib_lvgl.py_lv_fs_seek(file_p, pos, whence)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_seek.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_seek.restype)
    )


_lib_lvgl.py_lv_fs_tell.argtypes = __CArgList(
    file_p=_ctypes.POINTER(fs_file_t),
    pos=_ctypes.POINTER(uint32_t)
)
_lib_lvgl.py_lv_fs_tell.restype = fs_res_t


def fs_tell(
    file_p: fs_file_t,
    pos: _type_uint32_t
) -> fs_res_t:
    file_p = _convert_to_ctype(
        file_p, 
        _lib_lvgl.py_lv_fs_tell.argtypes.file_p
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_fs_tell.argtypes.pos
    )

    res = _lib_lvgl.py_lv_fs_tell(file_p, pos)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_tell.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_tell.restype)
    )


_lib_lvgl.py_lv_fs_dir_open.argtypes = __CArgList(
    rddir_p=_ctypes.POINTER(fs_dir_t),
    path=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_fs_dir_open.restype = fs_res_t


def fs_dir_open(
    rddir_p: fs_dir_t,
    path: _type_char_t
) -> fs_res_t:
    rddir_p = _convert_to_ctype(
        rddir_p, 
        _lib_lvgl.py_lv_fs_dir_open.argtypes.rddir_p
    )

    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_fs_dir_open.argtypes.path
    )

    res = _lib_lvgl.py_lv_fs_dir_open(rddir_p, path)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_dir_open.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_dir_open.restype)
    )


_lib_lvgl.py_lv_fs_dir_read.argtypes = __CArgList(
    rddir_p=_ctypes.POINTER(fs_dir_t),
    fn=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_fs_dir_read.restype = fs_res_t


def fs_dir_read(
    rddir_p: fs_dir_t,
    fn: _type_char_t
) -> fs_res_t:
    rddir_p = _convert_to_ctype(
        rddir_p, 
        _lib_lvgl.py_lv_fs_dir_read.argtypes.rddir_p
    )

    fn = _convert_to_ctype(
        fn, 
        _lib_lvgl.py_lv_fs_dir_read.argtypes.fn
    )

    res = _lib_lvgl.py_lv_fs_dir_read(rddir_p, fn)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_dir_read.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_dir_read.restype)
    )


_lib_lvgl.py_lv_fs_dir_close.argtypes = __CArgList(
    rddir_p=_ctypes.POINTER(fs_dir_t)
)
_lib_lvgl.py_lv_fs_dir_close.restype = fs_res_t


def fs_dir_close(rddir_p: fs_dir_t) -> fs_res_t:
    rddir_p = _convert_to_ctype(
        rddir_p, 
        _lib_lvgl.py_lv_fs_dir_close.argtypes.rddir_p
    )

    res = _lib_lvgl.py_lv_fs_dir_close(rddir_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_dir_close.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_dir_close.restype)
    )


_lib_lvgl.py_lv_fs_get_letters.argtypes = __CArgList(
    buf=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_fs_get_letters.restype = _ctypes.POINTER(char_t)


def fs_get_letters(buf: _type_char_t) -> char_t:
    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_fs_get_letters.argtypes.buf
    )

    res = _lib_lvgl.py_lv_fs_get_letters(buf)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_get_letters.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_get_letters.restype)
    )


_lib_lvgl.py_lv_fs_get_ext.argtypes = __CArgList(
    fn=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_fs_get_ext.restype = _ctypes.POINTER(char_t)


def fs_get_ext(fn: _type_char_t) -> char_t:
    fn = _convert_to_ctype(
        fn, 
        _lib_lvgl.py_lv_fs_get_ext.argtypes.fn
    )

    res = _lib_lvgl.py_lv_fs_get_ext(fn)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_get_ext.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_get_ext.restype)
    )


_lib_lvgl.py_lv_fs_up.argtypes = __CArgList(
    path=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_fs_up.restype = _ctypes.POINTER(char_t)


def fs_up(path: _type_char_t) -> char_t:
    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_fs_up.argtypes.path
    )

    res = _lib_lvgl.py_lv_fs_up(path)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_up.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_up.restype)
    )


_lib_lvgl.py_lv_fs_get_last.argtypes = __CArgList(
    path=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_fs_get_last.restype = _ctypes.POINTER(char_t)


def fs_get_last(path: _type_char_t) -> char_t:
    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_fs_get_last.argtypes.path
    )

    res = _lib_lvgl.py_lv_fs_get_last(path)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_fs_get_last.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_fs_get_last.restype)
    )


_lib_lvgl.py__lv_img_decoder_init.argtypes = __CArgList()
_lib_lvgl.py__lv_img_decoder_init.restype = None


def _img_decoder_init() -> None:

    _lib_lvgl.py__lv_img_decoder_init()


_lib_lvgl.py_lv_img_decoder_get_info.argtypes = __CArgList(
    src=void_t,
    header=_ctypes.POINTER(img_header_t)
)
_lib_lvgl.py_lv_img_decoder_get_info.restype = res_t


def img_decoder_get_info(
    src: void_t,
    header: img_header_t
) -> res_t:
    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_img_decoder_get_info.argtypes.src
    )

    header = _convert_to_ctype(
        header, 
        _lib_lvgl.py_lv_img_decoder_get_info.argtypes.header
    )

    res = _lib_lvgl.py_lv_img_decoder_get_info(src, header)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_decoder_get_info.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_decoder_get_info.restype)
    )


_lib_lvgl.py_lv_img_decoder_open.argtypes = __CArgList(
    dsc=_ctypes.POINTER(img_decoder_dsc_t),
    src=void_t,
    color=color_t,
    frame_id=int32_t
)
_lib_lvgl.py_lv_img_decoder_open.restype = res_t


def img_decoder_open(
    dsc: img_decoder_dsc_t,
    src: void_t,
    color: color_t,
    frame_id: _type_int32_t
) -> res_t:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_decoder_open.argtypes.dsc
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_img_decoder_open.argtypes.src
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_img_decoder_open.argtypes.color
    )

    frame_id = _convert_to_ctype(
        frame_id, 
        _lib_lvgl.py_lv_img_decoder_open.argtypes.frame_id
    )

    res = _lib_lvgl.py_lv_img_decoder_open(dsc, src, color, frame_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_decoder_open.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_decoder_open.restype)
    )


_lib_lvgl.py_lv_img_decoder_read_line.argtypes = __CArgList(
    dsc=_ctypes.POINTER(img_decoder_dsc_t),
    x=coord_t,
    y=coord_t,
    len=coord_t,
    buf=_ctypes.POINTER(uint8_t)
)
_lib_lvgl.py_lv_img_decoder_read_line.restype = res_t


def img_decoder_read_line(
    dsc: img_decoder_dsc_t,
    x: coord_t,
    y: coord_t,
    len: coord_t,
    buf: _type_uint8_t
) -> res_t:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_decoder_read_line.argtypes.dsc
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_img_decoder_read_line.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_img_decoder_read_line.argtypes.y
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py_lv_img_decoder_read_line.argtypes.len
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_img_decoder_read_line.argtypes.buf
    )

    res = _lib_lvgl.py_lv_img_decoder_read_line(dsc, x, y, len, buf)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_decoder_read_line.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_decoder_read_line.restype)
    )


_lib_lvgl.py_lv_img_decoder_close.argtypes = __CArgList(
    dsc=_ctypes.POINTER(img_decoder_dsc_t)
)
_lib_lvgl.py_lv_img_decoder_close.restype = None


def img_decoder_close(dsc: img_decoder_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_decoder_close.argtypes.dsc
    )

    _lib_lvgl.py_lv_img_decoder_close(dsc)


_lib_lvgl.py_lv_img_decoder_create.argtypes = __CArgList()
_lib_lvgl.py_lv_img_decoder_create.restype = _ctypes.POINTER(img_decoder_t)


def img_decoder_create() -> img_decoder_t:

    res = _lib_lvgl.py_lv_img_decoder_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_decoder_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_decoder_create.restype)
    )


_lib_lvgl.py_lv_img_decoder_delete.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t)
)
_lib_lvgl.py_lv_img_decoder_delete.restype = None


def img_decoder_delete(decoder: img_decoder_t) -> None:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_delete.argtypes.decoder
    )

    _lib_lvgl.py_lv_img_decoder_delete(decoder)


_lib_lvgl.py_lv_img_decoder_set_info_cb.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    info_cb=img_decoder_info_f_t
)
_lib_lvgl.py_lv_img_decoder_set_info_cb.restype = None


_img_callback_storage = {}


def _img_weakref_callback(ref):
    if ref in _img_callback_storage:
        del _img_callback_storage[ref]


def img_decoder_set_info_cb(
    decoder: img_decoder_t,
    info_cb: img_decoder_info_f_t
) -> None:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_set_info_cb.argtypes.decoder
    )

    if inspect.ismethod(info_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': info_cb.__hash__}
        )
        ref = weakmethod(info_cb, _img_weakref_callback)
    elif inspect.isfunction(info_cb):
        ref = weakref.ref(info_cb, _img_weakref_callback)
    else:
        raise TypeError

    if ref not in _img_callback_storage:
        info_cb = img_decoder_info_f_t(info_cb)
        _img_callback_storage[ref] = info_cb
    else:
        info_cb = _img_callback_storage[ref]

    _lib_lvgl.py_lv_img_decoder_set_info_cb(decoder, info_cb)


_lib_lvgl.py_lv_img_decoder_set_open_cb.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    open_cb=img_decoder_open_f_t
)
_lib_lvgl.py_lv_img_decoder_set_open_cb.restype = None


def img_decoder_set_open_cb(
    decoder: img_decoder_t,
    open_cb: img_decoder_open_f_t
) -> None:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_set_open_cb.argtypes.decoder
    )

    if inspect.ismethod(open_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': open_cb.__hash__}
        )
        ref = weakmethod(open_cb, _img_weakref_callback)
    elif inspect.isfunction(open_cb):
        ref = weakref.ref(open_cb, _img_weakref_callback)
    else:
        raise TypeError

    if ref not in _img_callback_storage:
        open_cb = img_decoder_open_f_t(open_cb)
        _img_callback_storage[ref] = open_cb
    else:
        open_cb = _img_callback_storage[ref]

    _lib_lvgl.py_lv_img_decoder_set_open_cb(decoder, open_cb)


_lib_lvgl.py_lv_img_decoder_set_read_line_cb.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    read_line_cb=img_decoder_read_line_f_t
)
_lib_lvgl.py_lv_img_decoder_set_read_line_cb.restype = None


def img_decoder_set_read_line_cb(
    decoder: img_decoder_t,
    read_line_cb: img_decoder_read_line_f_t
) -> None:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_set_read_line_cb.argtypes.decoder
    )

    if inspect.ismethod(read_line_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': read_line_cb.__hash__}
        )
        ref = weakmethod(read_line_cb, _img_weakref_callback)
    elif inspect.isfunction(read_line_cb):
        ref = weakref.ref(read_line_cb, _img_weakref_callback)
    else:
        raise TypeError

    if ref not in _img_callback_storage:
        read_line_cb = img_decoder_read_line_f_t(read_line_cb)
        _img_callback_storage[ref] = read_line_cb
    else:
        read_line_cb = _img_callback_storage[ref]

    _lib_lvgl.py_lv_img_decoder_set_read_line_cb(decoder, read_line_cb)


_lib_lvgl.py_lv_img_decoder_set_close_cb.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    close_cb=img_decoder_close_f_t
)
_lib_lvgl.py_lv_img_decoder_set_close_cb.restype = None


def img_decoder_set_close_cb(
    decoder: img_decoder_t,
    close_cb: img_decoder_close_f_t
) -> None:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_set_close_cb.argtypes.decoder
    )

    if inspect.ismethod(close_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': close_cb.__hash__}
        )
        ref = weakmethod(close_cb, _img_weakref_callback)
    elif inspect.isfunction(close_cb):
        ref = weakref.ref(close_cb, _img_weakref_callback)
    else:
        raise TypeError

    if ref not in _img_callback_storage:
        close_cb = img_decoder_close_f_t(close_cb)
        _img_callback_storage[ref] = close_cb
    else:
        close_cb = _img_callback_storage[ref]

    _lib_lvgl.py_lv_img_decoder_set_close_cb(decoder, close_cb)


_lib_lvgl.py_lv_img_decoder_built_in_info.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    src=void_t,
    header=_ctypes.POINTER(img_header_t)
)
_lib_lvgl.py_lv_img_decoder_built_in_info.restype = res_t


def img_decoder_built_in_info(
    decoder: img_decoder_t,
    src: void_t,
    header: img_header_t
) -> res_t:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_built_in_info.argtypes.decoder
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_img_decoder_built_in_info.argtypes.src
    )

    header = _convert_to_ctype(
        header, 
        _lib_lvgl.py_lv_img_decoder_built_in_info.argtypes.header
    )

    res = _lib_lvgl.py_lv_img_decoder_built_in_info(decoder, src, header)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_decoder_built_in_info.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_decoder_built_in_info.restype)
    )


_lib_lvgl.py_lv_img_decoder_built_in_open.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    dsc=_ctypes.POINTER(img_decoder_dsc_t)
)
_lib_lvgl.py_lv_img_decoder_built_in_open.restype = res_t


def img_decoder_built_in_open(
    decoder: img_decoder_t,
    dsc: img_decoder_dsc_t
) -> res_t:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_built_in_open.argtypes.decoder
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_decoder_built_in_open.argtypes.dsc
    )

    res = _lib_lvgl.py_lv_img_decoder_built_in_open(decoder, dsc)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_decoder_built_in_open.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_decoder_built_in_open.restype)
    )


_lib_lvgl.py_lv_img_decoder_built_in_close.argtypes = __CArgList(
    decoder=_ctypes.POINTER(img_decoder_t),
    dsc=_ctypes.POINTER(img_decoder_dsc_t)
)
_lib_lvgl.py_lv_img_decoder_built_in_close.restype = None


def img_decoder_built_in_close(
    decoder: img_decoder_t,
    dsc: img_decoder_dsc_t
) -> None:
    decoder = _convert_to_ctype(
        decoder, 
        _lib_lvgl.py_lv_img_decoder_built_in_close.argtypes.decoder
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_img_decoder_built_in_close.argtypes.dsc
    )

    _lib_lvgl.py_lv_img_decoder_built_in_close(decoder, dsc)


_lib_lvgl.py_lv_img_cache_manager_init.argtypes = __CArgList(
    manager=_ctypes.POINTER(img_cache_manager_t)
)
_lib_lvgl.py_lv_img_cache_manager_init.restype = None


def img_cache_manager_init(
    manager: img_cache_manager_t
) -> None:
    manager = _convert_to_ctype(
        manager, 
        _lib_lvgl.py_lv_img_cache_manager_init.argtypes.manager
    )

    _lib_lvgl.py_lv_img_cache_manager_init(manager)


_lib_lvgl.py_lv_img_cache_manager_apply.argtypes = __CArgList(
    manager=_ctypes.POINTER(img_cache_manager_t)
)
_lib_lvgl.py_lv_img_cache_manager_apply.restype = None


def img_cache_manager_apply(
    manager: img_cache_manager_t
) -> None:
    manager = _convert_to_ctype(
        manager, 
        _lib_lvgl.py_lv_img_cache_manager_apply.argtypes.manager
    )

    _lib_lvgl.py_lv_img_cache_manager_apply(manager)


_lib_lvgl.py__lv_img_cache_open.argtypes = __CArgList(
    src=void_t,
    color=color_t,
    frame_id=int32_t
)
_lib_lvgl.py__lv_img_cache_open.restype = _ctypes.POINTER(_img_cache_entry_t)


def _img_cache_open(
    src: void_t,
    color: color_t,
    frame_id: _type_int32_t
) -> _img_cache_entry_t:
    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py__lv_img_cache_open.argtypes.src
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py__lv_img_cache_open.argtypes.color
    )

    frame_id = _convert_to_ctype(
        frame_id, 
        _lib_lvgl.py__lv_img_cache_open.argtypes.frame_id
    )

    res = _lib_lvgl.py__lv_img_cache_open(src, color, frame_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_img_cache_open.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_img_cache_open.restype)
    )


_lib_lvgl.py_lv_img_cache_set_size.argtypes = __CArgList(
    new_entry_cnt=uint16_t
)
_lib_lvgl.py_lv_img_cache_set_size.restype = None


def img_cache_set_size(
    new_entry_cnt: _type_uint16_t
) -> None:
    new_entry_cnt = _convert_to_ctype(
        new_entry_cnt, 
        _lib_lvgl.py_lv_img_cache_set_size.argtypes.new_entry_cnt
    )

    _lib_lvgl.py_lv_img_cache_set_size(new_entry_cnt)


_lib_lvgl.py_lv_img_cache_invalidate_src.argtypes = __CArgList(
    src=void_t
)
_lib_lvgl.py_lv_img_cache_invalidate_src.restype = None


def img_cache_invalidate_src(src: void_t) -> None:
    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_img_cache_invalidate_src.argtypes.src
    )

    _lib_lvgl.py_lv_img_cache_invalidate_src(src)


_lib_lvgl.py_lv_draw_init.argtypes = __CArgList()
_lib_lvgl.py_lv_draw_init.restype = None


def draw_init() -> None:

    _lib_lvgl.py_lv_draw_init()


_lib_lvgl.py_lv_draw_create_unit.argtypes = __CArgList(
    size=size_t
)
_lib_lvgl.py_lv_draw_create_unit.restype = void_t


def draw_create_unit(size: _type_size_t) -> void_t:
    size = _convert_to_ctype(
        size, 
        _lib_lvgl.py_lv_draw_create_unit.argtypes.size
    )

    res = _lib_lvgl.py_lv_draw_create_unit(size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_draw_create_unit.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_draw_create_unit.restype)
    )


_lib_lvgl.py_lv_draw_add_task.argtypes = __CArgList(
    layer=_ctypes.POINTER(layer_t),
    coords=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_add_task.restype = _ctypes.POINTER(draw_task_t)


def draw_add_task(
    layer: layer_t,
    coords: area_t
) -> draw_task_t:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_add_task.argtypes.layer
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_draw_add_task.argtypes.coords
    )

    res = _lib_lvgl.py_lv_draw_add_task(layer, coords)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_draw_add_task.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_draw_add_task.restype)
    )


_lib_lvgl.py_lv_draw_finalize_task_creation.argtypes = __CArgList(
    layer=_ctypes.POINTER(layer_t),
    t=_ctypes.POINTER(draw_task_t)
)
_lib_lvgl.py_lv_draw_finalize_task_creation.restype = None


def draw_finalize_task_creation(
    layer: layer_t,
    t: draw_task_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_finalize_task_creation.argtypes.layer
    )

    t = _convert_to_ctype(
        t, 
        _lib_lvgl.py_lv_draw_finalize_task_creation.argtypes.t
    )

    _lib_lvgl.py_lv_draw_finalize_task_creation(layer, t)


_lib_lvgl.py_lv_draw_dispatch.argtypes = __CArgList()
_lib_lvgl.py_lv_draw_dispatch.restype = None


def draw_dispatch() -> None:

    _lib_lvgl.py_lv_draw_dispatch()


_lib_lvgl.py_lv_draw_dispatch_layer.argtypes = __CArgList(
    disp=_ctypes.POINTER(_disp_t),
    layer=_ctypes.POINTER(layer_t)
)
_lib_lvgl.py_lv_draw_dispatch_layer.restype = bool_t


def draw_dispatch_layer(
    disp: _disp_t,
    layer: layer_t
) -> bool_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_draw_dispatch_layer.argtypes.disp
    )

    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_dispatch_layer.argtypes.layer
    )

    res = _lib_lvgl.py_lv_draw_dispatch_layer(disp, layer)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_draw_dispatch_layer.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_draw_dispatch_layer.restype)
    )


_lib_lvgl.py_lv_draw_dispatch_wait_for_request.argtypes = __CArgList()
_lib_lvgl.py_lv_draw_dispatch_wait_for_request.restype = None


def draw_dispatch_wait_for_request() -> None:

    _lib_lvgl.py_lv_draw_dispatch_wait_for_request()


_lib_lvgl.py_lv_draw_dispatch_request.argtypes = __CArgList()
_lib_lvgl.py_lv_draw_dispatch_request.restype = None


def draw_dispatch_request() -> None:

    _lib_lvgl.py_lv_draw_dispatch_request()


_lib_lvgl.py_lv_draw_get_next_available_task.argtypes = __CArgList(
    layer=_ctypes.POINTER(layer_t),
    t_prev=_ctypes.POINTER(draw_task_t)
)
_lib_lvgl.py_lv_draw_get_next_available_task.restype = _ctypes.POINTER(draw_task_t)


def draw_get_next_available_task(
    layer: layer_t,
    t_prev: draw_task_t
) -> draw_task_t:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_get_next_available_task.argtypes.layer
    )

    t_prev = _convert_to_ctype(
        t_prev, 
        _lib_lvgl.py_lv_draw_get_next_available_task.argtypes.t_prev
    )

    res = _lib_lvgl.py_lv_draw_get_next_available_task(layer, t_prev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_draw_get_next_available_task.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_draw_get_next_available_task.restype)
    )


_lib_lvgl.py_lv_draw_layer_create.argtypes = __CArgList(
    parent_layer=_ctypes.POINTER(layer_t),
    color_format=color_format_t,
    area=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_layer_create.restype = _ctypes.POINTER(layer_t)


def draw_layer_create(
    parent_layer: layer_t,
    color_format: color_format_t,
    area: area_t
) -> layer_t:
    parent_layer = _convert_to_ctype(
        parent_layer, 
        _lib_lvgl.py_lv_draw_layer_create.argtypes.parent_layer
    )

    color_format = _convert_to_ctype(
        color_format, 
        _lib_lvgl.py_lv_draw_layer_create.argtypes.color_format
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_draw_layer_create.argtypes.area
    )

    res = _lib_lvgl.py_lv_draw_layer_create(parent_layer, color_format, area)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_draw_layer_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_draw_layer_create.restype)
    )


_lib_lvgl.py_lv_draw_add_used_layer_size.argtypes = __CArgList(
    kb=uint32_t
)
_lib_lvgl.py_lv_draw_add_used_layer_size.restype = None


def draw_add_used_layer_size(
    kb: _type_uint32_t
) -> None:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_draw_add_used_layer_size.argtypes.kb
    )

    _lib_lvgl.py_lv_draw_add_used_layer_size(kb)


_lib_lvgl.py_lv_gradient_color_calculate.argtypes = __CArgList(
    dsc=_ctypes.POINTER(grad_dsc_t),
    range=coord_t,
    frac=coord_t,
    color_out=_ctypes.POINTER(grad_color_t),
    opa_out=_ctypes.POINTER(opa_t)
)
_lib_lvgl.py_lv_gradient_color_calculate.restype = None


def gradient_color_calculate(
    dsc: grad_dsc_t,
    range: coord_t,
    frac: coord_t,
    color_out: grad_color_t,
    opa_out: opa_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_gradient_color_calculate.argtypes.dsc
    )

    range = _convert_to_ctype(
        range, 
        _lib_lvgl.py_lv_gradient_color_calculate.argtypes.range
    )

    frac = _convert_to_ctype(
        frac, 
        _lib_lvgl.py_lv_gradient_color_calculate.argtypes.frac
    )

    color_out = _convert_to_ctype(
        color_out, 
        _lib_lvgl.py_lv_gradient_color_calculate.argtypes.color_out
    )

    opa_out = _convert_to_ctype(
        opa_out, 
        _lib_lvgl.py_lv_gradient_color_calculate.argtypes.opa_out
    )

    _lib_lvgl.py_lv_gradient_color_calculate(dsc, range, frac, color_out, opa_out)


_lib_lvgl.py_lv_gradient_get.argtypes = __CArgList(
    gradient=_ctypes.POINTER(grad_dsc_t),
    w=coord_t,
    h=coord_t
)
_lib_lvgl.py_lv_gradient_get.restype = _ctypes.POINTER(grad_t)


def gradient_get(
    gradient: grad_dsc_t,
    w: coord_t,
    h: coord_t
) -> grad_t:
    gradient = _convert_to_ctype(
        gradient, 
        _lib_lvgl.py_lv_gradient_get.argtypes.gradient
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_gradient_get.argtypes.w
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_gradient_get.argtypes.h
    )

    res = _lib_lvgl.py_lv_gradient_get(gradient, w, h)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_gradient_get.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_gradient_get.restype)
    )


_lib_lvgl.py_lv_gradient_cleanup.argtypes = __CArgList(
    grad=_ctypes.POINTER(grad_t)
)
_lib_lvgl.py_lv_gradient_cleanup.restype = None


def gradient_cleanup(grad: grad_t) -> None:
    grad = _convert_to_ctype(
        grad, 
        _lib_lvgl.py_lv_gradient_cleanup.argtypes.grad
    )

    _lib_lvgl.py_lv_gradient_cleanup(grad)


_lib_lvgl.py_lv_draw_rect_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_rect_dsc_t)
)
_lib_lvgl.py_lv_draw_rect_dsc_init.restype = None


def draw_rect_dsc_init(dsc: draw_rect_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_rect_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_rect_dsc_init(dsc)


_lib_lvgl.py_lv_draw_fill_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_fill_dsc_t)
)
_lib_lvgl.py_lv_draw_fill_dsc_init.restype = None


def draw_fill_dsc_init(dsc: draw_fill_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_fill_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_fill_dsc_init(dsc)


_lib_lvgl.py_lv_draw_border_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_border_dsc_t)
)
_lib_lvgl.py_lv_draw_border_dsc_init.restype = None


def draw_border_dsc_init(
    dsc: draw_border_dsc_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_border_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_border_dsc_init(dsc)


_lib_lvgl.py_lv_draw_box_shadow_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_box_shadow_dsc_t)
)
_lib_lvgl.py_lv_draw_box_shadow_dsc_init.restype = None


def draw_box_shadow_dsc_init(
    dsc: draw_box_shadow_dsc_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_box_shadow_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_box_shadow_dsc_init(dsc)


_lib_lvgl.py_lv_draw_bg_img_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_bg_img_dsc_t)
)
_lib_lvgl.py_lv_draw_bg_img_dsc_init.restype = None


def draw_bg_img_dsc_init(
    dsc: draw_bg_img_dsc_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_bg_img_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_bg_img_dsc_init(dsc)


_lib_lvgl.py_lv_draw_rect.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    dsc=_ctypes.POINTER(draw_rect_dsc_t),
    coords=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_rect.restype = None


def draw_rect(
    layer: _layer_t,
    dsc: draw_rect_dsc_t,
    coords: area_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_rect.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_rect.argtypes.dsc
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_draw_rect.argtypes.coords
    )

    _lib_lvgl.py_lv_draw_rect(layer, dsc, coords)


_lib_lvgl.py_lv_draw_label_interate_letters.argtypes = __CArgList(
    draw_unit=_ctypes.POINTER(draw_unit_t),
    dsc=_ctypes.POINTER(draw_label_dsc_t),
    coords=_ctypes.POINTER(area_t),
    cb=draw_letter_cb_t
)
_lib_lvgl.py_lv_draw_label_interate_letters.restype = None


_draw_callback_storage = {}


def _draw_weakref_callback(ref):
    if ref in _draw_callback_storage:
        del _draw_callback_storage[ref]


def draw_label_interate_letters(
    draw_unit: draw_unit_t,
    dsc: draw_label_dsc_t,
    coords: area_t,
    cb: draw_letter_cb_t
) -> None:
    draw_unit = _convert_to_ctype(
        draw_unit, 
        _lib_lvgl.py_lv_draw_label_interate_letters.argtypes.draw_unit
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_label_interate_letters.argtypes.dsc
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_draw_label_interate_letters.argtypes.coords
    )

    if inspect.ismethod(cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': cb.__hash__}
        )
        ref = weakmethod(cb, _draw_weakref_callback)
    elif inspect.isfunction(cb):
        ref = weakref.ref(cb, _draw_weakref_callback)
    else:
        raise TypeError

    if ref not in _draw_callback_storage:
        cb = draw_letter_cb_t(cb)
        _draw_callback_storage[ref] = cb
    else:
        cb = _draw_callback_storage[ref]

    _lib_lvgl.py_lv_draw_label_interate_letters(draw_unit, dsc, coords, cb)


_lib_lvgl.py_lv_draw_label_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_label_dsc_t)
)
_lib_lvgl.py_lv_draw_label_dsc_init.restype = None


def draw_label_dsc_init(dsc: draw_label_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_label_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_label_dsc_init(dsc)


_lib_lvgl.py_lv_draw_letter_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_glyph_dsc_t)
)
_lib_lvgl.py_lv_draw_letter_dsc_init.restype = None


def draw_letter_dsc_init(
    dsc: draw_glyph_dsc_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_letter_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_letter_dsc_init(dsc)


_lib_lvgl.py_lv_draw_label.argtypes = __CArgList(
    layer=_ctypes.POINTER(layer_t),
    dsc=_ctypes.POINTER(draw_label_dsc_t),
    coords=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_label.restype = None


def draw_label(
    layer: layer_t,
    dsc: draw_label_dsc_t,
    coords: area_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_label.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_label.argtypes.dsc
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_draw_label.argtypes.coords
    )

    _lib_lvgl.py_lv_draw_label(layer, dsc, coords)


_lib_lvgl.py_lv_draw_letter.argtypes = __CArgList(
    layer=_ctypes.POINTER(layer_t),
    dsc=_ctypes.POINTER(draw_label_dsc_t),
    point=_ctypes.POINTER(point_t),
    unicode_letter=uint32_t
)
_lib_lvgl.py_lv_draw_letter.restype = None


def draw_letter(
    layer: layer_t,
    dsc: draw_label_dsc_t,
    point: point_t,
    unicode_letter: _type_uint32_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_letter.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_letter.argtypes.dsc
    )

    point = _convert_to_ctype(
        point, 
        _lib_lvgl.py_lv_draw_letter.argtypes.point
    )

    unicode_letter = _convert_to_ctype(
        unicode_letter, 
        _lib_lvgl.py_lv_draw_letter.argtypes.unicode_letter
    )

    _lib_lvgl.py_lv_draw_letter(layer, dsc, point, unicode_letter)


_lib_lvgl.py_lv_draw_img_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_img_dsc_t)
)
_lib_lvgl.py_lv_draw_img_dsc_init.restype = None


def draw_img_dsc_init(dsc: draw_img_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_img_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_img_dsc_init(dsc)


_lib_lvgl.py_lv_draw_img.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    dsc=_ctypes.POINTER(draw_img_dsc_t),
    coords=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_img.restype = None


def draw_img(
    layer: _layer_t,
    dsc: draw_img_dsc_t,
    coords: area_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_img.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_img.argtypes.dsc
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_draw_img.argtypes.coords
    )

    _lib_lvgl.py_lv_draw_img(layer, dsc, coords)


_lib_lvgl.py_lv_draw_layer.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    dsc=_ctypes.POINTER(draw_img_dsc_t),
    coords=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_layer.restype = None


def draw_layer(
    layer: _layer_t,
    dsc: draw_img_dsc_t,
    coords: area_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_layer.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_layer.argtypes.dsc
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_draw_layer.argtypes.coords
    )

    _lib_lvgl.py_lv_draw_layer(layer, dsc, coords)


_lib_lvgl.py_lv_img_src_get_type.argtypes = __CArgList(
    src=void_t
)
_lib_lvgl.py_lv_img_src_get_type.restype = img_src_t


def img_src_get_type(src: void_t) -> img_src_t:
    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_img_src_get_type.argtypes.src
    )

    res = _lib_lvgl.py_lv_img_src_get_type(src)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_src_get_type.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_src_get_type.restype)
    )


_lib_lvgl.py_lv_draw_arc_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_arc_dsc_t)
)
_lib_lvgl.py_lv_draw_arc_dsc_init.restype = None


def draw_arc_dsc_init(dsc: draw_arc_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_arc_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_arc_dsc_init(dsc)


_lib_lvgl.py_lv_draw_arc.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    dsc=_ctypes.POINTER(draw_arc_dsc_t)
)
_lib_lvgl.py_lv_draw_arc.restype = None


def draw_arc(
    layer: _layer_t,
    dsc: draw_arc_dsc_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_arc.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_arc.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_arc(layer, dsc)


_lib_lvgl.py_lv_draw_arc_get_area.argtypes = __CArgList(
    x=coord_t,
    y=coord_t,
    radius=uint16_t,
    start_angle=uint16_t,
    end_angle=uint16_t,
    w=coord_t,
    rounded=bool_t,
    area=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_draw_arc_get_area.restype = None


def draw_arc_get_area(
    x: coord_t,
    y: coord_t,
    radius: _type_uint16_t,
    start_angle: _type_uint16_t,
    end_angle: _type_uint16_t,
    w: coord_t,
    rounded: _type_bool_t,
    area: area_t
) -> None:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.y
    )

    radius = _convert_to_ctype(
        radius, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.radius
    )

    start_angle = _convert_to_ctype(
        start_angle, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.start_angle
    )

    end_angle = _convert_to_ctype(
        end_angle, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.end_angle
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.w
    )

    rounded = _convert_to_ctype(
        rounded, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.rounded
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_draw_arc_get_area.argtypes.area
    )

    _lib_lvgl.py_lv_draw_arc_get_area(x, y, radius, start_angle, end_angle, w, rounded, area)


_lib_lvgl.py_lv_draw_line_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_line_dsc_t)
)
_lib_lvgl.py_lv_draw_line_dsc_init.restype = None


def draw_line_dsc_init(dsc: draw_line_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_line_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_line_dsc_init(dsc)


_lib_lvgl.py_lv_draw_line.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    dsc=_ctypes.POINTER(draw_line_dsc_t)
)
_lib_lvgl.py_lv_draw_line.restype = None


def draw_line(
    layer: _layer_t,
    dsc: draw_line_dsc_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_line.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_line.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_line(layer, dsc)


_lib_lvgl.py_lv_draw_triangle_dsc_init.argtypes = __CArgList(
    draw_dsc=_ctypes.POINTER(draw_triangle_dsc_t)
)
_lib_lvgl.py_lv_draw_triangle_dsc_init.restype = None


def draw_triangle_dsc_init(
    draw_dsc: draw_triangle_dsc_t
) -> None:
    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_draw_triangle_dsc_init.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_draw_triangle_dsc_init(draw_dsc)


_lib_lvgl.py_lv_draw_triangle.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    draw_dsc=_ctypes.POINTER(draw_triangle_dsc_t)
)
_lib_lvgl.py_lv_draw_triangle.restype = None


def draw_triangle(
    layer: _layer_t,
    draw_dsc: draw_triangle_dsc_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_triangle.argtypes.layer
    )

    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_draw_triangle.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_draw_triangle(layer, draw_dsc)


_lib_lvgl.py_lv_draw_mask_rect_dsc_init.argtypes = __CArgList(
    dsc=_ctypes.POINTER(draw_mask_rect_dsc_t)
)
_lib_lvgl.py_lv_draw_mask_rect_dsc_init.restype = None


def draw_mask_rect_dsc_init(
    dsc: draw_mask_rect_dsc_t
) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_mask_rect_dsc_init.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_mask_rect_dsc_init(dsc)


_lib_lvgl.py_lv_draw_mask_rect.argtypes = __CArgList(
    layer=_ctypes.POINTER(_layer_t),
    dsc=_ctypes.POINTER(draw_mask_rect_dsc_t)
)
_lib_lvgl.py_lv_draw_mask_rect.restype = None


def draw_mask_rect(
    layer: _layer_t,
    dsc: draw_mask_rect_dsc_t
) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_draw_mask_rect.argtypes.layer
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_draw_mask_rect.argtypes.dsc
    )

    _lib_lvgl.py_lv_draw_mask_rect(layer, dsc)


_lib_lvgl.py_lv_disp_create.argtypes = __CArgList(
    hor_res=coord_t,
    ver_res=coord_t
)
_lib_lvgl.py_lv_disp_create.restype = _ctypes.POINTER(disp_t)


def disp_create(
    hor_res: coord_t,
    ver_res: coord_t
) -> disp_t:
    hor_res = _convert_to_ctype(
        hor_res, 
        _lib_lvgl.py_lv_disp_create.argtypes.hor_res
    )

    ver_res = _convert_to_ctype(
        ver_res, 
        _lib_lvgl.py_lv_disp_create.argtypes.ver_res
    )

    res = _lib_lvgl.py_lv_disp_create(hor_res, ver_res)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_create.restype)
    )


_lib_lvgl.py_lv_disp_remove.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_remove.restype = None


def disp_remove(disp: disp_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_remove.argtypes.disp
    )

    _lib_lvgl.py_lv_disp_remove(disp)


_lib_lvgl.py_lv_disp_set_default.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_set_default.restype = None


def disp_set_default(disp: disp_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_default.argtypes.disp
    )

    _lib_lvgl.py_lv_disp_set_default(disp)


_lib_lvgl.py_lv_disp_get_default.argtypes = __CArgList()
_lib_lvgl.py_lv_disp_get_default.restype = _ctypes.POINTER(disp_t)


def disp_get_default() -> disp_t:

    res = _lib_lvgl.py_lv_disp_get_default()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_default.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_default.restype)
    )


_lib_lvgl.py_lv_disp_get_next.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_next.restype = _ctypes.POINTER(disp_t)


def disp_get_next(disp: disp_t) -> disp_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_next.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_next(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_next.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_next.restype)
    )


_lib_lvgl.py_lv_disp_set_res.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    hor_res=coord_t,
    ver_res=coord_t
)
_lib_lvgl.py_lv_disp_set_res.restype = None


def disp_set_res(
    disp: disp_t,
    hor_res: coord_t,
    ver_res: coord_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_res.argtypes.disp
    )

    hor_res = _convert_to_ctype(
        hor_res, 
        _lib_lvgl.py_lv_disp_set_res.argtypes.hor_res
    )

    ver_res = _convert_to_ctype(
        ver_res, 
        _lib_lvgl.py_lv_disp_set_res.argtypes.ver_res
    )

    _lib_lvgl.py_lv_disp_set_res(disp, hor_res, ver_res)


_lib_lvgl.py_lv_disp_set_physical_res.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    hor_res=coord_t,
    ver_res=coord_t
)
_lib_lvgl.py_lv_disp_set_physical_res.restype = None


def disp_set_physical_res(
    disp: disp_t,
    hor_res: coord_t,
    ver_res: coord_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_physical_res.argtypes.disp
    )

    hor_res = _convert_to_ctype(
        hor_res, 
        _lib_lvgl.py_lv_disp_set_physical_res.argtypes.hor_res
    )

    ver_res = _convert_to_ctype(
        ver_res, 
        _lib_lvgl.py_lv_disp_set_physical_res.argtypes.ver_res
    )

    _lib_lvgl.py_lv_disp_set_physical_res(disp, hor_res, ver_res)


_lib_lvgl.py_lv_disp_set_offset.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py_lv_disp_set_offset.restype = None


def disp_set_offset(
    disp: disp_t,
    x: coord_t,
    y: coord_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_offset.argtypes.disp
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_disp_set_offset.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_disp_set_offset.argtypes.y
    )

    _lib_lvgl.py_lv_disp_set_offset(disp, x, y)


_lib_lvgl.py_lv_disp_set_rotation.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    rotation=disp_rotation_t,
    sw_rotate=bool_t
)
_lib_lvgl.py_lv_disp_set_rotation.restype = None


def disp_set_rotation(
    disp: disp_t,
    rotation: _type_disp_rotation_t,
    sw_rotate: _type_bool_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_rotation.argtypes.disp
    )

    rotation = _convert_to_ctype(
        rotation, 
        _lib_lvgl.py_lv_disp_set_rotation.argtypes.rotation
    )

    sw_rotate = _convert_to_ctype(
        sw_rotate, 
        _lib_lvgl.py_lv_disp_set_rotation.argtypes.sw_rotate
    )

    _lib_lvgl.py_lv_disp_set_rotation(disp, rotation, sw_rotate)


_lib_lvgl.py_lv_disp_set_dpi.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    dpi=coord_t
)
_lib_lvgl.py_lv_disp_set_dpi.restype = None


def disp_set_dpi(disp: disp_t, dpi: coord_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_dpi.argtypes.disp
    )

    dpi = _convert_to_ctype(
        dpi, 
        _lib_lvgl.py_lv_disp_set_dpi.argtypes.dpi
    )

    _lib_lvgl.py_lv_disp_set_dpi(disp, dpi)


_lib_lvgl.py_lv_disp_get_hor_res.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_hor_res.restype = coord_t


def disp_get_hor_res(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_hor_res.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_hor_res(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_hor_res.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_hor_res.restype)
    )


_lib_lvgl.py_lv_disp_get_ver_res.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_ver_res.restype = coord_t


def disp_get_ver_res(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_ver_res.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_ver_res(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_ver_res.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_ver_res.restype)
    )


_lib_lvgl.py_lv_disp_get_physical_hor_res.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_physical_hor_res.restype = coord_t


def disp_get_physical_hor_res(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_physical_hor_res.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_physical_hor_res(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_physical_hor_res.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_physical_hor_res.restype)
    )


_lib_lvgl.py_lv_disp_get_physical_ver_res.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_physical_ver_res.restype = coord_t


def disp_get_physical_ver_res(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_physical_ver_res.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_physical_ver_res(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_physical_ver_res.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_physical_ver_res.restype)
    )


_lib_lvgl.py_lv_disp_get_offset_x.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_offset_x.restype = coord_t


def disp_get_offset_x(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_offset_x.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_offset_x(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_offset_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_offset_x.restype)
    )


_lib_lvgl.py_lv_disp_get_offset_y.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_offset_y.restype = coord_t


def disp_get_offset_y(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_offset_y.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_offset_y(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_offset_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_offset_y.restype)
    )


_lib_lvgl.py_lv_disp_get_rotation.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_rotation.restype = disp_rotation_t


def disp_get_rotation(disp: disp_t) -> disp_rotation_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_rotation.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_rotation(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_rotation.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_rotation.restype)
    )


_lib_lvgl.py_lv_disp_get_dpi.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_dpi.restype = coord_t


def disp_get_dpi(disp: disp_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_dpi.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_dpi(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_dpi.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_dpi.restype)
    )


_lib_lvgl.py_lv_disp_set_draw_buffers.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    buf1=void_t,
    buf2=void_t,
    buf_size_byte=uint32_t,
    render_mode=disp_render_mode_t
)
_lib_lvgl.py_lv_disp_set_draw_buffers.restype = None


def disp_set_draw_buffers(
    disp: disp_t,
    buf1: void_t,
    buf2: void_t,
    buf_size_byte: _type_uint32_t,
    render_mode: _type_disp_render_mode_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_draw_buffers.argtypes.disp
    )

    buf1 = _convert_to_ctype(
        buf1, 
        _lib_lvgl.py_lv_disp_set_draw_buffers.argtypes.buf1
    )

    buf2 = _convert_to_ctype(
        buf2, 
        _lib_lvgl.py_lv_disp_set_draw_buffers.argtypes.buf2
    )

    buf_size_byte = _convert_to_ctype(
        buf_size_byte, 
        _lib_lvgl.py_lv_disp_set_draw_buffers.argtypes.buf_size_byte
    )

    render_mode = _convert_to_ctype(
        render_mode, 
        _lib_lvgl.py_lv_disp_set_draw_buffers.argtypes.render_mode
    )

    _lib_lvgl.py_lv_disp_set_draw_buffers(disp, buf1, buf2, buf_size_byte, render_mode)


_lib_lvgl.py_lv_disp_set_flush_cb.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    flush_cb=disp_flush_cb_t
)
_lib_lvgl.py_lv_disp_set_flush_cb.restype = None


_disp_callback_storage = {}


def _disp_weakref_callback(ref):
    if ref in _disp_callback_storage:
        del _disp_callback_storage[ref]


def disp_set_flush_cb(
    disp: disp_t,
    flush_cb: disp_flush_cb_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_flush_cb.argtypes.disp
    )

    if inspect.ismethod(flush_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': flush_cb.__hash__}
        )
        ref = weakmethod(flush_cb, _disp_weakref_callback)
    elif inspect.isfunction(flush_cb):
        ref = weakref.ref(flush_cb, _disp_weakref_callback)
    else:
        raise TypeError

    if ref not in _disp_callback_storage:
        flush_cb = disp_flush_cb_t(flush_cb)
        _disp_callback_storage[ref] = flush_cb
    else:
        flush_cb = _disp_callback_storage[ref]

    _lib_lvgl.py_lv_disp_set_flush_cb(disp, flush_cb)


_lib_lvgl.py_lv_disp_set_color_format.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    color_format=color_format_t
)
_lib_lvgl.py_lv_disp_set_color_format.restype = None


def disp_set_color_format(
    disp: disp_t,
    color_format: color_format_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_color_format.argtypes.disp
    )

    color_format = _convert_to_ctype(
        color_format, 
        _lib_lvgl.py_lv_disp_set_color_format.argtypes.color_format
    )

    _lib_lvgl.py_lv_disp_set_color_format(disp, color_format)


_lib_lvgl.py_lv_disp_get_color_format.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_color_format.restype = color_format_t


def disp_get_color_format(disp: disp_t) -> color_format_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_color_format.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_color_format(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_color_format.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_color_format.restype)
    )


_lib_lvgl.py_lv_disp_set_antialiasing.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    en=bool_t
)
_lib_lvgl.py_lv_disp_set_antialiasing.restype = None


def disp_set_antialiasing(
    disp: disp_t,
    en: _type_bool_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_antialiasing.argtypes.disp
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_disp_set_antialiasing.argtypes.en
    )

    _lib_lvgl.py_lv_disp_set_antialiasing(disp, en)


_lib_lvgl.py_lv_disp_get_antialiasing.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_antialiasing.restype = bool_t


def disp_get_antialiasing(disp: disp_t) -> bool_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_antialiasing.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_antialiasing(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_antialiasing.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_antialiasing.restype)
    )


_lib_lvgl.py_lv_disp_flush_ready.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_flush_ready.restype = None


def disp_flush_ready(disp: disp_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_flush_ready.argtypes.disp
    )

    _lib_lvgl.py_lv_disp_flush_ready(disp)


_lib_lvgl.py_lv_disp_flush_is_last.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_flush_is_last.restype = bool_t


def disp_flush_is_last(disp: disp_t) -> bool_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_flush_is_last.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_flush_is_last(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_flush_is_last.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_flush_is_last.restype)
    )


_lib_lvgl.py_lv_disp_is_double_buffered.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_is_double_buffered.restype = bool_t


def disp_is_double_buffered(disp: disp_t) -> bool_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_is_double_buffered.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_is_double_buffered(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_is_double_buffered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_is_double_buffered.restype)
    )


_lib_lvgl.py_lv_disp_get_scr_act.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_scr_act.restype = _ctypes.POINTER(_obj_t)


def disp_get_scr_act(disp: disp_t) -> _obj_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_scr_act.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_scr_act(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_scr_act.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_scr_act.restype)
    )


_lib_lvgl.py_lv_disp_get_scr_prev.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_scr_prev.restype = _ctypes.POINTER(_obj_t)


def disp_get_scr_prev(disp: disp_t) -> _obj_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_scr_prev.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_scr_prev(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_scr_prev.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_scr_prev.restype)
    )


_lib_lvgl.py_lv_disp_load_scr.argtypes = __CArgList(
    scr=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_disp_load_scr.restype = None


def disp_load_scr(scr: _obj_t) -> None:
    scr = _convert_to_ctype(
        scr, 
        _lib_lvgl.py_lv_disp_load_scr.argtypes.scr
    )

    _lib_lvgl.py_lv_disp_load_scr(scr)


_lib_lvgl.py_lv_disp_get_layer_top.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_layer_top.restype = _ctypes.POINTER(_obj_t)


def disp_get_layer_top(disp: disp_t) -> _obj_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_layer_top.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_layer_top(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_layer_top.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_layer_top.restype)
    )


_lib_lvgl.py_lv_disp_get_layer_sys.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_layer_sys.restype = _ctypes.POINTER(_obj_t)


def disp_get_layer_sys(disp: disp_t) -> _obj_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_layer_sys.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_layer_sys(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_layer_sys.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_layer_sys.restype)
    )


_lib_lvgl.py_lv_disp_get_layer_bottom.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_layer_bottom.restype = _ctypes.POINTER(_obj_t)


def disp_get_layer_bottom(disp: disp_t) -> _obj_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_layer_bottom.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_layer_bottom(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_layer_bottom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_layer_bottom.restype)
    )


_lib_lvgl.py_lv_scr_load_anim.argtypes = __CArgList(
    scr=_ctypes.POINTER(_obj_t),
    anim_type=scr_load_anim_t,
    time=uint32_t,
    delay=uint32_t,
    auto_del=bool_t
)
_lib_lvgl.py_lv_scr_load_anim.restype = None


def scr_load_anim(
    scr: _obj_t,
    anim_type: _type_scr_load_anim_t,
    time: _type_uint32_t,
    delay: _type_uint32_t,
    auto_del: _type_bool_t
) -> None:
    scr = _convert_to_ctype(
        scr, 
        _lib_lvgl.py_lv_scr_load_anim.argtypes.scr
    )

    anim_type = _convert_to_ctype(
        anim_type, 
        _lib_lvgl.py_lv_scr_load_anim.argtypes.anim_type
    )

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_scr_load_anim.argtypes.time
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_scr_load_anim.argtypes.delay
    )

    auto_del = _convert_to_ctype(
        auto_del, 
        _lib_lvgl.py_lv_scr_load_anim.argtypes.auto_del
    )

    _lib_lvgl.py_lv_scr_load_anim(scr, anim_type, time, delay, auto_del)


_lib_lvgl.py_lv_scr_act.argtypes = __CArgList()
_lib_lvgl.py_lv_scr_act.restype = _ctypes.POINTER(_obj_t)


def scr_act() -> _obj_t:

    res = _lib_lvgl.py_lv_scr_act()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_scr_act.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_scr_act.restype)
    )


_lib_lvgl.py_lv_layer_top.argtypes = __CArgList()
_lib_lvgl.py_lv_layer_top.restype = _ctypes.POINTER(_obj_t)


def layer_top() -> _obj_t:

    res = _lib_lvgl.py_lv_layer_top()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_layer_top.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_layer_top.restype)
    )


_lib_lvgl.py_lv_layer_sys.argtypes = __CArgList()
_lib_lvgl.py_lv_layer_sys.restype = _ctypes.POINTER(_obj_t)


def layer_sys() -> _obj_t:

    res = _lib_lvgl.py_lv_layer_sys()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_layer_sys.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_layer_sys.restype)
    )


_lib_lvgl.py_lv_layer_bottom.argtypes = __CArgList()
_lib_lvgl.py_lv_layer_bottom.restype = _ctypes.POINTER(_obj_t)


def layer_bottom() -> _obj_t:

    res = _lib_lvgl.py_lv_layer_bottom()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_layer_bottom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_layer_bottom.restype)
    )


_lib_lvgl.py_lv_scr_load.argtypes = __CArgList(
    scr=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_scr_load.restype = None


def scr_load(scr: _obj_t) -> None:
    scr = _convert_to_ctype(
        scr, 
        _lib_lvgl.py_lv_scr_load.argtypes.scr
    )

    _lib_lvgl.py_lv_scr_load(scr)


_lib_lvgl.py_lv_disp_add_event.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    event_cb=event_cb_t,
    filter=event_code_t,
    user_data=void_t
)
_lib_lvgl.py_lv_disp_add_event.restype = None


def disp_add_event(
    disp: disp_t,
    event_cb: event_cb_t,
    filter: _type_event_code_t,
    user_data: void_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_add_event.argtypes.disp
    )

    if inspect.ismethod(event_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': event_cb.__hash__}
        )
        ref = weakmethod(event_cb, _disp_weakref_callback)
    elif inspect.isfunction(event_cb):
        ref = weakref.ref(event_cb, _disp_weakref_callback)
    else:
        raise TypeError

    if ref not in _disp_callback_storage:
        event_cb = event_cb_t(event_cb)
        _disp_callback_storage[ref] = event_cb
    else:
        event_cb = _disp_callback_storage[ref]

    filter = _convert_to_ctype(
        filter, 
        _lib_lvgl.py_lv_disp_add_event.argtypes.filter
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_disp_add_event.argtypes.user_data
    )

    _lib_lvgl.py_lv_disp_add_event(disp, event_cb, filter, user_data)


_lib_lvgl.py_lv_disp_get_event_count.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_event_count.restype = uint32_t


def disp_get_event_count(disp: disp_t) -> uint32_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_event_count.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_event_count(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_event_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_event_count.restype)
    )


_lib_lvgl.py_lv_disp_get_event_dsc.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    index=uint32_t
)
_lib_lvgl.py_lv_disp_get_event_dsc.restype = _ctypes.POINTER(event_dsc_t)


def disp_get_event_dsc(
    disp: disp_t,
    index: _type_uint32_t
) -> event_dsc_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_event_dsc.argtypes.disp
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_disp_get_event_dsc.argtypes.index
    )

    res = _lib_lvgl.py_lv_disp_get_event_dsc(disp, index)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_event_dsc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_event_dsc.restype)
    )


_lib_lvgl.py_lv_disp_remove_event.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    index=uint32_t
)
_lib_lvgl.py_lv_disp_remove_event.restype = bool_t


def disp_remove_event(
    disp: disp_t,
    index: _type_uint32_t
) -> bool_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_remove_event.argtypes.disp
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_disp_remove_event.argtypes.index
    )

    res = _lib_lvgl.py_lv_disp_remove_event(disp, index)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_remove_event.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_remove_event.restype)
    )


_lib_lvgl.py_lv_disp_send_event.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    code=event_code_t,
    param=void_t
)
_lib_lvgl.py_lv_disp_send_event.restype = res_t


def disp_send_event(
    disp: disp_t,
    code: _type_event_code_t,
    param: void_t
) -> res_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_send_event.argtypes.disp
    )

    code = _convert_to_ctype(
        code, 
        _lib_lvgl.py_lv_disp_send_event.argtypes.code
    )

    param = _convert_to_ctype(
        param, 
        _lib_lvgl.py_lv_disp_send_event.argtypes.param
    )

    res = _lib_lvgl.py_lv_disp_send_event(disp, code, param)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_send_event.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_send_event.restype)
    )


_lib_lvgl.py_lv_disp_set_theme.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    th=_ctypes.POINTER(_theme_t)
)
_lib_lvgl.py_lv_disp_set_theme.restype = None


def disp_set_theme(disp: disp_t, th: _theme_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_theme.argtypes.disp
    )

    th = _convert_to_ctype(
        th, 
        _lib_lvgl.py_lv_disp_set_theme.argtypes.th
    )

    _lib_lvgl.py_lv_disp_set_theme(disp, th)


_lib_lvgl.py_lv_disp_get_theme.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_theme.restype = _ctypes.POINTER(_theme_t)


def disp_get_theme(disp: disp_t) -> _theme_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_theme.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_theme(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_theme.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_theme.restype)
    )


_lib_lvgl.py_lv_disp_get_inactive_time.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_inactive_time.restype = uint32_t


def disp_get_inactive_time(disp: disp_t) -> uint32_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_inactive_time.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_inactive_time(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_inactive_time.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_inactive_time.restype)
    )


_lib_lvgl.py_lv_disp_trig_activity.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_trig_activity.restype = None


def disp_trig_activity(disp: disp_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_trig_activity.argtypes.disp
    )

    _lib_lvgl.py_lv_disp_trig_activity(disp)


_lib_lvgl.py_lv_disp_enable_invalidation.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    en=bool_t
)
_lib_lvgl.py_lv_disp_enable_invalidation.restype = None


def disp_enable_invalidation(
    disp: disp_t,
    en: _type_bool_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_enable_invalidation.argtypes.disp
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_disp_enable_invalidation.argtypes.en
    )

    _lib_lvgl.py_lv_disp_enable_invalidation(disp, en)


_lib_lvgl.py_lv_disp_is_invalidation_enabled.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_is_invalidation_enabled.restype = bool_t


def disp_is_invalidation_enabled(disp: disp_t) -> bool_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_is_invalidation_enabled.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_is_invalidation_enabled(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_is_invalidation_enabled.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_is_invalidation_enabled.restype)
    )


_lib_lvgl.py__lv_disp_get_refr_timer.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py__lv_disp_get_refr_timer.restype = _ctypes.POINTER(timer_t)


def _disp_get_refr_timer(disp: disp_t) -> timer_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py__lv_disp_get_refr_timer.argtypes.disp
    )

    res = _lib_lvgl.py__lv_disp_get_refr_timer(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_disp_get_refr_timer.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_disp_get_refr_timer.restype)
    )


_lib_lvgl.py_lv_disp_set_user_data.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    user_data=void_t
)
_lib_lvgl.py_lv_disp_set_user_data.restype = None


def disp_set_user_data(
    disp: disp_t,
    user_data: void_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_user_data.argtypes.disp
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_disp_set_user_data.argtypes.user_data
    )

    _lib_lvgl.py_lv_disp_set_user_data(disp, user_data)


_lib_lvgl.py_lv_disp_set_driver_data.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    driver_data=void_t
)
_lib_lvgl.py_lv_disp_set_driver_data.restype = None


def disp_set_driver_data(
    disp: disp_t,
    driver_data: void_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_set_driver_data.argtypes.disp
    )

    driver_data = _convert_to_ctype(
        driver_data, 
        _lib_lvgl.py_lv_disp_set_driver_data.argtypes.driver_data
    )

    _lib_lvgl.py_lv_disp_set_driver_data(disp, driver_data)


_lib_lvgl.py_lv_disp_get_user_data.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_user_data.restype = void_t


def disp_get_user_data(disp: disp_t) -> void_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_user_data.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_user_data(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_user_data.restype)
    )


_lib_lvgl.py_lv_disp_get_driver_data.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_disp_get_driver_data.restype = void_t


def disp_get_driver_data(disp: disp_t) -> void_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_get_driver_data.argtypes.disp
    )

    res = _lib_lvgl.py_lv_disp_get_driver_data(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_get_driver_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_get_driver_data.restype)
    )


_lib_lvgl.py_lv_dpx.argtypes = __CArgList(
    n=coord_t
)
_lib_lvgl.py_lv_dpx.restype = coord_t


def dpx(n: coord_t) -> coord_t:
    n = _convert_to_ctype(
        n, 
        _lib_lvgl.py_lv_dpx.argtypes.n
    )

    res = _lib_lvgl.py_lv_dpx(n)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dpx.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dpx.restype)
    )


_lib_lvgl.py_lv_disp_dpx.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    n=coord_t
)
_lib_lvgl.py_lv_disp_dpx.restype = coord_t


def disp_dpx(disp: disp_t, n: coord_t) -> coord_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_disp_dpx.argtypes.disp
    )

    n = _convert_to_ctype(
        n, 
        _lib_lvgl.py_lv_disp_dpx.argtypes.n
    )

    res = _lib_lvgl.py_lv_disp_dpx(disp, n)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_disp_dpx.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_disp_dpx.restype)
    )


_lib_lvgl.py_lv_obj_del.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_del.restype = None


def obj_del(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_del.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_del(obj)


_lib_lvgl.py_lv_obj_clean.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_clean.restype = None


def obj_clean(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_clean.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_clean(obj)


_lib_lvgl.py_lv_obj_del_delayed.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    delay_ms=uint32_t
)
_lib_lvgl.py_lv_obj_del_delayed.restype = None


def obj_del_delayed(
    obj: _obj_t,
    delay_ms: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_del_delayed.argtypes.obj
    )

    delay_ms = _convert_to_ctype(
        delay_ms, 
        _lib_lvgl.py_lv_obj_del_delayed.argtypes.delay_ms
    )

    _lib_lvgl.py_lv_obj_del_delayed(obj, delay_ms)


_lib_lvgl.py_lv_obj_del_anim_ready_cb.argtypes = __CArgList(
    a=_ctypes.POINTER(anim_t)
)
_lib_lvgl.py_lv_obj_del_anim_ready_cb.restype = None


def obj_del_anim_ready_cb(a: anim_t) -> None:
    a = _convert_to_ctype(
        a, 
        _lib_lvgl.py_lv_obj_del_anim_ready_cb.argtypes.a
    )

    _lib_lvgl.py_lv_obj_del_anim_ready_cb(a)


_lib_lvgl.py_lv_obj_del_async.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_del_async.restype = None


def obj_del_async(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_del_async.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_del_async(obj)


_lib_lvgl.py_lv_obj_set_parent.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    parent=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_set_parent.restype = None


def obj_set_parent(
    obj: _obj_t,
    parent: _obj_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_parent.argtypes.obj
    )

    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_obj_set_parent.argtypes.parent
    )

    _lib_lvgl.py_lv_obj_set_parent(obj, parent)


_lib_lvgl.py_lv_obj_swap.argtypes = __CArgList(
    obj1=_ctypes.POINTER(_obj_t),
    obj2=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_swap.restype = None


def obj_swap(obj1: _obj_t, obj2: _obj_t) -> None:
    obj1 = _convert_to_ctype(
        obj1, 
        _lib_lvgl.py_lv_obj_swap.argtypes.obj1
    )

    obj2 = _convert_to_ctype(
        obj2, 
        _lib_lvgl.py_lv_obj_swap.argtypes.obj2
    )

    _lib_lvgl.py_lv_obj_swap(obj1, obj2)


_lib_lvgl.py_lv_obj_move_to_index.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    index=int32_t
)
_lib_lvgl.py_lv_obj_move_to_index.restype = None


def obj_move_to_index(
    obj: _obj_t,
    index: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_move_to_index.argtypes.obj
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_obj_move_to_index.argtypes.index
    )

    _lib_lvgl.py_lv_obj_move_to_index(obj, index)


_lib_lvgl.py_lv_obj_get_screen.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_screen.restype = _ctypes.POINTER(_obj_t)


def obj_get_screen(obj: _obj_t) -> _obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_screen.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_screen(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_screen.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_screen.restype)
    )


_lib_lvgl.py_lv_obj_get_disp.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_disp.restype = _ctypes.POINTER(_disp_t)


def obj_get_disp(obj: _obj_t) -> _disp_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_disp.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_disp(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_disp.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_disp.restype)
    )


_lib_lvgl.py_lv_obj_get_parent.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_parent.restype = _ctypes.POINTER(_obj_t)


def obj_get_parent(obj: _obj_t) -> _obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_parent.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_parent(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_parent.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_parent.restype)
    )


_lib_lvgl.py_lv_obj_get_child.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    id=int32_t
)
_lib_lvgl.py_lv_obj_get_child.restype = _ctypes.POINTER(_obj_t)


def obj_get_child(
    obj: _obj_t,
    id: _type_int32_t
) -> _obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_child.argtypes.obj
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_obj_get_child.argtypes.id
    )

    res = _lib_lvgl.py_lv_obj_get_child(obj, id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_child.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_child.restype)
    )


_lib_lvgl.py_lv_obj_get_child_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_child_cnt.restype = uint32_t


def obj_get_child_cnt(obj: _obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_child_cnt.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_child_cnt(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_child_cnt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_child_cnt.restype)
    )


_lib_lvgl.py_lv_obj_get_index.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_index.restype = uint32_t


def obj_get_index(obj: _obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_index.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_index(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_index.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_index.restype)
    )


_lib_lvgl.py_lv_obj_tree_walk.argtypes = __CArgList(
    start_obj=_ctypes.POINTER(_obj_t),
    cb=obj_tree_walk_cb_t,
    user_data=void_t
)
_lib_lvgl.py_lv_obj_tree_walk.restype = None


_obj_callback_storage = {}


def _obj_weakref_callback(ref):
    if ref in _obj_callback_storage:
        del _obj_callback_storage[ref]


def obj_tree_walk(
    start_obj: _obj_t,
    cb: obj_tree_walk_cb_t,
    user_data: void_t
) -> None:
    start_obj = _convert_to_ctype(
        start_obj, 
        _lib_lvgl.py_lv_obj_tree_walk.argtypes.start_obj
    )

    if inspect.ismethod(cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': cb.__hash__}
        )
        ref = weakmethod(cb, _obj_weakref_callback)
    elif inspect.isfunction(cb):
        ref = weakref.ref(cb, _obj_weakref_callback)
    else:
        raise TypeError

    if ref not in _obj_callback_storage:
        cb = obj_tree_walk_cb_t(cb)
        _obj_callback_storage[ref] = cb
    else:
        cb = _obj_callback_storage[ref]

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_obj_tree_walk.argtypes.user_data
    )

    _lib_lvgl.py_lv_obj_tree_walk(start_obj, cb, user_data)


_lib_lvgl.py_lv_obj_set_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py_lv_obj_set_pos.restype = None


def obj_set_pos(
    obj: _obj_t,
    x: coord_t,
    y: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_pos.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_obj_set_pos.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_obj_set_pos.argtypes.y
    )

    _lib_lvgl.py_lv_obj_set_pos(obj, x, y)


_lib_lvgl.py_lv_obj_set_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t
)
_lib_lvgl.py_lv_obj_set_x.restype = None


def obj_set_x(obj: _obj_t, x: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_x.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_obj_set_x.argtypes.x
    )

    _lib_lvgl.py_lv_obj_set_x(obj, x)


_lib_lvgl.py_lv_obj_set_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    y=coord_t
)
_lib_lvgl.py_lv_obj_set_y.restype = None


def obj_set_y(obj: _obj_t, y: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_y.argtypes.obj
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_obj_set_y.argtypes.y
    )

    _lib_lvgl.py_lv_obj_set_y(obj, y)


_lib_lvgl.py_lv_obj_set_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    w=coord_t,
    h=coord_t
)
_lib_lvgl.py_lv_obj_set_size.restype = None


def obj_set_size(
    obj: _obj_t,
    w: coord_t,
    h: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_size.argtypes.obj
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_obj_set_size.argtypes.w
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_obj_set_size.argtypes.h
    )

    _lib_lvgl.py_lv_obj_set_size(obj, w, h)


_lib_lvgl.py_lv_obj_refr_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_refr_size.restype = bool_t


def obj_refr_size(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_refr_size.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_refr_size(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_refr_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_refr_size.restype)
    )


_lib_lvgl.py_lv_obj_set_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    w=coord_t
)
_lib_lvgl.py_lv_obj_set_width.restype = None


def obj_set_width(obj: _obj_t, w: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_width.argtypes.obj
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_obj_set_width.argtypes.w
    )

    _lib_lvgl.py_lv_obj_set_width(obj, w)


_lib_lvgl.py_lv_obj_set_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    h=coord_t
)
_lib_lvgl.py_lv_obj_set_height.restype = None


def obj_set_height(obj: _obj_t, h: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_height.argtypes.obj
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_obj_set_height.argtypes.h
    )

    _lib_lvgl.py_lv_obj_set_height(obj, h)


_lib_lvgl.py_lv_obj_set_content_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    w=coord_t
)
_lib_lvgl.py_lv_obj_set_content_width.restype = None


def obj_set_content_width(
    obj: _obj_t,
    w: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_content_width.argtypes.obj
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_obj_set_content_width.argtypes.w
    )

    _lib_lvgl.py_lv_obj_set_content_width(obj, w)


_lib_lvgl.py_lv_obj_set_content_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    h=coord_t
)
_lib_lvgl.py_lv_obj_set_content_height.restype = None


def obj_set_content_height(
    obj: _obj_t,
    h: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_content_height.argtypes.obj
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_obj_set_content_height.argtypes.h
    )

    _lib_lvgl.py_lv_obj_set_content_height(obj, h)


_lib_lvgl.py_lv_obj_set_layout.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    layout=uint32_t
)
_lib_lvgl.py_lv_obj_set_layout.restype = None


def obj_set_layout(
    obj: _obj_t,
    layout: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_layout.argtypes.obj
    )

    layout = _convert_to_ctype(
        layout, 
        _lib_lvgl.py_lv_obj_set_layout.argtypes.layout
    )

    _lib_lvgl.py_lv_obj_set_layout(obj, layout)


_lib_lvgl.py_lv_obj_is_layout_positioned.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_is_layout_positioned.restype = bool_t


def obj_is_layout_positioned(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_is_layout_positioned.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_is_layout_positioned(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_is_layout_positioned.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_is_layout_positioned.restype)
    )


_lib_lvgl.py_lv_obj_mark_layout_as_dirty.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_mark_layout_as_dirty.restype = None


def obj_mark_layout_as_dirty(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_mark_layout_as_dirty.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_mark_layout_as_dirty(obj)


_lib_lvgl.py_lv_obj_update_layout.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_update_layout.restype = None


def obj_update_layout(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_update_layout.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_update_layout(obj)


_lib_lvgl.py_lv_layout_register.argtypes = __CArgList(
    cb=layout_update_cb_t,
    user_data=void_t
)
_lib_lvgl.py_lv_layout_register.restype = uint32_t


_layout_callback_storage = {}


def _layout_weakref_callback(ref):
    if ref in _layout_callback_storage:
        del _layout_callback_storage[ref]


def layout_register(
    cb: layout_update_cb_t,
    user_data: void_t
) -> uint32_t:
    if inspect.ismethod(cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': cb.__hash__}
        )
        ref = weakmethod(cb, _layout_weakref_callback)
    elif inspect.isfunction(cb):
        ref = weakref.ref(cb, _layout_weakref_callback)
    else:
        raise TypeError

    if ref not in _layout_callback_storage:
        cb = layout_update_cb_t(cb)
        _layout_callback_storage[ref] = cb
    else:
        cb = _layout_callback_storage[ref]

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_layout_register.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_layout_register(cb, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_layout_register.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_layout_register.restype)
    )


_lib_lvgl.py_lv_obj_set_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    align=align_t
)
_lib_lvgl.py_lv_obj_set_align.restype = None


def obj_set_align(obj: _obj_t, align: align_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_align.argtypes.obj
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_obj_set_align.argtypes.align
    )

    _lib_lvgl.py_lv_obj_set_align(obj, align)


_lib_lvgl.py_lv_obj_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    align=align_t,
    x_ofs=coord_t,
    y_ofs=coord_t
)
_lib_lvgl.py_lv_obj_align.restype = None


def obj_align(
    obj: _obj_t,
    align: align_t,
    x_ofs: coord_t,
    y_ofs: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_align.argtypes.obj
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_obj_align.argtypes.align
    )

    x_ofs = _convert_to_ctype(
        x_ofs, 
        _lib_lvgl.py_lv_obj_align.argtypes.x_ofs
    )

    y_ofs = _convert_to_ctype(
        y_ofs, 
        _lib_lvgl.py_lv_obj_align.argtypes.y_ofs
    )

    _lib_lvgl.py_lv_obj_align(obj, align, x_ofs, y_ofs)


_lib_lvgl.py_lv_obj_align_to.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    base=_ctypes.POINTER(_obj_t),
    align=align_t,
    x_ofs=coord_t,
    y_ofs=coord_t
)
_lib_lvgl.py_lv_obj_align_to.restype = None


def obj_align_to(
    obj: _obj_t,
    base: _obj_t,
    align: align_t,
    x_ofs: coord_t,
    y_ofs: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_align_to.argtypes.obj
    )

    base = _convert_to_ctype(
        base, 
        _lib_lvgl.py_lv_obj_align_to.argtypes.base
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_obj_align_to.argtypes.align
    )

    x_ofs = _convert_to_ctype(
        x_ofs, 
        _lib_lvgl.py_lv_obj_align_to.argtypes.x_ofs
    )

    y_ofs = _convert_to_ctype(
        y_ofs, 
        _lib_lvgl.py_lv_obj_align_to.argtypes.y_ofs
    )

    _lib_lvgl.py_lv_obj_align_to(obj, base, align, x_ofs, y_ofs)


_lib_lvgl.py_lv_obj_center.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_center.restype = None


def obj_center(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_center.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_center(obj)


_lib_lvgl.py_lv_obj_get_coords.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    coords=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_obj_get_coords.restype = None


def obj_get_coords(
    obj: _obj_t,
    coords: area_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_coords.argtypes.obj
    )

    coords = _convert_to_ctype(
        coords, 
        _lib_lvgl.py_lv_obj_get_coords.argtypes.coords
    )

    _lib_lvgl.py_lv_obj_get_coords(obj, coords)


_lib_lvgl.py_lv_obj_get_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_x.restype = coord_t


def obj_get_x(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_x.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_x(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_x.restype)
    )


_lib_lvgl.py_lv_obj_get_x2.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_x2.restype = coord_t


def obj_get_x2(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_x2.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_x2(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_x2.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_x2.restype)
    )


_lib_lvgl.py_lv_obj_get_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_y.restype = coord_t


def obj_get_y(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_y.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_y(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_y.restype)
    )


_lib_lvgl.py_lv_obj_get_y2.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_y2.restype = coord_t


def obj_get_y2(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_y2.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_y2(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_y2.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_y2.restype)
    )


_lib_lvgl.py_lv_obj_get_x_aligned.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_x_aligned.restype = coord_t


def obj_get_x_aligned(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_x_aligned.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_x_aligned(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_x_aligned.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_x_aligned.restype)
    )


_lib_lvgl.py_lv_obj_get_y_aligned.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_y_aligned.restype = coord_t


def obj_get_y_aligned(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_y_aligned.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_y_aligned(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_y_aligned.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_y_aligned.restype)
    )


_lib_lvgl.py_lv_obj_get_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_width.restype = coord_t


def obj_get_width(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_width.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_width(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_width.restype)
    )


_lib_lvgl.py_lv_obj_get_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_height.restype = coord_t


def obj_get_height(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_height.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_height(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_height.restype)
    )


_lib_lvgl.py_lv_obj_get_content_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_content_width.restype = coord_t


def obj_get_content_width(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_content_width.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_content_width(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_content_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_content_width.restype)
    )


_lib_lvgl.py_lv_obj_get_content_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_content_height.restype = coord_t


def obj_get_content_height(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_content_height.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_content_height(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_content_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_content_height.restype)
    )


_lib_lvgl.py_lv_obj_get_content_coords.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    area=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_obj_get_content_coords.restype = None


def obj_get_content_coords(
    obj: _obj_t,
    area: area_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_content_coords.argtypes.obj
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_obj_get_content_coords.argtypes.area
    )

    _lib_lvgl.py_lv_obj_get_content_coords(obj, area)


_lib_lvgl.py_lv_obj_get_self_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_self_width.restype = coord_t


def obj_get_self_width(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_self_width.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_self_width(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_self_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_self_width.restype)
    )


_lib_lvgl.py_lv_obj_get_self_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_self_height.restype = coord_t


def obj_get_self_height(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_self_height.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_self_height(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_self_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_self_height.restype)
    )


_lib_lvgl.py_lv_obj_refresh_self_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_refresh_self_size.restype = bool_t


def obj_refresh_self_size(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_refresh_self_size.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_refresh_self_size(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_refresh_self_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_refresh_self_size.restype)
    )


_lib_lvgl.py_lv_obj_refr_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_refr_pos.restype = None


def obj_refr_pos(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_refr_pos.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_refr_pos(obj)


_lib_lvgl.py_lv_obj_move_to.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py_lv_obj_move_to.restype = None


def obj_move_to(
    obj: _obj_t,
    x: coord_t,
    y: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_move_to.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_obj_move_to.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_obj_move_to.argtypes.y
    )

    _lib_lvgl.py_lv_obj_move_to(obj, x, y)


_lib_lvgl.py_lv_obj_move_children_by.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x_diff=coord_t,
    y_diff=coord_t,
    ignore_floating=bool_t
)
_lib_lvgl.py_lv_obj_move_children_by.restype = None


def obj_move_children_by(
    obj: _obj_t,
    x_diff: coord_t,
    y_diff: coord_t,
    ignore_floating: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_move_children_by.argtypes.obj
    )

    x_diff = _convert_to_ctype(
        x_diff, 
        _lib_lvgl.py_lv_obj_move_children_by.argtypes.x_diff
    )

    y_diff = _convert_to_ctype(
        y_diff, 
        _lib_lvgl.py_lv_obj_move_children_by.argtypes.y_diff
    )

    ignore_floating = _convert_to_ctype(
        ignore_floating, 
        _lib_lvgl.py_lv_obj_move_children_by.argtypes.ignore_floating
    )

    _lib_lvgl.py_lv_obj_move_children_by(obj, x_diff, y_diff, ignore_floating)


_lib_lvgl.py_lv_obj_transform_point.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    p=_ctypes.POINTER(point_t),
    recursive=bool_t,
    inv=bool_t
)
_lib_lvgl.py_lv_obj_transform_point.restype = None


def obj_transform_point(
    obj: _obj_t,
    p: point_t,
    recursive: _type_bool_t,
    inv: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_transform_point.argtypes.obj
    )

    p = _convert_to_ctype(
        p, 
        _lib_lvgl.py_lv_obj_transform_point.argtypes.p
    )

    recursive = _convert_to_ctype(
        recursive, 
        _lib_lvgl.py_lv_obj_transform_point.argtypes.recursive
    )

    inv = _convert_to_ctype(
        inv, 
        _lib_lvgl.py_lv_obj_transform_point.argtypes.inv
    )

    _lib_lvgl.py_lv_obj_transform_point(obj, p, recursive, inv)


_lib_lvgl.py_lv_obj_get_transformed_area.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    area=_ctypes.POINTER(area_t),
    recursive=bool_t,
    inv=bool_t
)
_lib_lvgl.py_lv_obj_get_transformed_area.restype = None


def obj_get_transformed_area(
    obj: _obj_t,
    area: area_t,
    recursive: _type_bool_t,
    inv: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_transformed_area.argtypes.obj
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_obj_get_transformed_area.argtypes.area
    )

    recursive = _convert_to_ctype(
        recursive, 
        _lib_lvgl.py_lv_obj_get_transformed_area.argtypes.recursive
    )

    inv = _convert_to_ctype(
        inv, 
        _lib_lvgl.py_lv_obj_get_transformed_area.argtypes.inv
    )

    _lib_lvgl.py_lv_obj_get_transformed_area(obj, area, recursive, inv)


_lib_lvgl.py_lv_obj_invalidate_area.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    area=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_obj_invalidate_area.restype = None


def obj_invalidate_area(
    obj: _obj_t,
    area: area_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_invalidate_area.argtypes.obj
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_obj_invalidate_area.argtypes.area
    )

    _lib_lvgl.py_lv_obj_invalidate_area(obj, area)


_lib_lvgl.py_lv_obj_invalidate.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_invalidate.restype = None


def obj_invalidate(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_invalidate.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_invalidate(obj)


_lib_lvgl.py_lv_obj_area_is_visible.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    area=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_obj_area_is_visible.restype = bool_t


def obj_area_is_visible(
    obj: _obj_t,
    area: area_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_area_is_visible.argtypes.obj
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_obj_area_is_visible.argtypes.area
    )

    res = _lib_lvgl.py_lv_obj_area_is_visible(obj, area)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_area_is_visible.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_area_is_visible.restype)
    )


_lib_lvgl.py_lv_obj_is_visible.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_is_visible.restype = bool_t


def obj_is_visible(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_is_visible.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_is_visible(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_is_visible.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_is_visible.restype)
    )


_lib_lvgl.py_lv_obj_set_ext_click_area.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    size=coord_t
)
_lib_lvgl.py_lv_obj_set_ext_click_area.restype = None


def obj_set_ext_click_area(
    obj: _obj_t,
    size: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_ext_click_area.argtypes.obj
    )

    size = _convert_to_ctype(
        size, 
        _lib_lvgl.py_lv_obj_set_ext_click_area.argtypes.size
    )

    _lib_lvgl.py_lv_obj_set_ext_click_area(obj, size)


_lib_lvgl.py_lv_obj_get_click_area.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    area=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_obj_get_click_area.restype = None


def obj_get_click_area(
    obj: _obj_t,
    area: area_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_click_area.argtypes.obj
    )

    area = _convert_to_ctype(
        area, 
        _lib_lvgl.py_lv_obj_get_click_area.argtypes.area
    )

    _lib_lvgl.py_lv_obj_get_click_area(obj, area)


_lib_lvgl.py_lv_obj_hit_test.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    point=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_obj_hit_test.restype = bool_t


def obj_hit_test(obj: _obj_t, point: point_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_hit_test.argtypes.obj
    )

    point = _convert_to_ctype(
        point, 
        _lib_lvgl.py_lv_obj_hit_test.argtypes.point
    )

    res = _lib_lvgl.py_lv_obj_hit_test(obj, point)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_hit_test.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_hit_test.restype)
    )


_lib_lvgl.py_lv_clamp_width.argtypes = __CArgList(
    width=coord_t,
    min_width=coord_t,
    max_width=coord_t,
    ref_width=coord_t
)
_lib_lvgl.py_lv_clamp_width.restype = coord_t


def clamp_width(
    width: coord_t,
    min_width: coord_t,
    max_width: coord_t,
    ref_width: coord_t
) -> coord_t:
    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_clamp_width.argtypes.width
    )

    min_width = _convert_to_ctype(
        min_width, 
        _lib_lvgl.py_lv_clamp_width.argtypes.min_width
    )

    max_width = _convert_to_ctype(
        max_width, 
        _lib_lvgl.py_lv_clamp_width.argtypes.max_width
    )

    ref_width = _convert_to_ctype(
        ref_width, 
        _lib_lvgl.py_lv_clamp_width.argtypes.ref_width
    )

    res = _lib_lvgl.py_lv_clamp_width(width, min_width, max_width, ref_width)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_clamp_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_clamp_width.restype)
    )


_lib_lvgl.py_lv_clamp_height.argtypes = __CArgList(
    height=coord_t,
    min_height=coord_t,
    max_height=coord_t,
    ref_height=coord_t
)
_lib_lvgl.py_lv_clamp_height.restype = coord_t


def clamp_height(
    height: coord_t,
    min_height: coord_t,
    max_height: coord_t,
    ref_height: coord_t
) -> coord_t:
    height = _convert_to_ctype(
        height, 
        _lib_lvgl.py_lv_clamp_height.argtypes.height
    )

    min_height = _convert_to_ctype(
        min_height, 
        _lib_lvgl.py_lv_clamp_height.argtypes.min_height
    )

    max_height = _convert_to_ctype(
        max_height, 
        _lib_lvgl.py_lv_clamp_height.argtypes.max_height
    )

    ref_height = _convert_to_ctype(
        ref_height, 
        _lib_lvgl.py_lv_clamp_height.argtypes.ref_height
    )

    res = _lib_lvgl.py_lv_clamp_height(height, min_height, max_height, ref_height)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_clamp_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_clamp_height.restype)
    )


_lib_lvgl.py_lv_obj_set_scrollbar_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    mode=scrollbar_mode_t
)
_lib_lvgl.py_lv_obj_set_scrollbar_mode.restype = None


def obj_set_scrollbar_mode(
    obj: _obj_t,
    mode: scrollbar_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_scrollbar_mode.argtypes.obj
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_obj_set_scrollbar_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_obj_set_scrollbar_mode(obj, mode)


_lib_lvgl.py_lv_obj_set_scroll_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    dir=dir_t
)
_lib_lvgl.py_lv_obj_set_scroll_dir.restype = None


def obj_set_scroll_dir(
    obj: _obj_t,
    dir: dir_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_scroll_dir.argtypes.obj
    )

    dir = _convert_to_ctype(
        dir, 
        _lib_lvgl.py_lv_obj_set_scroll_dir.argtypes.dir
    )

    _lib_lvgl.py_lv_obj_set_scroll_dir(obj, dir)


_lib_lvgl.py_lv_obj_set_scroll_snap_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    align=scroll_snap_t
)
_lib_lvgl.py_lv_obj_set_scroll_snap_x.restype = None


def obj_set_scroll_snap_x(
    obj: _obj_t,
    align: scroll_snap_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_scroll_snap_x.argtypes.obj
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_obj_set_scroll_snap_x.argtypes.align
    )

    _lib_lvgl.py_lv_obj_set_scroll_snap_x(obj, align)


_lib_lvgl.py_lv_obj_set_scroll_snap_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    align=scroll_snap_t
)
_lib_lvgl.py_lv_obj_set_scroll_snap_y.restype = None


def obj_set_scroll_snap_y(
    obj: _obj_t,
    align: scroll_snap_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_scroll_snap_y.argtypes.obj
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_obj_set_scroll_snap_y.argtypes.align
    )

    _lib_lvgl.py_lv_obj_set_scroll_snap_y(obj, align)


_lib_lvgl.py_lv_obj_get_scrollbar_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scrollbar_mode.restype = scrollbar_mode_t


def obj_get_scrollbar_mode(obj: _obj_t) -> scrollbar_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scrollbar_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scrollbar_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scrollbar_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scrollbar_mode.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_dir.restype = dir_t


def obj_get_scroll_dir(obj: _obj_t) -> dir_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_dir.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_dir(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_dir.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_snap_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_snap_x.restype = scroll_snap_t


def obj_get_scroll_snap_x(obj: _obj_t) -> scroll_snap_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_snap_x.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_snap_x(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_snap_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_snap_x.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_snap_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_snap_y.restype = scroll_snap_t


def obj_get_scroll_snap_y(obj: _obj_t) -> scroll_snap_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_snap_y.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_snap_y(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_snap_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_snap_y.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_x.restype = coord_t


def obj_get_scroll_x(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_x.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_x(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_x.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_y.restype = coord_t


def obj_get_scroll_y(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_y.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_y(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_y.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_top.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_top.restype = coord_t


def obj_get_scroll_top(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_top.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_top(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_top.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_top.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_bottom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_bottom.restype = coord_t


def obj_get_scroll_bottom(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_bottom.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_bottom(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_bottom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_bottom.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_left.restype = coord_t


def obj_get_scroll_left(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_left.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_left(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_left.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_left.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_scroll_right.restype = coord_t


def obj_get_scroll_right(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_right.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_scroll_right(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_scroll_right.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_scroll_right.restype)
    )


_lib_lvgl.py_lv_obj_get_scroll_end.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    end=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_obj_get_scroll_end.restype = None


def obj_get_scroll_end(
    obj: _obj_t,
    end: point_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scroll_end.argtypes.obj
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_obj_get_scroll_end.argtypes.end
    )

    _lib_lvgl.py_lv_obj_get_scroll_end(obj, end)


_lib_lvgl.py_lv_obj_scroll_by.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t,
    y=coord_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_by.restype = None


def obj_scroll_by(
    obj: _obj_t,
    x: coord_t,
    y: coord_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_by.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_obj_scroll_by.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_obj_scroll_by.argtypes.y
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_by.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_by(obj, x, y, anim_en)


_lib_lvgl.py_lv_obj_scroll_by_bounded.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    dx=coord_t,
    dy=coord_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_by_bounded.restype = None


def obj_scroll_by_bounded(
    obj: _obj_t,
    dx: coord_t,
    dy: coord_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_by_bounded.argtypes.obj
    )

    dx = _convert_to_ctype(
        dx, 
        _lib_lvgl.py_lv_obj_scroll_by_bounded.argtypes.dx
    )

    dy = _convert_to_ctype(
        dy, 
        _lib_lvgl.py_lv_obj_scroll_by_bounded.argtypes.dy
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_by_bounded.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_by_bounded(obj, dx, dy, anim_en)


_lib_lvgl.py_lv_obj_scroll_to.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t,
    y=coord_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_to.restype = None


def obj_scroll_to(
    obj: _obj_t,
    x: coord_t,
    y: coord_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_to.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_obj_scroll_to.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_obj_scroll_to.argtypes.y
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_to.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_to(obj, x, y, anim_en)


_lib_lvgl.py_lv_obj_scroll_to_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_to_x.restype = None


def obj_scroll_to_x(
    obj: _obj_t,
    x: coord_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_to_x.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_obj_scroll_to_x.argtypes.x
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_to_x.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_to_x(obj, x, anim_en)


_lib_lvgl.py_lv_obj_scroll_to_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    y=coord_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_to_y.restype = None


def obj_scroll_to_y(
    obj: _obj_t,
    y: coord_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_to_y.argtypes.obj
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_obj_scroll_to_y.argtypes.y
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_to_y.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_to_y(obj, y, anim_en)


_lib_lvgl.py_lv_obj_scroll_to_view.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_to_view.restype = None


def obj_scroll_to_view(
    obj: _obj_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_to_view.argtypes.obj
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_to_view.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_to_view(obj, anim_en)


_lib_lvgl.py_lv_obj_scroll_to_view_recursive.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_scroll_to_view_recursive.restype = None


def obj_scroll_to_view_recursive(
    obj: _obj_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scroll_to_view_recursive.argtypes.obj
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_scroll_to_view_recursive.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_scroll_to_view_recursive(obj, anim_en)


_lib_lvgl.py__lv_obj_scroll_by_raw.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py__lv_obj_scroll_by_raw.restype = res_t


def _obj_scroll_by_raw(
    obj: _obj_t,
    x: coord_t,
    y: coord_t
) -> res_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_scroll_by_raw.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py__lv_obj_scroll_by_raw.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py__lv_obj_scroll_by_raw.argtypes.y
    )

    res = _lib_lvgl.py__lv_obj_scroll_by_raw(obj, x, y)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_obj_scroll_by_raw.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_obj_scroll_by_raw.restype)
    )


_lib_lvgl.py_lv_obj_is_scrolling.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_is_scrolling.restype = bool_t


def obj_is_scrolling(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_is_scrolling.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_is_scrolling(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_is_scrolling.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_is_scrolling.restype)
    )


_lib_lvgl.py_lv_obj_update_snap.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_update_snap.restype = None


def obj_update_snap(
    obj: _obj_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_update_snap.argtypes.obj
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_update_snap.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_update_snap(obj, anim_en)


_lib_lvgl.py_lv_obj_get_scrollbar_area.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    hor=_ctypes.POINTER(area_t),
    ver=_ctypes.POINTER(area_t)
)
_lib_lvgl.py_lv_obj_get_scrollbar_area.restype = None


def obj_get_scrollbar_area(
    obj: _obj_t,
    hor: area_t,
    ver: area_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_scrollbar_area.argtypes.obj
    )

    hor = _convert_to_ctype(
        hor, 
        _lib_lvgl.py_lv_obj_get_scrollbar_area.argtypes.hor
    )

    ver = _convert_to_ctype(
        ver, 
        _lib_lvgl.py_lv_obj_get_scrollbar_area.argtypes.ver
    )

    _lib_lvgl.py_lv_obj_get_scrollbar_area(obj, hor, ver)


_lib_lvgl.py_lv_obj_scrollbar_invalidate.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_scrollbar_invalidate.restype = None


def obj_scrollbar_invalidate(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_scrollbar_invalidate.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_scrollbar_invalidate(obj)


_lib_lvgl.py_lv_obj_readjust_scroll.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_readjust_scroll.restype = None


def obj_readjust_scroll(
    obj: _obj_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_readjust_scroll.argtypes.obj
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_readjust_scroll.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_readjust_scroll(obj, anim_en)


_lib_lvgl.py__lv_obj_style_init.argtypes = __CArgList()
_lib_lvgl.py__lv_obj_style_init.restype = None


def _obj_style_init() -> None:

    _lib_lvgl.py__lv_obj_style_init()


_lib_lvgl.py_lv_obj_add_style.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    style=_ctypes.POINTER(style_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_add_style.restype = None


def obj_add_style(
    obj: _obj_t,
    style: style_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_add_style.argtypes.obj
    )

    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_obj_add_style.argtypes.style
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_add_style.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_add_style(obj, style, selector)


_lib_lvgl.py_lv_obj_replace_style.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    old_style=_ctypes.POINTER(style_t),
    new_style=_ctypes.POINTER(style_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_replace_style.restype = bool_t


def obj_replace_style(
    obj: _obj_t,
    old_style: style_t,
    new_style: style_t,
    selector: style_selector_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_replace_style.argtypes.obj
    )

    old_style = _convert_to_ctype(
        old_style, 
        _lib_lvgl.py_lv_obj_replace_style.argtypes.old_style
    )

    new_style = _convert_to_ctype(
        new_style, 
        _lib_lvgl.py_lv_obj_replace_style.argtypes.new_style
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_replace_style.argtypes.selector
    )

    res = _lib_lvgl.py_lv_obj_replace_style(obj, old_style, new_style, selector)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_replace_style.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_replace_style.restype)
    )


_lib_lvgl.py_lv_obj_remove_style.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    style=_ctypes.POINTER(style_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_remove_style.restype = None


def obj_remove_style(
    obj: _obj_t,
    style: style_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_remove_style.argtypes.obj
    )

    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_obj_remove_style.argtypes.style
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_remove_style.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_remove_style(obj, style, selector)


_lib_lvgl.py_lv_obj_remove_style_all.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_remove_style_all.restype = None


def obj_remove_style_all(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_remove_style_all.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_remove_style_all(obj)


_lib_lvgl.py_lv_obj_report_style_change.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t)
)
_lib_lvgl.py_lv_obj_report_style_change.restype = None


def obj_report_style_change(style: style_t) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_obj_report_style_change.argtypes.style
    )

    _lib_lvgl.py_lv_obj_report_style_change(style)


_lib_lvgl.py_lv_obj_refresh_style.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=part_t,
    prop=style_prop_t
)
_lib_lvgl.py_lv_obj_refresh_style.restype = None


def obj_refresh_style(
    obj: _obj_t,
    part: part_t,
    prop: style_prop_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_refresh_style.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_refresh_style.argtypes.part
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_obj_refresh_style.argtypes.prop
    )

    _lib_lvgl.py_lv_obj_refresh_style(obj, part, prop)


_lib_lvgl.py_lv_obj_enable_style_refresh.argtypes = __CArgList(
    en=bool_t
)
_lib_lvgl.py_lv_obj_enable_style_refresh.restype = None


def obj_enable_style_refresh(en: _type_bool_t) -> None:
    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_obj_enable_style_refresh.argtypes.en
    )

    _lib_lvgl.py_lv_obj_enable_style_refresh(en)


_lib_lvgl.py_lv_obj_get_style_prop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=part_t,
    prop=style_prop_t
)
_lib_lvgl.py_lv_obj_get_style_prop.restype = style_value_t


def obj_get_style_prop(
    obj: _obj_t,
    part: part_t,
    prop: style_prop_t
) -> style_value_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_prop.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_prop.argtypes.part
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_obj_get_style_prop.argtypes.prop
    )

    res = _lib_lvgl.py_lv_obj_get_style_prop(obj, part, prop)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_prop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_prop.restype)
    )


_lib_lvgl.py_lv_obj_set_local_style_prop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    prop=style_prop_t,
    value=style_value_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_local_style_prop.restype = None


def obj_set_local_style_prop(
    obj: _obj_t,
    prop: style_prop_t,
    value: style_value_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_local_style_prop.argtypes.obj
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_obj_set_local_style_prop.argtypes.prop
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_local_style_prop.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_local_style_prop.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_local_style_prop(obj, prop, value, selector)


_lib_lvgl.py_lv_obj_set_local_style_prop_meta.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    prop=style_prop_t,
    meta=uint16_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_local_style_prop_meta.restype = None


def obj_set_local_style_prop_meta(
    obj: _obj_t,
    prop: style_prop_t,
    meta: _type_uint16_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_local_style_prop_meta.argtypes.obj
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_obj_set_local_style_prop_meta.argtypes.prop
    )

    meta = _convert_to_ctype(
        meta, 
        _lib_lvgl.py_lv_obj_set_local_style_prop_meta.argtypes.meta
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_local_style_prop_meta.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_local_style_prop_meta(obj, prop, meta, selector)


_lib_lvgl.py_lv_obj_get_local_style_prop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    prop=style_prop_t,
    value=_ctypes.POINTER(style_value_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_get_local_style_prop.restype = style_res_t


def obj_get_local_style_prop(
    obj: _obj_t,
    prop: style_prop_t,
    value: style_value_t,
    selector: style_selector_t
) -> style_res_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_local_style_prop.argtypes.obj
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_obj_get_local_style_prop.argtypes.prop
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_get_local_style_prop.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_get_local_style_prop.argtypes.selector
    )

    res = _lib_lvgl.py_lv_obj_get_local_style_prop(obj, prop, value, selector)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_local_style_prop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_local_style_prop.restype)
    )


_lib_lvgl.py_lv_obj_remove_local_style_prop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    prop=style_prop_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_remove_local_style_prop.restype = bool_t


def obj_remove_local_style_prop(
    obj: _obj_t,
    prop: style_prop_t,
    selector: style_selector_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_remove_local_style_prop.argtypes.obj
    )

    prop = _convert_to_ctype(
        prop, 
        _lib_lvgl.py_lv_obj_remove_local_style_prop.argtypes.prop
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_remove_local_style_prop.argtypes.selector
    )

    res = _lib_lvgl.py_lv_obj_remove_local_style_prop(obj, prop, selector)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_remove_local_style_prop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_remove_local_style_prop.restype)
    )


_lib_lvgl.py__lv_obj_style_apply_color_filter.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t,
    v=style_value_t
)
_lib_lvgl.py__lv_obj_style_apply_color_filter.restype = style_value_t


def _obj_style_apply_color_filter(
    obj: _obj_t,
    part: _type_uint32_t,
    v: style_value_t
) -> style_value_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_style_apply_color_filter.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py__lv_obj_style_apply_color_filter.argtypes.part
    )

    v = _convert_to_ctype(
        v, 
        _lib_lvgl.py__lv_obj_style_apply_color_filter.argtypes.v
    )

    res = _lib_lvgl.py__lv_obj_style_apply_color_filter(obj, part, v)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_obj_style_apply_color_filter.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_obj_style_apply_color_filter.restype)
    )


_lib_lvgl.py__lv_obj_style_create_transition.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=part_t,
    prev_state=state_t,
    new_state=state_t,
    tr=_ctypes.POINTER(_obj_style_transition_dsc_t)
)
_lib_lvgl.py__lv_obj_style_create_transition.restype = None


def _obj_style_create_transition(
    obj: _obj_t,
    part: part_t,
    prev_state: state_t,
    new_state: state_t,
    tr: _obj_style_transition_dsc_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_style_create_transition.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py__lv_obj_style_create_transition.argtypes.part
    )

    prev_state = _convert_to_ctype(
        prev_state, 
        _lib_lvgl.py__lv_obj_style_create_transition.argtypes.prev_state
    )

    new_state = _convert_to_ctype(
        new_state, 
        _lib_lvgl.py__lv_obj_style_create_transition.argtypes.new_state
    )

    tr = _convert_to_ctype(
        tr, 
        _lib_lvgl.py__lv_obj_style_create_transition.argtypes.tr
    )

    _lib_lvgl.py__lv_obj_style_create_transition(obj, part, prev_state, new_state, tr)


_lib_lvgl.py__lv_obj_style_state_compare.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    state1=state_t,
    state2=state_t
)
_lib_lvgl.py__lv_obj_style_state_compare.restype = _style_state_cmp_t


def _obj_style_state_compare(
    obj: _obj_t,
    state1: state_t,
    state2: state_t
) -> _style_state_cmp_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_style_state_compare.argtypes.obj
    )

    state1 = _convert_to_ctype(
        state1, 
        _lib_lvgl.py__lv_obj_style_state_compare.argtypes.state1
    )

    state2 = _convert_to_ctype(
        state2, 
        _lib_lvgl.py__lv_obj_style_state_compare.argtypes.state2
    )

    res = _lib_lvgl.py__lv_obj_style_state_compare(obj, state1, state2)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_obj_style_state_compare.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_obj_style_state_compare.restype)
    )


_lib_lvgl.py_lv_obj_fade_in.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    time=uint32_t,
    delay=uint32_t
)
_lib_lvgl.py_lv_obj_fade_in.restype = None


def obj_fade_in(
    obj: _obj_t,
    time: _type_uint32_t,
    delay: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_fade_in.argtypes.obj
    )

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_obj_fade_in.argtypes.time
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_obj_fade_in.argtypes.delay
    )

    _lib_lvgl.py_lv_obj_fade_in(obj, time, delay)


_lib_lvgl.py_lv_obj_fade_out.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    time=uint32_t,
    delay=uint32_t
)
_lib_lvgl.py_lv_obj_fade_out.restype = None


def obj_fade_out(
    obj: _obj_t,
    time: _type_uint32_t,
    delay: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_fade_out.argtypes.obj
    )

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_obj_fade_out.argtypes.time
    )

    delay = _convert_to_ctype(
        delay, 
        _lib_lvgl.py_lv_obj_fade_out.argtypes.delay
    )

    _lib_lvgl.py_lv_obj_fade_out(obj, time, delay)


_lib_lvgl.py_lv_obj_style_get_selector_state.argtypes = __CArgList(
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_style_get_selector_state.restype = state_t


def obj_style_get_selector_state(
    selector: style_selector_t
) -> state_t:
    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_style_get_selector_state.argtypes.selector
    )

    res = _lib_lvgl.py_lv_obj_style_get_selector_state(selector)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_style_get_selector_state.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_style_get_selector_state.restype)
    )


_lib_lvgl.py_lv_obj_style_get_selector_part.argtypes = __CArgList(
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_style_get_selector_part.restype = part_t


def obj_style_get_selector_part(
    selector: style_selector_t
) -> part_t:
    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_style_get_selector_part.argtypes.selector
    )

    res = _lib_lvgl.py_lv_obj_style_get_selector_part(selector)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_style_get_selector_part.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_style_get_selector_part.restype)
    )


_lib_lvgl.py_lv_obj_get_style_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_width.restype = coord_t


def obj_get_style_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_min_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_min_width.restype = coord_t


def obj_get_style_min_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_min_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_min_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_min_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_min_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_min_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_max_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_max_width.restype = coord_t


def obj_get_style_max_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_max_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_max_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_max_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_max_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_max_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_height.restype = coord_t


def obj_get_style_height(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_height.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_height.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_height(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_height.restype)
    )


_lib_lvgl.py_lv_obj_get_style_min_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_min_height.restype = coord_t


def obj_get_style_min_height(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_min_height.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_min_height.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_min_height(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_min_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_min_height.restype)
    )


_lib_lvgl.py_lv_obj_get_style_max_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_max_height.restype = coord_t


def obj_get_style_max_height(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_max_height.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_max_height.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_max_height(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_max_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_max_height.restype)
    )


_lib_lvgl.py_lv_obj_get_style_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_x.restype = coord_t


def obj_get_style_x(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_x.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_x.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_x(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_x.restype)
    )


_lib_lvgl.py_lv_obj_get_style_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_y.restype = coord_t


def obj_get_style_y(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_y.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_y.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_y(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_y.restype)
    )


_lib_lvgl.py_lv_obj_get_style_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_align.restype = align_t


def obj_get_style_align(
    obj: _obj_t,
    part: _type_uint32_t
) -> align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_align.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_align(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_align.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_width.restype = coord_t


def obj_get_style_transform_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_height.restype = coord_t


def obj_get_style_transform_height(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_height.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_height.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_height(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_height.restype)
    )


_lib_lvgl.py_lv_obj_get_style_translate_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_translate_x.restype = coord_t


def obj_get_style_translate_x(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_translate_x.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_translate_x.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_translate_x(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_translate_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_translate_x.restype)
    )


_lib_lvgl.py_lv_obj_get_style_translate_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_translate_y.restype = coord_t


def obj_get_style_translate_y(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_translate_y.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_translate_y.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_translate_y(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_translate_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_translate_y.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_zoom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_zoom.restype = coord_t


def obj_get_style_transform_zoom(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_zoom.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_zoom.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_zoom(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_zoom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_zoom.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_angle.restype = coord_t


def obj_get_style_transform_angle(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_angle.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_angle.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_angle(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_angle.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_angle.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_pivot_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_pivot_x.restype = coord_t


def obj_get_style_transform_pivot_x(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_pivot_x.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_pivot_x.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_pivot_x(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_pivot_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_pivot_x.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_pivot_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_pivot_y.restype = coord_t


def obj_get_style_transform_pivot_y(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_pivot_y.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_pivot_y.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_pivot_y(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_pivot_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_pivot_y.restype)
    )


_lib_lvgl.py_lv_obj_get_style_pad_top.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_pad_top.restype = coord_t


def obj_get_style_pad_top(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_pad_top.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_pad_top.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_pad_top(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_pad_top.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_pad_top.restype)
    )


_lib_lvgl.py_lv_obj_get_style_pad_bottom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_pad_bottom.restype = coord_t


def obj_get_style_pad_bottom(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_pad_bottom.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_pad_bottom.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_pad_bottom(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_pad_bottom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_pad_bottom.restype)
    )


_lib_lvgl.py_lv_obj_get_style_pad_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_pad_left.restype = coord_t


def obj_get_style_pad_left(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_pad_left.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_pad_left.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_pad_left(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_pad_left.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_pad_left.restype)
    )


_lib_lvgl.py_lv_obj_get_style_pad_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_pad_right.restype = coord_t


def obj_get_style_pad_right(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_pad_right.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_pad_right.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_pad_right(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_pad_right.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_pad_right.restype)
    )


_lib_lvgl.py_lv_obj_get_style_pad_row.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_pad_row.restype = coord_t


def obj_get_style_pad_row(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_pad_row.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_pad_row.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_pad_row(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_pad_row.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_pad_row.restype)
    )


_lib_lvgl.py_lv_obj_get_style_pad_column.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_pad_column.restype = coord_t


def obj_get_style_pad_column(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_pad_column.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_pad_column.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_pad_column(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_pad_column.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_pad_column.restype)
    )


_lib_lvgl.py_lv_obj_get_style_margin_top.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_margin_top.restype = coord_t


def obj_get_style_margin_top(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_margin_top.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_margin_top.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_margin_top(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_margin_top.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_margin_top.restype)
    )


_lib_lvgl.py_lv_obj_get_style_margin_bottom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_margin_bottom.restype = coord_t


def obj_get_style_margin_bottom(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_margin_bottom.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_margin_bottom.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_margin_bottom(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_margin_bottom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_margin_bottom.restype)
    )


_lib_lvgl.py_lv_obj_get_style_margin_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_margin_left.restype = coord_t


def obj_get_style_margin_left(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_margin_left.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_margin_left.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_margin_left(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_margin_left.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_margin_left.restype)
    )


_lib_lvgl.py_lv_obj_get_style_margin_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_margin_right.restype = coord_t


def obj_get_style_margin_right(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_margin_right.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_margin_right.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_margin_right(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_margin_right.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_margin_right.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_color.restype = color_t


def obj_get_style_bg_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_color_filtered.restype = color_t


def obj_get_style_bg_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_opa.restype = opa_t


def obj_get_style_bg_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_grad_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_grad_color.restype = color_t


def obj_get_style_bg_grad_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_grad_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_grad_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_grad_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered.restype = color_t


def obj_get_style_bg_grad_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_grad_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_grad_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_grad_dir.restype = grad_dir_t


def obj_get_style_bg_grad_dir(
    obj: _obj_t,
    part: _type_uint32_t
) -> grad_dir_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_dir.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_dir.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_grad_dir(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_grad_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_grad_dir.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_main_stop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_main_stop.restype = coord_t


def obj_get_style_bg_main_stop(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_main_stop.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_main_stop.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_main_stop(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_main_stop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_main_stop.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_grad_stop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_grad_stop.restype = coord_t


def obj_get_style_bg_grad_stop(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_stop.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad_stop.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_grad_stop(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_grad_stop.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_grad_stop.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_grad.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_grad.restype = _ctypes.POINTER(grad_dsc_t)


def obj_get_style_bg_grad(
    obj: _obj_t,
    part: _type_uint32_t
) -> grad_dsc_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_grad.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_grad(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_grad.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_grad.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_dither_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_dither_mode.restype = dither_mode_t


def obj_get_style_bg_dither_mode(
    obj: _obj_t,
    part: _type_uint32_t
) -> dither_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_dither_mode.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_dither_mode.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_dither_mode(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_dither_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_dither_mode.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_img_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_img_src.restype = void_t


def obj_get_style_bg_img_src(
    obj: _obj_t,
    part: _type_uint32_t
) -> void_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_src.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_src.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_img_src(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_img_src.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_img_src.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_img_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_img_opa.restype = opa_t


def obj_get_style_bg_img_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_img_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_img_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_img_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_img_recolor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_img_recolor.restype = color_t


def obj_get_style_bg_img_recolor(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_recolor.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_recolor.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_img_recolor(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_img_recolor.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_img_recolor.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered.restype = color_t


def obj_get_style_bg_img_recolor_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa.restype = opa_t


def obj_get_style_bg_img_recolor_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_img_recolor_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_bg_img_tiled.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_bg_img_tiled.restype = bool_t


def obj_get_style_bg_img_tiled(
    obj: _obj_t,
    part: _type_uint32_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_tiled.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_bg_img_tiled.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_bg_img_tiled(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_bg_img_tiled.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_bg_img_tiled.restype)
    )


_lib_lvgl.py_lv_obj_get_style_border_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_border_color.restype = color_t


def obj_get_style_border_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_border_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_border_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_border_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_border_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_border_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_border_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_border_color_filtered.restype = color_t


def obj_get_style_border_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_border_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_border_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_border_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_border_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_border_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_border_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_border_opa.restype = opa_t


def obj_get_style_border_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_border_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_border_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_border_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_border_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_border_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_border_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_border_width.restype = coord_t


def obj_get_style_border_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_border_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_border_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_border_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_border_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_border_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_border_side.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_border_side.restype = border_side_t


def obj_get_style_border_side(
    obj: _obj_t,
    part: _type_uint32_t
) -> border_side_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_border_side.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_border_side.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_border_side(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_border_side.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_border_side.restype)
    )


_lib_lvgl.py_lv_obj_get_style_border_post.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_border_post.restype = bool_t


def obj_get_style_border_post(
    obj: _obj_t,
    part: _type_uint32_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_border_post.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_border_post.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_border_post(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_border_post.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_border_post.restype)
    )


_lib_lvgl.py_lv_obj_get_style_outline_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_outline_width.restype = coord_t


def obj_get_style_outline_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_outline_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_outline_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_outline_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_outline_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_outline_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_outline_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_outline_color.restype = color_t


def obj_get_style_outline_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_outline_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_outline_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_outline_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_outline_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_outline_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_outline_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_outline_color_filtered.restype = color_t


def obj_get_style_outline_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_outline_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_outline_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_outline_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_outline_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_outline_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_outline_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_outline_opa.restype = opa_t


def obj_get_style_outline_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_outline_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_outline_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_outline_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_outline_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_outline_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_outline_pad.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_outline_pad.restype = coord_t


def obj_get_style_outline_pad(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_outline_pad.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_outline_pad.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_outline_pad(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_outline_pad.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_outline_pad.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_width.restype = coord_t


def obj_get_style_shadow_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_ofs_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_ofs_x.restype = coord_t


def obj_get_style_shadow_ofs_x(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_ofs_x.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_ofs_x.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_ofs_x(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_ofs_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_ofs_x.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_ofs_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_ofs_y.restype = coord_t


def obj_get_style_shadow_ofs_y(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_ofs_y.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_ofs_y.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_ofs_y(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_ofs_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_ofs_y.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_spread.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_spread.restype = coord_t


def obj_get_style_shadow_spread(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_spread.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_spread.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_spread(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_spread.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_spread.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_color.restype = color_t


def obj_get_style_shadow_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_color_filtered.restype = color_t


def obj_get_style_shadow_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_shadow_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_shadow_opa.restype = opa_t


def obj_get_style_shadow_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_shadow_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_shadow_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_shadow_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_shadow_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_shadow_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_img_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_img_opa.restype = opa_t


def obj_get_style_img_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_img_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_img_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_img_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_img_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_img_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_img_recolor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_img_recolor.restype = color_t


def obj_get_style_img_recolor(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_img_recolor.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_img_recolor.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_img_recolor(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_img_recolor.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_img_recolor.restype)
    )


_lib_lvgl.py_lv_obj_get_style_img_recolor_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_img_recolor_filtered.restype = color_t


def obj_get_style_img_recolor_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_img_recolor_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_img_recolor_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_img_recolor_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_img_recolor_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_img_recolor_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_img_recolor_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_img_recolor_opa.restype = opa_t


def obj_get_style_img_recolor_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_img_recolor_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_img_recolor_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_img_recolor_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_img_recolor_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_img_recolor_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_width.restype = coord_t


def obj_get_style_line_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_dash_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_dash_width.restype = coord_t


def obj_get_style_line_dash_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_dash_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_dash_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_dash_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_dash_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_dash_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_dash_gap.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_dash_gap.restype = coord_t


def obj_get_style_line_dash_gap(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_dash_gap.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_dash_gap.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_dash_gap(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_dash_gap.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_dash_gap.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_rounded.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_rounded.restype = bool_t


def obj_get_style_line_rounded(
    obj: _obj_t,
    part: _type_uint32_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_rounded.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_rounded.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_rounded(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_rounded.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_rounded.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_color.restype = color_t


def obj_get_style_line_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_color_filtered.restype = color_t


def obj_get_style_line_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_line_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_line_opa.restype = opa_t


def obj_get_style_line_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_line_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_line_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_line_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_line_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_line_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_arc_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_arc_width.restype = coord_t


def obj_get_style_arc_width(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_arc_width.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_arc_width.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_arc_width(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_arc_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_arc_width.restype)
    )


_lib_lvgl.py_lv_obj_get_style_arc_rounded.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_arc_rounded.restype = bool_t


def obj_get_style_arc_rounded(
    obj: _obj_t,
    part: _type_uint32_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_arc_rounded.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_arc_rounded.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_arc_rounded(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_arc_rounded.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_arc_rounded.restype)
    )


_lib_lvgl.py_lv_obj_get_style_arc_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_arc_color.restype = color_t


def obj_get_style_arc_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_arc_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_arc_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_arc_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_arc_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_arc_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_arc_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_arc_color_filtered.restype = color_t


def obj_get_style_arc_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_arc_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_arc_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_arc_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_arc_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_arc_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_arc_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_arc_opa.restype = opa_t


def obj_get_style_arc_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_arc_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_arc_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_arc_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_arc_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_arc_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_arc_img_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_arc_img_src.restype = void_t


def obj_get_style_arc_img_src(
    obj: _obj_t,
    part: _type_uint32_t
) -> void_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_arc_img_src.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_arc_img_src.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_arc_img_src(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_arc_img_src.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_arc_img_src.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_color.restype = color_t


def obj_get_style_text_color(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_color.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_color.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_color(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_color.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_color_filtered.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_color_filtered.restype = color_t


def obj_get_style_text_color_filtered(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_color_filtered.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_color_filtered.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_color_filtered(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_color_filtered.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_color_filtered.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_opa.restype = opa_t


def obj_get_style_text_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_font.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_font.restype = _ctypes.POINTER(font_t)


def obj_get_style_text_font(
    obj: _obj_t,
    part: _type_uint32_t
) -> font_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_font.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_font.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_font(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_font.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_font.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_letter_space.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_letter_space.restype = coord_t


def obj_get_style_text_letter_space(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_letter_space.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_letter_space.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_letter_space(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_letter_space.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_letter_space.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_line_space.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_line_space.restype = coord_t


def obj_get_style_text_line_space(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_line_space.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_line_space.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_line_space(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_line_space.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_line_space.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_decor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_decor.restype = text_decor_t


def obj_get_style_text_decor(
    obj: _obj_t,
    part: _type_uint32_t
) -> text_decor_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_decor.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_decor.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_decor(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_decor.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_decor.restype)
    )


_lib_lvgl.py_lv_obj_get_style_text_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_text_align.restype = text_align_t


def obj_get_style_text_align(
    obj: _obj_t,
    part: _type_uint32_t
) -> text_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_text_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_text_align.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_text_align(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_text_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_text_align.restype)
    )


_lib_lvgl.py_lv_obj_get_style_radius.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_radius.restype = coord_t


def obj_get_style_radius(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_radius.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_radius.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_radius(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_radius.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_radius.restype)
    )


_lib_lvgl.py_lv_obj_get_style_clip_corner.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_clip_corner.restype = bool_t


def obj_get_style_clip_corner(
    obj: _obj_t,
    part: _type_uint32_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_clip_corner.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_clip_corner.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_clip_corner(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_clip_corner.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_clip_corner.restype)
    )


_lib_lvgl.py_lv_obj_get_style_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_opa.restype = opa_t


def obj_get_style_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_color_filter_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_color_filter_dsc.restype = _ctypes.POINTER(color_filter_dsc_t)


def obj_get_style_color_filter_dsc(
    obj: _obj_t,
    part: _type_uint32_t
) -> color_filter_dsc_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_color_filter_dsc.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_color_filter_dsc.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_color_filter_dsc(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_color_filter_dsc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_color_filter_dsc.restype)
    )


_lib_lvgl.py_lv_obj_get_style_color_filter_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_color_filter_opa.restype = opa_t


def obj_get_style_color_filter_opa(
    obj: _obj_t,
    part: _type_uint32_t
) -> opa_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_color_filter_opa.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_color_filter_opa.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_color_filter_opa(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_color_filter_opa.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_color_filter_opa.restype)
    )


_lib_lvgl.py_lv_obj_get_style_anim.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_anim.restype = _ctypes.POINTER(anim_t)


def obj_get_style_anim(
    obj: _obj_t,
    part: _type_uint32_t
) -> anim_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_anim.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_anim.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_anim(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_anim.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_anim.restype)
    )


_lib_lvgl.py_lv_obj_get_style_anim_time.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_anim_time.restype = uint32_t


def obj_get_style_anim_time(
    obj: _obj_t,
    part: _type_uint32_t
) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_anim_time.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_anim_time.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_anim_time(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_anim_time.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_anim_time.restype)
    )


_lib_lvgl.py_lv_obj_get_style_anim_speed.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_anim_speed.restype = uint32_t


def obj_get_style_anim_speed(
    obj: _obj_t,
    part: _type_uint32_t
) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_anim_speed.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_anim_speed.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_anim_speed(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_anim_speed.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_anim_speed.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transition.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transition.restype = _ctypes.POINTER(style_transition_dsc_t)


def obj_get_style_transition(
    obj: _obj_t,
    part: _type_uint32_t
) -> style_transition_dsc_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transition.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transition.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transition(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transition.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transition.restype)
    )


_lib_lvgl.py_lv_obj_get_style_blend_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_blend_mode.restype = blend_mode_t


def obj_get_style_blend_mode(
    obj: _obj_t,
    part: _type_uint32_t
) -> blend_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_blend_mode.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_blend_mode.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_blend_mode(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_blend_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_blend_mode.restype)
    )


_lib_lvgl.py_lv_obj_get_style_layout.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_layout.restype = uint16_t


def obj_get_style_layout(
    obj: _obj_t,
    part: _type_uint32_t
) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_layout.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_layout.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_layout(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_layout.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_layout.restype)
    )


_lib_lvgl.py_lv_obj_get_style_base_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_base_dir.restype = base_dir_t


def obj_get_style_base_dir(
    obj: _obj_t,
    part: _type_uint32_t
) -> base_dir_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_base_dir.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_base_dir.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_base_dir(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_base_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_base_dir.restype)
    )


_lib_lvgl.py_lv_obj_set_style_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_width.restype = None


def obj_set_style_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_min_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_min_width.restype = None


def obj_set_style_min_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_min_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_min_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_min_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_min_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_max_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_max_width.restype = None


def obj_set_style_max_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_max_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_max_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_max_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_max_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_height.restype = None


def obj_set_style_height(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_height.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_height.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_height.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_height(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_min_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_min_height.restype = None


def obj_set_style_min_height(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_min_height.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_min_height.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_min_height.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_min_height(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_max_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_max_height.restype = None


def obj_set_style_max_height(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_max_height.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_max_height.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_max_height.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_max_height(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_x.restype = None


def obj_set_style_x(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_x.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_x.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_x.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_x(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_y.restype = None


def obj_set_style_y(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_y.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_y.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_y.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_y(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_align.restype = None


def obj_set_style_align(
    obj: _obj_t,
    value: align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_align.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_align.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_align.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_align(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transform_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transform_width.restype = None


def obj_set_style_transform_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transform_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transform_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transform_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transform_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transform_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transform_height.restype = None


def obj_set_style_transform_height(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transform_height.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transform_height.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transform_height.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transform_height(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_translate_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_translate_x.restype = None


def obj_set_style_translate_x(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_translate_x.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_translate_x.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_translate_x.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_translate_x(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_translate_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_translate_y.restype = None


def obj_set_style_translate_y(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_translate_y.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_translate_y.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_translate_y.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_translate_y(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transform_zoom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transform_zoom.restype = None


def obj_set_style_transform_zoom(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transform_zoom.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transform_zoom.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transform_zoom.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transform_zoom(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transform_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transform_angle.restype = None


def obj_set_style_transform_angle(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transform_angle.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transform_angle.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transform_angle.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transform_angle(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transform_pivot_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transform_pivot_x.restype = None


def obj_set_style_transform_pivot_x(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transform_pivot_x.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transform_pivot_x.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transform_pivot_x.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transform_pivot_x(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transform_pivot_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transform_pivot_y.restype = None


def obj_set_style_transform_pivot_y(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transform_pivot_y.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transform_pivot_y.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transform_pivot_y.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transform_pivot_y(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_top.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_top.restype = None


def obj_set_style_pad_top(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_top.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_top.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_top.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_top(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_bottom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_bottom.restype = None


def obj_set_style_pad_bottom(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_bottom.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_bottom.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_bottom.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_bottom(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_left.restype = None


def obj_set_style_pad_left(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_left.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_left.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_left.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_left(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_right.restype = None


def obj_set_style_pad_right(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_right.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_right.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_right.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_right(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_row.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_row.restype = None


def obj_set_style_pad_row(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_row.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_row.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_row.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_row(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_column.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_column.restype = None


def obj_set_style_pad_column(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_column.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_column.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_column.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_column(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_top.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_top.restype = None


def obj_set_style_margin_top(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_top.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_top.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_top.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_top(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_bottom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_bottom.restype = None


def obj_set_style_margin_bottom(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_bottom.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_bottom.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_bottom.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_bottom(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_left.restype = None


def obj_set_style_margin_left(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_left.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_left.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_left.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_left(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_right.restype = None


def obj_set_style_margin_right(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_right.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_right.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_right.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_right(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_color.restype = None


def obj_set_style_bg_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_opa.restype = None


def obj_set_style_bg_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_grad_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_grad_color.restype = None


def obj_set_style_bg_grad_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_grad_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_grad_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=grad_dir_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_grad_dir.restype = None


def obj_set_style_bg_grad_dir(
    obj: _obj_t,
    value: grad_dir_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_dir.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_dir.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_dir.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_grad_dir(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_main_stop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_main_stop.restype = None


def obj_set_style_bg_main_stop(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_main_stop.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_main_stop.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_main_stop.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_main_stop(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_grad_stop.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_grad_stop.restype = None


def obj_set_style_bg_grad_stop(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_stop.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_stop.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad_stop.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_grad_stop(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_grad.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=_ctypes.POINTER(grad_dsc_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_grad.restype = None


def obj_set_style_bg_grad(
    obj: _obj_t,
    value: grad_dsc_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_grad.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_grad(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_dither_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=dither_mode_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_dither_mode.restype = None


def obj_set_style_bg_dither_mode(
    obj: _obj_t,
    value: dither_mode_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_dither_mode.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_dither_mode.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_dither_mode.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_dither_mode(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_img_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=void_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_img_src.restype = None


def obj_set_style_bg_img_src(
    obj: _obj_t,
    value: void_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_src.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_src.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_src.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_img_src(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_img_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_img_opa.restype = None


def obj_set_style_bg_img_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_img_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_img_recolor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_img_recolor.restype = None


def obj_set_style_bg_img_recolor(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_recolor.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_recolor.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_recolor.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_img_recolor(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_img_recolor_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_img_recolor_opa.restype = None


def obj_set_style_bg_img_recolor_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_recolor_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_recolor_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_recolor_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_img_recolor_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_bg_img_tiled.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=bool_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_bg_img_tiled.restype = None


def obj_set_style_bg_img_tiled(
    obj: _obj_t,
    value: _type_bool_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_tiled.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_tiled.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_bg_img_tiled.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_bg_img_tiled(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_border_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_border_color.restype = None


def obj_set_style_border_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_border_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_border_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_border_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_border_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_border_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_border_opa.restype = None


def obj_set_style_border_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_border_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_border_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_border_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_border_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_border_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_border_width.restype = None


def obj_set_style_border_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_border_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_border_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_border_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_border_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_border_side.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=border_side_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_border_side.restype = None


def obj_set_style_border_side(
    obj: _obj_t,
    value: border_side_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_border_side.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_border_side.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_border_side.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_border_side(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_border_post.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=bool_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_border_post.restype = None


def obj_set_style_border_post(
    obj: _obj_t,
    value: _type_bool_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_border_post.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_border_post.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_border_post.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_border_post(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_outline_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_outline_width.restype = None


def obj_set_style_outline_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_outline_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_outline_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_outline_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_outline_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_outline_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_outline_color.restype = None


def obj_set_style_outline_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_outline_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_outline_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_outline_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_outline_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_outline_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_outline_opa.restype = None


def obj_set_style_outline_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_outline_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_outline_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_outline_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_outline_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_outline_pad.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_outline_pad.restype = None


def obj_set_style_outline_pad(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_outline_pad.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_outline_pad.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_outline_pad.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_outline_pad(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_shadow_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_shadow_width.restype = None


def obj_set_style_shadow_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_shadow_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_shadow_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_shadow_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_shadow_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_shadow_ofs_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_shadow_ofs_x.restype = None


def obj_set_style_shadow_ofs_x(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_shadow_ofs_x.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_shadow_ofs_x.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_shadow_ofs_x.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_shadow_ofs_x(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_shadow_ofs_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_shadow_ofs_y.restype = None


def obj_set_style_shadow_ofs_y(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_shadow_ofs_y.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_shadow_ofs_y.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_shadow_ofs_y.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_shadow_ofs_y(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_shadow_spread.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_shadow_spread.restype = None


def obj_set_style_shadow_spread(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_shadow_spread.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_shadow_spread.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_shadow_spread.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_shadow_spread(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_shadow_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_shadow_color.restype = None


def obj_set_style_shadow_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_shadow_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_shadow_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_shadow_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_shadow_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_shadow_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_shadow_opa.restype = None


def obj_set_style_shadow_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_shadow_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_shadow_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_shadow_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_shadow_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_img_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_img_opa.restype = None


def obj_set_style_img_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_img_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_img_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_img_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_img_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_img_recolor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_img_recolor.restype = None


def obj_set_style_img_recolor(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_img_recolor.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_img_recolor.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_img_recolor.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_img_recolor(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_img_recolor_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_img_recolor_opa.restype = None


def obj_set_style_img_recolor_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_img_recolor_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_img_recolor_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_img_recolor_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_img_recolor_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_line_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_line_width.restype = None


def obj_set_style_line_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_line_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_line_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_line_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_line_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_line_dash_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_line_dash_width.restype = None


def obj_set_style_line_dash_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_line_dash_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_line_dash_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_line_dash_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_line_dash_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_line_dash_gap.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_line_dash_gap.restype = None


def obj_set_style_line_dash_gap(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_line_dash_gap.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_line_dash_gap.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_line_dash_gap.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_line_dash_gap(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_line_rounded.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=bool_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_line_rounded.restype = None


def obj_set_style_line_rounded(
    obj: _obj_t,
    value: _type_bool_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_line_rounded.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_line_rounded.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_line_rounded.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_line_rounded(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_line_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_line_color.restype = None


def obj_set_style_line_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_line_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_line_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_line_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_line_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_line_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_line_opa.restype = None


def obj_set_style_line_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_line_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_line_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_line_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_line_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_arc_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_arc_width.restype = None


def obj_set_style_arc_width(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_arc_width.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_arc_width.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_arc_width.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_arc_width(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_arc_rounded.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=bool_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_arc_rounded.restype = None


def obj_set_style_arc_rounded(
    obj: _obj_t,
    value: _type_bool_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_arc_rounded.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_arc_rounded.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_arc_rounded.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_arc_rounded(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_arc_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_arc_color.restype = None


def obj_set_style_arc_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_arc_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_arc_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_arc_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_arc_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_arc_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_arc_opa.restype = None


def obj_set_style_arc_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_arc_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_arc_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_arc_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_arc_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_arc_img_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=void_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_arc_img_src.restype = None


def obj_set_style_arc_img_src(
    obj: _obj_t,
    value: void_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_arc_img_src.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_arc_img_src.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_arc_img_src.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_arc_img_src(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=color_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_color.restype = None


def obj_set_style_text_color(
    obj: _obj_t,
    value: color_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_color.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_color.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_color.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_color(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_opa.restype = None


def obj_set_style_text_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_font.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=_ctypes.POINTER(font_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_font.restype = None


def obj_set_style_text_font(
    obj: _obj_t,
    value: font_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_font.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_font.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_font.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_font(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_letter_space.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_letter_space.restype = None


def obj_set_style_text_letter_space(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_letter_space.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_letter_space.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_letter_space.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_letter_space(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_line_space.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_line_space.restype = None


def obj_set_style_text_line_space(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_line_space.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_line_space.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_line_space.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_line_space(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_decor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=text_decor_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_decor.restype = None


def obj_set_style_text_decor(
    obj: _obj_t,
    value: text_decor_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_decor.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_decor.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_decor.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_decor(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_text_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=text_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_text_align.restype = None


def obj_set_style_text_align(
    obj: _obj_t,
    value: text_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_text_align.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_text_align.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_text_align.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_text_align(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_radius.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_radius.restype = None


def obj_set_style_radius(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_radius.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_radius.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_radius.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_radius(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_clip_corner.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=bool_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_clip_corner.restype = None


def obj_set_style_clip_corner(
    obj: _obj_t,
    value: _type_bool_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_clip_corner.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_clip_corner.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_clip_corner.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_clip_corner(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_opa.restype = None


def obj_set_style_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_color_filter_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=_ctypes.POINTER(color_filter_dsc_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_color_filter_dsc.restype = None


def obj_set_style_color_filter_dsc(
    obj: _obj_t,
    value: color_filter_dsc_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_color_filter_dsc.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_color_filter_dsc.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_color_filter_dsc.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_color_filter_dsc(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_color_filter_opa.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=opa_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_color_filter_opa.restype = None


def obj_set_style_color_filter_opa(
    obj: _obj_t,
    value: opa_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_color_filter_opa.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_color_filter_opa.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_color_filter_opa.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_color_filter_opa(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_anim.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=_ctypes.POINTER(anim_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_anim.restype = None


def obj_set_style_anim(
    obj: _obj_t,
    value: anim_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_anim.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_anim.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_anim.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_anim(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_anim_time.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=uint32_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_anim_time.restype = None


def obj_set_style_anim_time(
    obj: _obj_t,
    value: _type_uint32_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_anim_time.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_anim_time.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_anim_time.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_anim_time(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_anim_speed.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=uint32_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_anim_speed.restype = None


def obj_set_style_anim_speed(
    obj: _obj_t,
    value: _type_uint32_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_anim_speed.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_anim_speed.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_anim_speed.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_anim_speed(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_transition.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=_ctypes.POINTER(style_transition_dsc_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_transition.restype = None


def obj_set_style_transition(
    obj: _obj_t,
    value: style_transition_dsc_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_transition.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_transition.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_transition.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_transition(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_blend_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=blend_mode_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_blend_mode.restype = None


def obj_set_style_blend_mode(
    obj: _obj_t,
    value: blend_mode_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_blend_mode.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_blend_mode.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_blend_mode.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_blend_mode(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_layout.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=uint16_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_layout.restype = None


def obj_set_style_layout(
    obj: _obj_t,
    value: _type_uint16_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_layout.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_layout.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_layout.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_layout(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_base_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=base_dir_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_base_dir.restype = None


def obj_set_style_base_dir(
    obj: _obj_t,
    value: base_dir_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_base_dir.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_base_dir.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_base_dir.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_base_dir(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_all.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_all.restype = None


def obj_set_style_pad_all(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_all.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_all.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_all.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_all(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_hor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_hor.restype = None


def obj_set_style_pad_hor(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_hor.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_hor.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_hor.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_hor(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_ver.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_ver.restype = None


def obj_set_style_pad_ver(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_ver.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_ver.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_ver.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_ver(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_all.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_all.restype = None


def obj_set_style_margin_all(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_all.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_all.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_all.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_all(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_hor.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_hor.restype = None


def obj_set_style_margin_hor(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_hor.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_hor.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_hor.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_hor(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_margin_ver.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_margin_ver.restype = None


def obj_set_style_margin_ver(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_margin_ver.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_margin_ver.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_margin_ver.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_margin_ver(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_pad_gap.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_pad_gap.restype = None


def obj_set_style_pad_gap(
    obj: _obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_pad_gap.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_pad_gap.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_pad_gap.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_pad_gap(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    width=coord_t,
    height=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_size.restype = None


def obj_set_style_size(
    obj: _obj_t,
    width: coord_t,
    height: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_size.argtypes.obj
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_obj_set_style_size.argtypes.width
    )

    height = _convert_to_ctype(
        height, 
        _lib_lvgl.py_lv_obj_set_style_size.argtypes.height
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_size.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_size(obj, width, height, selector)


_lib_lvgl.py_lv_obj_get_style_space_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_space_left.restype = coord_t


def obj_get_style_space_left(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_space_left.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_space_left.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_space_left(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_space_left.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_space_left.restype)
    )


_lib_lvgl.py_lv_obj_get_style_space_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_space_right.restype = coord_t


def obj_get_style_space_right(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_space_right.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_space_right.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_space_right(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_space_right.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_space_right.restype)
    )


_lib_lvgl.py_lv_obj_get_style_space_top.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_space_top.restype = coord_t


def obj_get_style_space_top(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_space_top.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_space_top.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_space_top(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_space_top.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_space_top.restype)
    )


_lib_lvgl.py_lv_obj_get_style_space_bottom.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_space_bottom.restype = coord_t


def obj_get_style_space_bottom(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_space_bottom.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_space_bottom.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_space_bottom(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_space_bottom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_space_bottom.restype)
    )


_lib_lvgl.py_lv_obj_calculate_style_text_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=part_t,
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_obj_calculate_style_text_align.restype = text_align_t


def obj_calculate_style_text_align(
    obj: _obj_t,
    part: part_t,
    txt: _type_char_t
) -> text_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_calculate_style_text_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_calculate_style_text_align.argtypes.part
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_obj_calculate_style_text_align.argtypes.txt
    )

    res = _lib_lvgl.py_lv_obj_calculate_style_text_align(obj, part, txt)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_calculate_style_text_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_calculate_style_text_align.restype)
    )


_lib_lvgl.py_lv_obj_get_style_transform_zoom_safe.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_transform_zoom_safe.restype = coord_t


def obj_get_style_transform_zoom_safe(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_transform_zoom_safe.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_transform_zoom_safe.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_transform_zoom_safe(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_transform_zoom_safe.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_transform_zoom_safe.restype)
    )


_lib_lvgl.py_lv_obj_init_draw_rect_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t,
    draw_dsc=_ctypes.POINTER(draw_rect_dsc_t)
)
_lib_lvgl.py_lv_obj_init_draw_rect_dsc.restype = None


def obj_init_draw_rect_dsc(
    obj: _obj_t,
    part: _type_uint32_t,
    draw_dsc: draw_rect_dsc_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_init_draw_rect_dsc.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_init_draw_rect_dsc.argtypes.part
    )

    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_obj_init_draw_rect_dsc.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_obj_init_draw_rect_dsc(obj, part, draw_dsc)


_lib_lvgl.py_lv_obj_init_draw_label_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t,
    draw_dsc=_ctypes.POINTER(draw_label_dsc_t)
)
_lib_lvgl.py_lv_obj_init_draw_label_dsc.restype = None


def obj_init_draw_label_dsc(
    obj: _obj_t,
    part: _type_uint32_t,
    draw_dsc: draw_label_dsc_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_init_draw_label_dsc.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_init_draw_label_dsc.argtypes.part
    )

    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_obj_init_draw_label_dsc.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_obj_init_draw_label_dsc(obj, part, draw_dsc)


_lib_lvgl.py_lv_obj_init_draw_img_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t,
    draw_dsc=_ctypes.POINTER(draw_img_dsc_t)
)
_lib_lvgl.py_lv_obj_init_draw_img_dsc.restype = None


def obj_init_draw_img_dsc(
    obj: _obj_t,
    part: _type_uint32_t,
    draw_dsc: draw_img_dsc_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_init_draw_img_dsc.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_init_draw_img_dsc.argtypes.part
    )

    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_obj_init_draw_img_dsc.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_obj_init_draw_img_dsc(obj, part, draw_dsc)


_lib_lvgl.py_lv_obj_init_draw_line_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t,
    draw_dsc=_ctypes.POINTER(draw_line_dsc_t)
)
_lib_lvgl.py_lv_obj_init_draw_line_dsc.restype = None


def obj_init_draw_line_dsc(
    obj: _obj_t,
    part: _type_uint32_t,
    draw_dsc: draw_line_dsc_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_init_draw_line_dsc.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_init_draw_line_dsc.argtypes.part
    )

    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_obj_init_draw_line_dsc.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_obj_init_draw_line_dsc(obj, part, draw_dsc)


_lib_lvgl.py_lv_obj_init_draw_arc_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t,
    draw_dsc=_ctypes.POINTER(draw_arc_dsc_t)
)
_lib_lvgl.py_lv_obj_init_draw_arc_dsc.restype = None


def obj_init_draw_arc_dsc(
    obj: _obj_t,
    part: _type_uint32_t,
    draw_dsc: draw_arc_dsc_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_init_draw_arc_dsc.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_init_draw_arc_dsc.argtypes.part
    )

    draw_dsc = _convert_to_ctype(
        draw_dsc, 
        _lib_lvgl.py_lv_obj_init_draw_arc_dsc.argtypes.draw_dsc
    )

    _lib_lvgl.py_lv_obj_init_draw_arc_dsc(obj, part, draw_dsc)


_lib_lvgl.py_lv_obj_calculate_ext_draw_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_calculate_ext_draw_size.restype = coord_t


def obj_calculate_ext_draw_size(
    obj: _obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_calculate_ext_draw_size.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_calculate_ext_draw_size.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_calculate_ext_draw_size(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_calculate_ext_draw_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_calculate_ext_draw_size.restype)
    )


_lib_lvgl.py_lv_obj_refresh_ext_draw_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_refresh_ext_draw_size.restype = None


def obj_refresh_ext_draw_size(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_refresh_ext_draw_size.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_refresh_ext_draw_size(obj)


_lib_lvgl.py__lv_obj_get_ext_draw_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py__lv_obj_get_ext_draw_size.restype = coord_t


def _obj_get_ext_draw_size(obj: _obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_get_ext_draw_size.argtypes.obj
    )

    res = _lib_lvgl.py__lv_obj_get_ext_draw_size(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_obj_get_ext_draw_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_obj_get_ext_draw_size.restype)
    )


_lib_lvgl.py__lv_obj_get_layer_type.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py__lv_obj_get_layer_type.restype = layer_type_t


def _obj_get_layer_type(obj: _obj_t) -> layer_type_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_get_layer_type.argtypes.obj
    )

    res = _lib_lvgl.py__lv_obj_get_layer_type(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_obj_get_layer_type.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_obj_get_layer_type.restype)
    )


_lib_lvgl.py_lv_obj_class_create_obj.argtypes = __CArgList(
    class_p=_ctypes.POINTER(_obj_class_t),
    parent=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_class_create_obj.restype = _ctypes.POINTER(_obj_t)


def obj_class_create_obj(
    class_p: _obj_class_t,
    parent: _obj_t
) -> _obj_t:
    class_p = _convert_to_ctype(
        class_p, 
        _lib_lvgl.py_lv_obj_class_create_obj.argtypes.class_p
    )

    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_obj_class_create_obj.argtypes.parent
    )

    res = _lib_lvgl.py_lv_obj_class_create_obj(class_p, parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_class_create_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_class_create_obj.restype)
    )


_lib_lvgl.py_lv_obj_class_init_obj.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_class_init_obj.restype = None


def obj_class_init_obj(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_class_init_obj.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_class_init_obj(obj)


_lib_lvgl.py__lv_obj_destruct.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py__lv_obj_destruct.restype = None


def _obj_destruct(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py__lv_obj_destruct.argtypes.obj
    )

    _lib_lvgl.py__lv_obj_destruct(obj)


_lib_lvgl.py_lv_obj_is_editable.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_is_editable.restype = bool_t


def obj_is_editable(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_is_editable.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_is_editable(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_is_editable.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_is_editable.restype)
    )


_lib_lvgl.py_lv_obj_is_group_def.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_is_group_def.restype = bool_t


def obj_is_group_def(obj: _obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_is_group_def.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_is_group_def(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_is_group_def.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_is_group_def.restype)
    )


_lib_lvgl.py__lv_ll_init.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t),
    node_size=uint32_t
)
_lib_lvgl.py__lv_ll_init.restype = None


def _ll_init(
    ll_p: ll_t,
    node_size: _type_uint32_t
) -> None:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_init.argtypes.ll_p
    )

    node_size = _convert_to_ctype(
        node_size, 
        _lib_lvgl.py__lv_ll_init.argtypes.node_size
    )

    _lib_lvgl.py__lv_ll_init(ll_p, node_size)


_lib_lvgl.py__lv_ll_ins_head.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_ins_head.restype = void_t


def _ll_ins_head(ll_p: ll_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_ins_head.argtypes.ll_p
    )

    res = _lib_lvgl.py__lv_ll_ins_head(ll_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_ins_head.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_ins_head.restype)
    )


_lib_lvgl.py__lv_ll_ins_prev.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t),
    n_act=void_t
)
_lib_lvgl.py__lv_ll_ins_prev.restype = void_t


def _ll_ins_prev(ll_p: ll_t, n_act: void_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_ins_prev.argtypes.ll_p
    )

    n_act = _convert_to_ctype(
        n_act, 
        _lib_lvgl.py__lv_ll_ins_prev.argtypes.n_act
    )

    res = _lib_lvgl.py__lv_ll_ins_prev(ll_p, n_act)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_ins_prev.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_ins_prev.restype)
    )


_lib_lvgl.py__lv_ll_ins_tail.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_ins_tail.restype = void_t


def _ll_ins_tail(ll_p: ll_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_ins_tail.argtypes.ll_p
    )

    res = _lib_lvgl.py__lv_ll_ins_tail(ll_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_ins_tail.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_ins_tail.restype)
    )


_lib_lvgl.py__lv_ll_remove.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t),
    node_p=void_t
)
_lib_lvgl.py__lv_ll_remove.restype = None


def _ll_remove(ll_p: ll_t, node_p: void_t) -> None:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_remove.argtypes.ll_p
    )

    node_p = _convert_to_ctype(
        node_p, 
        _lib_lvgl.py__lv_ll_remove.argtypes.node_p
    )

    _lib_lvgl.py__lv_ll_remove(ll_p, node_p)


_lib_lvgl.py__lv_ll_clear.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_clear.restype = None


def _ll_clear(ll_p: ll_t) -> None:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_clear.argtypes.ll_p
    )

    _lib_lvgl.py__lv_ll_clear(ll_p)


_lib_lvgl.py__lv_ll_chg_list.argtypes = __CArgList(
    ll_ori_p=_ctypes.POINTER(ll_t),
    ll_new_p=_ctypes.POINTER(ll_t),
    node=void_t,
    head=bool_t
)
_lib_lvgl.py__lv_ll_chg_list.restype = None


def _ll_chg_list(
    ll_ori_p: ll_t,
    ll_new_p: ll_t,
    node: void_t,
    head: _type_bool_t
) -> None:
    ll_ori_p = _convert_to_ctype(
        ll_ori_p, 
        _lib_lvgl.py__lv_ll_chg_list.argtypes.ll_ori_p
    )

    ll_new_p = _convert_to_ctype(
        ll_new_p, 
        _lib_lvgl.py__lv_ll_chg_list.argtypes.ll_new_p
    )

    node = _convert_to_ctype(
        node, 
        _lib_lvgl.py__lv_ll_chg_list.argtypes.node
    )

    head = _convert_to_ctype(
        head, 
        _lib_lvgl.py__lv_ll_chg_list.argtypes.head
    )

    _lib_lvgl.py__lv_ll_chg_list(ll_ori_p, ll_new_p, node, head)


_lib_lvgl.py__lv_ll_get_head.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_get_head.restype = void_t


def _ll_get_head(ll_p: ll_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_get_head.argtypes.ll_p
    )

    res = _lib_lvgl.py__lv_ll_get_head(ll_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_get_head.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_get_head.restype)
    )


_lib_lvgl.py__lv_ll_get_tail.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_get_tail.restype = void_t


def _ll_get_tail(ll_p: ll_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_get_tail.argtypes.ll_p
    )

    res = _lib_lvgl.py__lv_ll_get_tail(ll_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_get_tail.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_get_tail.restype)
    )


_lib_lvgl.py__lv_ll_get_next.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t),
    n_act=void_t
)
_lib_lvgl.py__lv_ll_get_next.restype = void_t


def _ll_get_next(ll_p: ll_t, n_act: void_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_get_next.argtypes.ll_p
    )

    n_act = _convert_to_ctype(
        n_act, 
        _lib_lvgl.py__lv_ll_get_next.argtypes.n_act
    )

    res = _lib_lvgl.py__lv_ll_get_next(ll_p, n_act)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_get_next.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_get_next.restype)
    )


_lib_lvgl.py__lv_ll_get_prev.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t),
    n_act=void_t
)
_lib_lvgl.py__lv_ll_get_prev.restype = void_t


def _ll_get_prev(ll_p: ll_t, n_act: void_t) -> void_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_get_prev.argtypes.ll_p
    )

    n_act = _convert_to_ctype(
        n_act, 
        _lib_lvgl.py__lv_ll_get_prev.argtypes.n_act
    )

    res = _lib_lvgl.py__lv_ll_get_prev(ll_p, n_act)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_get_prev.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_get_prev.restype)
    )


_lib_lvgl.py__lv_ll_get_len.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_get_len.restype = uint32_t


def _ll_get_len(ll_p: ll_t) -> uint32_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_get_len.argtypes.ll_p
    )

    res = _lib_lvgl.py__lv_ll_get_len(ll_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_get_len.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_get_len.restype)
    )


_lib_lvgl.py__lv_ll_move_before.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t),
    n_act=void_t,
    n_after=void_t
)
_lib_lvgl.py__lv_ll_move_before.restype = None


def _ll_move_before(
    ll_p: ll_t,
    n_act: void_t,
    n_after: void_t
) -> None:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_move_before.argtypes.ll_p
    )

    n_act = _convert_to_ctype(
        n_act, 
        _lib_lvgl.py__lv_ll_move_before.argtypes.n_act
    )

    n_after = _convert_to_ctype(
        n_after, 
        _lib_lvgl.py__lv_ll_move_before.argtypes.n_after
    )

    _lib_lvgl.py__lv_ll_move_before(ll_p, n_act, n_after)


_lib_lvgl.py__lv_ll_is_empty.argtypes = __CArgList(
    ll_p=_ctypes.POINTER(ll_t)
)
_lib_lvgl.py__lv_ll_is_empty.restype = bool_t


def _ll_is_empty(ll_p: ll_t) -> bool_t:
    ll_p = _convert_to_ctype(
        ll_p, 
        _lib_lvgl.py__lv_ll_is_empty.argtypes.ll_p
    )

    res = _lib_lvgl.py__lv_ll_is_empty(ll_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_ll_is_empty.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_ll_is_empty.restype)
    )


_lib_lvgl.py__lv_group_init.argtypes = __CArgList()
_lib_lvgl.py__lv_group_init.restype = None


def _group_init() -> None:

    _lib_lvgl.py__lv_group_init()


_lib_lvgl.py_lv_group_create.argtypes = __CArgList()
_lib_lvgl.py_lv_group_create.restype = _ctypes.POINTER(group_t)


def group_create() -> group_t:

    res = _lib_lvgl.py_lv_group_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_create.restype)
    )


_lib_lvgl.py_lv_group_del.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_del.restype = None


def group_del(group: group_t) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_del.argtypes.group
    )

    _lib_lvgl.py_lv_group_del(group)


_lib_lvgl.py_lv_group_set_default.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_set_default.restype = None


def group_set_default(group: group_t) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_set_default.argtypes.group
    )

    _lib_lvgl.py_lv_group_set_default(group)


_lib_lvgl.py_lv_group_get_default.argtypes = __CArgList()
_lib_lvgl.py_lv_group_get_default.restype = _ctypes.POINTER(group_t)


def group_get_default() -> group_t:

    res = _lib_lvgl.py_lv_group_get_default()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_get_default.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_get_default.restype)
    )


_lib_lvgl.py_lv_group_add_obj.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_group_add_obj.restype = None


def group_add_obj(group: group_t, obj: _obj_t) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_add_obj.argtypes.group
    )

    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_group_add_obj.argtypes.obj
    )

    _lib_lvgl.py_lv_group_add_obj(group, obj)


_lib_lvgl.py_lv_group_swap_obj.argtypes = __CArgList(
    obj1=_ctypes.POINTER(_obj_t),
    obj2=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_group_swap_obj.restype = None


def group_swap_obj(obj1: _obj_t, obj2: _obj_t) -> None:
    obj1 = _convert_to_ctype(
        obj1, 
        _lib_lvgl.py_lv_group_swap_obj.argtypes.obj1
    )

    obj2 = _convert_to_ctype(
        obj2, 
        _lib_lvgl.py_lv_group_swap_obj.argtypes.obj2
    )

    _lib_lvgl.py_lv_group_swap_obj(obj1, obj2)


_lib_lvgl.py_lv_group_remove_obj.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_group_remove_obj.restype = None


def group_remove_obj(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_group_remove_obj.argtypes.obj
    )

    _lib_lvgl.py_lv_group_remove_obj(obj)


_lib_lvgl.py_lv_group_remove_all_objs.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_remove_all_objs.restype = None


def group_remove_all_objs(group: group_t) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_remove_all_objs.argtypes.group
    )

    _lib_lvgl.py_lv_group_remove_all_objs(group)


_lib_lvgl.py_lv_group_focus_obj.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_group_focus_obj.restype = None


def group_focus_obj(obj: _obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_group_focus_obj.argtypes.obj
    )

    _lib_lvgl.py_lv_group_focus_obj(obj)


_lib_lvgl.py_lv_group_focus_next.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_focus_next.restype = None


def group_focus_next(group: group_t) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_focus_next.argtypes.group
    )

    _lib_lvgl.py_lv_group_focus_next(group)


_lib_lvgl.py_lv_group_focus_prev.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_focus_prev.restype = None


def group_focus_prev(group: group_t) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_focus_prev.argtypes.group
    )

    _lib_lvgl.py_lv_group_focus_prev(group)


_lib_lvgl.py_lv_group_focus_freeze.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    en=bool_t
)
_lib_lvgl.py_lv_group_focus_freeze.restype = None


def group_focus_freeze(
    group: group_t,
    en: _type_bool_t
) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_focus_freeze.argtypes.group
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_group_focus_freeze.argtypes.en
    )

    _lib_lvgl.py_lv_group_focus_freeze(group, en)


_lib_lvgl.py_lv_group_send_data.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    c=uint32_t
)
_lib_lvgl.py_lv_group_send_data.restype = res_t


def group_send_data(
    group: group_t,
    c: _type_uint32_t
) -> res_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_send_data.argtypes.group
    )

    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_group_send_data.argtypes.c
    )

    res = _lib_lvgl.py_lv_group_send_data(group, c)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_send_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_send_data.restype)
    )


_lib_lvgl.py_lv_group_set_focus_cb.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    focus_cb=group_focus_cb_t
)
_lib_lvgl.py_lv_group_set_focus_cb.restype = None


_group_callback_storage = {}


def _group_weakref_callback(ref):
    if ref in _group_callback_storage:
        del _group_callback_storage[ref]


def group_set_focus_cb(
    group: group_t,
    focus_cb: group_focus_cb_t
) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_set_focus_cb.argtypes.group
    )

    if inspect.ismethod(focus_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': focus_cb.__hash__}
        )
        ref = weakmethod(focus_cb, _group_weakref_callback)
    elif inspect.isfunction(focus_cb):
        ref = weakref.ref(focus_cb, _group_weakref_callback)
    else:
        raise TypeError

    if ref not in _group_callback_storage:
        focus_cb = group_focus_cb_t(focus_cb)
        _group_callback_storage[ref] = focus_cb
    else:
        focus_cb = _group_callback_storage[ref]

    _lib_lvgl.py_lv_group_set_focus_cb(group, focus_cb)


_lib_lvgl.py_lv_group_set_edge_cb.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    edge_cb=group_edge_cb_t
)
_lib_lvgl.py_lv_group_set_edge_cb.restype = None


def group_set_edge_cb(
    group: group_t,
    edge_cb: group_edge_cb_t
) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_set_edge_cb.argtypes.group
    )

    if inspect.ismethod(edge_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': edge_cb.__hash__}
        )
        ref = weakmethod(edge_cb, _group_weakref_callback)
    elif inspect.isfunction(edge_cb):
        ref = weakref.ref(edge_cb, _group_weakref_callback)
    else:
        raise TypeError

    if ref not in _group_callback_storage:
        edge_cb = group_edge_cb_t(edge_cb)
        _group_callback_storage[ref] = edge_cb
    else:
        edge_cb = _group_callback_storage[ref]

    _lib_lvgl.py_lv_group_set_edge_cb(group, edge_cb)


_lib_lvgl.py_lv_group_set_refocus_policy.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    policy=group_refocus_policy_t
)
_lib_lvgl.py_lv_group_set_refocus_policy.restype = None


def group_set_refocus_policy(
    group: group_t,
    policy: _type_group_refocus_policy_t
) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_set_refocus_policy.argtypes.group
    )

    policy = _convert_to_ctype(
        policy, 
        _lib_lvgl.py_lv_group_set_refocus_policy.argtypes.policy
    )

    _lib_lvgl.py_lv_group_set_refocus_policy(group, policy)


_lib_lvgl.py_lv_group_set_editing.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    edit=bool_t
)
_lib_lvgl.py_lv_group_set_editing.restype = None


def group_set_editing(
    group: group_t,
    edit: _type_bool_t
) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_set_editing.argtypes.group
    )

    edit = _convert_to_ctype(
        edit, 
        _lib_lvgl.py_lv_group_set_editing.argtypes.edit
    )

    _lib_lvgl.py_lv_group_set_editing(group, edit)


_lib_lvgl.py_lv_group_set_wrap.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t),
    en=bool_t
)
_lib_lvgl.py_lv_group_set_wrap.restype = None


def group_set_wrap(
    group: group_t,
    en: _type_bool_t
) -> None:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_set_wrap.argtypes.group
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_group_set_wrap.argtypes.en
    )

    _lib_lvgl.py_lv_group_set_wrap(group, en)


_lib_lvgl.py_lv_group_get_focused.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_get_focused.restype = _ctypes.POINTER(_obj_t)


def group_get_focused(group: group_t) -> _obj_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_get_focused.argtypes.group
    )

    res = _lib_lvgl.py_lv_group_get_focused(group)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_get_focused.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_get_focused.restype)
    )


_lib_lvgl.py_lv_group_get_focus_cb.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_get_focus_cb.restype = group_focus_cb_t


def group_get_focus_cb(group: group_t) -> group_focus_cb_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_get_focus_cb.argtypes.group
    )

    res = _lib_lvgl.py_lv_group_get_focus_cb(group)
    
    for key, value in _group_callback_storage.items():
        if value == res:
            return key()
        
    return None


_lib_lvgl.py_lv_group_get_edge_cb.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_get_edge_cb.restype = group_edge_cb_t


def group_get_edge_cb(group: group_t) -> group_edge_cb_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_get_edge_cb.argtypes.group
    )

    res = _lib_lvgl.py_lv_group_get_edge_cb(group)
    
    for key, value in _group_callback_storage.items():
        if value == res:
            return key()
        
    return None


_lib_lvgl.py_lv_group_get_editing.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_get_editing.restype = bool_t


def group_get_editing(group: group_t) -> bool_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_get_editing.argtypes.group
    )

    res = _lib_lvgl.py_lv_group_get_editing(group)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_get_editing.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_get_editing.restype)
    )


_lib_lvgl.py_lv_group_get_wrap.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_get_wrap.restype = bool_t


def group_get_wrap(group: group_t) -> bool_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_get_wrap.argtypes.group
    )

    res = _lib_lvgl.py_lv_group_get_wrap(group)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_get_wrap.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_get_wrap.restype)
    )


_lib_lvgl.py_lv_group_get_obj_count.argtypes = __CArgList(
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_group_get_obj_count.restype = uint32_t


def group_get_obj_count(group: group_t) -> uint32_t:
    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_group_get_obj_count.argtypes.group
    )

    res = _lib_lvgl.py_lv_group_get_obj_count(group)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_group_get_obj_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_group_get_obj_count.restype)
    )


_lib_lvgl.py_lv_indev_create.argtypes = __CArgList()
_lib_lvgl.py_lv_indev_create.restype = _ctypes.POINTER(indev_t)


def indev_create() -> indev_t:

    res = _lib_lvgl.py_lv_indev_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_create.restype)
    )


_lib_lvgl.py_lv_indev_delete.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_delete.restype = None


def indev_delete(indev: indev_t) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_delete.argtypes.indev
    )

    _lib_lvgl.py_lv_indev_delete(indev)


_lib_lvgl.py_lv_indev_get_next.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_next.restype = _ctypes.POINTER(indev_t)


def indev_get_next(indev: indev_t) -> indev_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_next.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_next(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_next.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_next.restype)
    )


_lib_lvgl.py__lv_indev_read.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    data=_ctypes.POINTER(indev_data_t)
)
_lib_lvgl.py__lv_indev_read.restype = None


def _indev_read(
    indev: indev_t,
    data: indev_data_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py__lv_indev_read.argtypes.indev
    )

    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py__lv_indev_read.argtypes.data
    )

    _lib_lvgl.py__lv_indev_read(indev, data)


_lib_lvgl.py_lv_indev_read_timer_cb.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py_lv_indev_read_timer_cb.restype = None


def indev_read_timer_cb(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py_lv_indev_read_timer_cb.argtypes.timer
    )

    _lib_lvgl.py_lv_indev_read_timer_cb(timer)


_lib_lvgl.py_lv_indev_enable.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    en=bool_t
)
_lib_lvgl.py_lv_indev_enable.restype = None


def indev_enable(
    indev: indev_t,
    en: _type_bool_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_enable.argtypes.indev
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_indev_enable.argtypes.en
    )

    _lib_lvgl.py_lv_indev_enable(indev, en)


_lib_lvgl.py_lv_indev_get_act.argtypes = __CArgList()
_lib_lvgl.py_lv_indev_get_act.restype = _ctypes.POINTER(indev_t)


def indev_get_act() -> indev_t:

    res = _lib_lvgl.py_lv_indev_get_act()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_act.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_act.restype)
    )


_lib_lvgl.py_lv_indev_set_type.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    indev_type=indev_type_t
)
_lib_lvgl.py_lv_indev_set_type.restype = None


def indev_set_type(
    indev: indev_t,
    indev_type: _type_indev_type_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_type.argtypes.indev
    )

    indev_type = _convert_to_ctype(
        indev_type, 
        _lib_lvgl.py_lv_indev_set_type.argtypes.indev_type
    )

    _lib_lvgl.py_lv_indev_set_type(indev, indev_type)


_lib_lvgl.py_lv_indev_set_read_cb.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    read_cb=indev_read_cb_t
)
_lib_lvgl.py_lv_indev_set_read_cb.restype = None


_indev_callback_storage = {}


def _indev_weakref_callback(ref):
    if ref in _indev_callback_storage:
        del _indev_callback_storage[ref]


def indev_set_read_cb(
    indev: indev_t,
    read_cb: indev_read_cb_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_read_cb.argtypes.indev
    )

    if inspect.ismethod(read_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': read_cb.__hash__}
        )
        ref = weakmethod(read_cb, _indev_weakref_callback)
    elif inspect.isfunction(read_cb):
        ref = weakref.ref(read_cb, _indev_weakref_callback)
    else:
        raise TypeError

    if ref not in _indev_callback_storage:
        read_cb = indev_read_cb_t(read_cb)
        _indev_callback_storage[ref] = read_cb
    else:
        read_cb = _indev_callback_storage[ref]

    _lib_lvgl.py_lv_indev_set_read_cb(indev, read_cb)


_lib_lvgl.py_lv_indev_set_user_data.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    user_data=void_t
)
_lib_lvgl.py_lv_indev_set_user_data.restype = None


def indev_set_user_data(
    indev: indev_t,
    user_data: void_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_user_data.argtypes.indev
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_indev_set_user_data.argtypes.user_data
    )

    _lib_lvgl.py_lv_indev_set_user_data(indev, user_data)


_lib_lvgl.py_lv_indev_set_driver_data.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    driver_data=void_t
)
_lib_lvgl.py_lv_indev_set_driver_data.restype = None


def indev_set_driver_data(
    indev: indev_t,
    driver_data: void_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_driver_data.argtypes.indev
    )

    driver_data = _convert_to_ctype(
        driver_data, 
        _lib_lvgl.py_lv_indev_set_driver_data.argtypes.driver_data
    )

    _lib_lvgl.py_lv_indev_set_driver_data(indev, driver_data)


_lib_lvgl.py_lv_indev_get_type.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_type.restype = indev_type_t


def indev_get_type(indev: indev_t) -> indev_type_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_type.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_type(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_type.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_type.restype)
    )


_lib_lvgl.py_lv_indev_get_state.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_state.restype = indev_state_t


def indev_get_state(indev: indev_t) -> indev_state_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_state.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_state(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_state.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_state.restype)
    )


_lib_lvgl.py_lv_indev_get_group.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_group.restype = _ctypes.POINTER(group_t)


def indev_get_group(indev: indev_t) -> group_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_group.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_group(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_group.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_group.restype)
    )


_lib_lvgl.py_lv_indev_get_disp.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_disp.restype = _ctypes.POINTER(_disp_t)


def indev_get_disp(indev: indev_t) -> _disp_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_disp.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_disp(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_disp.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_disp.restype)
    )


_lib_lvgl.py_lv_indev_set_disp.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    disp=_ctypes.POINTER(_disp_t)
)
_lib_lvgl.py_lv_indev_set_disp.restype = None


def indev_set_disp(
    indev: indev_t,
    disp: _disp_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_disp.argtypes.indev
    )

    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_indev_set_disp.argtypes.disp
    )

    _lib_lvgl.py_lv_indev_set_disp(indev, disp)


_lib_lvgl.py_lv_indev_get_user_data.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_user_data.restype = void_t


def indev_get_user_data(indev: indev_t) -> void_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_user_data.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_user_data(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_user_data.restype)
    )


_lib_lvgl.py_lv_indev_get_driver_data.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_driver_data.restype = void_t


def indev_get_driver_data(indev: indev_t) -> void_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_driver_data.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_driver_data(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_driver_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_driver_data.restype)
    )


_lib_lvgl.py_lv_indev_reset.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_indev_reset.restype = None


def indev_reset(indev: indev_t, obj: _obj_t) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_reset.argtypes.indev
    )

    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_indev_reset.argtypes.obj
    )

    _lib_lvgl.py_lv_indev_reset(indev, obj)


_lib_lvgl.py_lv_indev_reset_long_press.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_reset_long_press.restype = None


def indev_reset_long_press(indev: indev_t) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_reset_long_press.argtypes.indev
    )

    _lib_lvgl.py_lv_indev_reset_long_press(indev)


_lib_lvgl.py_lv_indev_set_cursor.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    cur_obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_indev_set_cursor.restype = None


def indev_set_cursor(
    indev: indev_t,
    cur_obj: _obj_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_cursor.argtypes.indev
    )

    cur_obj = _convert_to_ctype(
        cur_obj, 
        _lib_lvgl.py_lv_indev_set_cursor.argtypes.cur_obj
    )

    _lib_lvgl.py_lv_indev_set_cursor(indev, cur_obj)


_lib_lvgl.py_lv_indev_set_group.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    group=_ctypes.POINTER(group_t)
)
_lib_lvgl.py_lv_indev_set_group.restype = None


def indev_set_group(
    indev: indev_t,
    group: group_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_group.argtypes.indev
    )

    group = _convert_to_ctype(
        group, 
        _lib_lvgl.py_lv_indev_set_group.argtypes.group
    )

    _lib_lvgl.py_lv_indev_set_group(indev, group)


_lib_lvgl.py_lv_indev_set_button_points.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    points=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_indev_set_button_points.restype = None


def indev_set_button_points(
    indev: indev_t,
    points: List[point_t]
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_set_button_points.argtypes.indev
    )

    points = _convert_to_ctype(
        points, 
        _lib_lvgl.py_lv_indev_set_button_points.argtypes.points
    )

    _lib_lvgl.py_lv_indev_set_button_points(indev, points)


_lib_lvgl.py_lv_indev_get_point.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    point=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_indev_get_point.restype = None


def indev_get_point(
    indev: indev_t,
    point: point_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_point.argtypes.indev
    )

    point = _convert_to_ctype(
        point, 
        _lib_lvgl.py_lv_indev_get_point.argtypes.point
    )

    _lib_lvgl.py_lv_indev_get_point(indev, point)


_lib_lvgl.py_lv_indev_get_gesture_dir.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_gesture_dir.restype = dir_t


def indev_get_gesture_dir(indev: indev_t) -> dir_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_gesture_dir.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_gesture_dir(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_gesture_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_gesture_dir.restype)
    )


_lib_lvgl.py_lv_indev_get_key.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_key.restype = uint32_t


def indev_get_key(indev: indev_t) -> uint32_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_key.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_key(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_key.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_key.restype)
    )


_lib_lvgl.py_lv_indev_get_scroll_dir.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_scroll_dir.restype = dir_t


def indev_get_scroll_dir(indev: indev_t) -> dir_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_scroll_dir.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_scroll_dir(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_scroll_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_scroll_dir.restype)
    )


_lib_lvgl.py_lv_indev_get_scroll_obj.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_scroll_obj.restype = _ctypes.POINTER(_obj_t)


def indev_get_scroll_obj(indev: indev_t) -> _obj_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_scroll_obj.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_scroll_obj(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_scroll_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_scroll_obj.restype)
    )


_lib_lvgl.py_lv_indev_get_vect.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t),
    point=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_indev_get_vect.restype = None


def indev_get_vect(
    indev: indev_t,
    point: point_t
) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_vect.argtypes.indev
    )

    point = _convert_to_ctype(
        point, 
        _lib_lvgl.py_lv_indev_get_vect.argtypes.point
    )

    _lib_lvgl.py_lv_indev_get_vect(indev, point)


_lib_lvgl.py_lv_indev_wait_release.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_wait_release.restype = None


def indev_wait_release(indev: indev_t) -> None:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_wait_release.argtypes.indev
    )

    _lib_lvgl.py_lv_indev_wait_release(indev)


_lib_lvgl.py_lv_indev_get_obj_act.argtypes = __CArgList()
_lib_lvgl.py_lv_indev_get_obj_act.restype = _ctypes.POINTER(_obj_t)


def indev_get_obj_act() -> _obj_t:

    res = _lib_lvgl.py_lv_indev_get_obj_act()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_obj_act.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_obj_act.restype)
    )


_lib_lvgl.py_lv_indev_get_read_timer.argtypes = __CArgList(
    indev=_ctypes.POINTER(indev_t)
)
_lib_lvgl.py_lv_indev_get_read_timer.restype = _ctypes.POINTER(timer_t)


def indev_get_read_timer(indev: indev_t) -> timer_t:
    indev = _convert_to_ctype(
        indev, 
        _lib_lvgl.py_lv_indev_get_read_timer.argtypes.indev
    )

    res = _lib_lvgl.py_lv_indev_get_read_timer(indev)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_get_read_timer.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_get_read_timer.restype)
    )


_lib_lvgl.py_lv_indev_search_obj.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    point=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_indev_search_obj.restype = _ctypes.POINTER(_obj_t)


def indev_search_obj(
    obj: _obj_t,
    point: point_t
) -> _obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_indev_search_obj.argtypes.obj
    )

    point = _convert_to_ctype(
        point, 
        _lib_lvgl.py_lv_indev_search_obj.argtypes.point
    )

    res = _lib_lvgl.py_lv_indev_search_obj(obj, point)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_indev_search_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_indev_search_obj.restype)
    )


_lib_lvgl.py_lv_obj_send_event.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    event_code=event_code_t,
    param=void_t
)
_lib_lvgl.py_lv_obj_send_event.restype = res_t


def obj_send_event(
    obj: _obj_t,
    event_code: _type_event_code_t,
    param: void_t
) -> res_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_send_event.argtypes.obj
    )

    event_code = _convert_to_ctype(
        event_code, 
        _lib_lvgl.py_lv_obj_send_event.argtypes.event_code
    )

    param = _convert_to_ctype(
        param, 
        _lib_lvgl.py_lv_obj_send_event.argtypes.param
    )

    res = _lib_lvgl.py_lv_obj_send_event(obj, event_code, param)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_send_event.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_send_event.restype)
    )


_lib_lvgl.py_lv_obj_event_base.argtypes = __CArgList(
    class_p=_ctypes.POINTER(_obj_class_t),
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_obj_event_base.restype = res_t


def obj_event_base(
    class_p: _obj_class_t,
    e: event_t
) -> res_t:
    class_p = _convert_to_ctype(
        class_p, 
        _lib_lvgl.py_lv_obj_event_base.argtypes.class_p
    )

    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_obj_event_base.argtypes.e
    )

    res = _lib_lvgl.py_lv_obj_event_base(class_p, e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_event_base.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_event_base.restype)
    )


_lib_lvgl.py_lv_event_get_current_target_obj.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_current_target_obj.restype = _ctypes.POINTER(_obj_t)


def event_get_current_target_obj(e: event_t) -> _obj_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_current_target_obj.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_current_target_obj(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_current_target_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_current_target_obj.restype)
    )


_lib_lvgl.py_lv_event_get_target_obj.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_target_obj.restype = _ctypes.POINTER(_obj_t)


def event_get_target_obj(e: event_t) -> _obj_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_target_obj.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_target_obj(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_target_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_target_obj.restype)
    )


_lib_lvgl.py_lv_obj_add_event.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    event_cb=event_cb_t,
    filter=event_code_t,
    user_data=void_t
)
_lib_lvgl.py_lv_obj_add_event.restype = None


def obj_add_event(
    obj: _obj_t,
    event_cb: event_cb_t,
    filter: _type_event_code_t,
    user_data: void_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_add_event.argtypes.obj
    )

    if inspect.ismethod(event_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': event_cb.__hash__}
        )
        ref = weakmethod(event_cb, _obj_weakref_callback)
    elif inspect.isfunction(event_cb):
        ref = weakref.ref(event_cb, _obj_weakref_callback)
    else:
        raise TypeError

    if ref not in _obj_callback_storage:
        event_cb = event_cb_t(event_cb)
        _obj_callback_storage[ref] = event_cb
    else:
        event_cb = _obj_callback_storage[ref]

    filter = _convert_to_ctype(
        filter, 
        _lib_lvgl.py_lv_obj_add_event.argtypes.filter
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_obj_add_event.argtypes.user_data
    )

    _lib_lvgl.py_lv_obj_add_event(obj, event_cb, filter, user_data)


_lib_lvgl.py_lv_obj_get_event_count.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_event_count.restype = uint32_t


def obj_get_event_count(obj: _obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_event_count.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_event_count(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_event_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_event_count.restype)
    )


_lib_lvgl.py_lv_obj_get_event_dsc.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    index=uint32_t
)
_lib_lvgl.py_lv_obj_get_event_dsc.restype = _ctypes.POINTER(event_dsc_t)


def obj_get_event_dsc(
    obj: _obj_t,
    index: _type_uint32_t
) -> event_dsc_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_event_dsc.argtypes.obj
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_obj_get_event_dsc.argtypes.index
    )

    res = _lib_lvgl.py_lv_obj_get_event_dsc(obj, index)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_event_dsc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_event_dsc.restype)
    )


_lib_lvgl.py_lv_obj_remove_event.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t),
    index=uint32_t
)
_lib_lvgl.py_lv_obj_remove_event.restype = bool_t


def obj_remove_event(
    obj: _obj_t,
    index: _type_uint32_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_remove_event.argtypes.obj
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_obj_remove_event.argtypes.index
    )

    res = _lib_lvgl.py_lv_obj_remove_event(obj, index)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_remove_event.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_remove_event.restype)
    )


_lib_lvgl.py_lv_event_get_indev.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_indev.restype = _ctypes.POINTER(indev_t)


def event_get_indev(e: event_t) -> indev_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_indev.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_indev(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_indev.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_indev.restype)
    )


_lib_lvgl.py_lv_event_get_layer.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_layer.restype = _ctypes.POINTER(layer_t)


def event_get_layer(e: event_t) -> layer_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_layer.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_layer(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_layer.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_layer.restype)
    )


_lib_lvgl.py_lv_event_get_old_size.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_old_size.restype = _ctypes.POINTER(area_t)


def event_get_old_size(e: event_t) -> area_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_old_size.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_old_size(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_old_size.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_old_size.restype)
    )


_lib_lvgl.py_lv_event_get_key.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_key.restype = uint32_t


def event_get_key(e: event_t) -> uint32_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_key.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_key(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_key.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_key.restype)
    )


_lib_lvgl.py_lv_event_get_scroll_anim.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_scroll_anim.restype = _ctypes.POINTER(anim_t)


def event_get_scroll_anim(e: event_t) -> anim_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_scroll_anim.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_scroll_anim(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_scroll_anim.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_scroll_anim.restype)
    )


_lib_lvgl.py_lv_event_set_ext_draw_size.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t),
    size=coord_t
)
_lib_lvgl.py_lv_event_set_ext_draw_size.restype = None


def event_set_ext_draw_size(
    e: event_t,
    size: coord_t
) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_set_ext_draw_size.argtypes.e
    )

    size = _convert_to_ctype(
        size, 
        _lib_lvgl.py_lv_event_set_ext_draw_size.argtypes.size
    )

    _lib_lvgl.py_lv_event_set_ext_draw_size(e, size)


_lib_lvgl.py_lv_event_get_self_size_info.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_self_size_info.restype = _ctypes.POINTER(point_t)


def event_get_self_size_info(e: event_t) -> point_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_self_size_info.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_self_size_info(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_self_size_info.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_self_size_info.restype)
    )


_lib_lvgl.py_lv_event_get_hit_test_info.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_hit_test_info.restype = _ctypes.POINTER(hit_test_info_t)


def event_get_hit_test_info(e: event_t) -> hit_test_info_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_hit_test_info.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_hit_test_info(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_hit_test_info.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_hit_test_info.restype)
    )


_lib_lvgl.py_lv_event_get_cover_area.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_cover_area.restype = _ctypes.POINTER(area_t)


def event_get_cover_area(e: event_t) -> area_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_cover_area.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_cover_area(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_cover_area.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_cover_area.restype)
    )


_lib_lvgl.py_lv_event_set_cover_res.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t),
    res=cover_res_t
)
_lib_lvgl.py_lv_event_set_cover_res.restype = None


def event_set_cover_res(
    e: event_t,
    res: _type_cover_res_t
) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_set_cover_res.argtypes.e
    )

    res = _convert_to_ctype(
        res, 
        _lib_lvgl.py_lv_event_set_cover_res.argtypes.res
    )

    _lib_lvgl.py_lv_event_set_cover_res(e, res)


_lib_lvgl.py_lv_event_get_draw_task.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_draw_task.restype = _ctypes.POINTER(draw_task_t)


def event_get_draw_task(e: event_t) -> draw_task_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_draw_task.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_draw_task(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_draw_task.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_draw_task.restype)
    )


_lib_lvgl.py_lv_obj_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_create.restype = _ctypes.POINTER(obj_t)


def obj_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_obj_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_obj_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_create.restype)
    )


_lib_lvgl.py_lv_obj_add_flag.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    f=obj_flag_t
)
_lib_lvgl.py_lv_obj_add_flag.restype = None


def obj_add_flag(obj: obj_t, f: obj_flag_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_add_flag.argtypes.obj
    )

    f = _convert_to_ctype(
        f, 
        _lib_lvgl.py_lv_obj_add_flag.argtypes.f
    )

    _lib_lvgl.py_lv_obj_add_flag(obj, f)


_lib_lvgl.py_lv_obj_clear_flag.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    f=obj_flag_t
)
_lib_lvgl.py_lv_obj_clear_flag.restype = None


def obj_clear_flag(obj: obj_t, f: obj_flag_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_clear_flag.argtypes.obj
    )

    f = _convert_to_ctype(
        f, 
        _lib_lvgl.py_lv_obj_clear_flag.argtypes.f
    )

    _lib_lvgl.py_lv_obj_clear_flag(obj, f)


_lib_lvgl.py_lv_obj_add_state.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    state=state_t
)
_lib_lvgl.py_lv_obj_add_state.restype = None


def obj_add_state(obj: obj_t, state: state_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_add_state.argtypes.obj
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_obj_add_state.argtypes.state
    )

    _lib_lvgl.py_lv_obj_add_state(obj, state)


_lib_lvgl.py_lv_obj_clear_state.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    state=state_t
)
_lib_lvgl.py_lv_obj_clear_state.restype = None


def obj_clear_state(
    obj: obj_t,
    state: state_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_clear_state.argtypes.obj
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_obj_clear_state.argtypes.state
    )

    _lib_lvgl.py_lv_obj_clear_state(obj, state)


_lib_lvgl.py_lv_obj_set_user_data.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    user_data=void_t
)
_lib_lvgl.py_lv_obj_set_user_data.restype = None


def obj_set_user_data(
    obj: obj_t,
    user_data: void_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_user_data.argtypes.obj
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_obj_set_user_data.argtypes.user_data
    )

    _lib_lvgl.py_lv_obj_set_user_data(obj, user_data)


_lib_lvgl.py_lv_obj_has_flag.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    f=obj_flag_t
)
_lib_lvgl.py_lv_obj_has_flag.restype = bool_t


def obj_has_flag(obj: obj_t, f: obj_flag_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_has_flag.argtypes.obj
    )

    f = _convert_to_ctype(
        f, 
        _lib_lvgl.py_lv_obj_has_flag.argtypes.f
    )

    res = _lib_lvgl.py_lv_obj_has_flag(obj, f)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_has_flag.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_has_flag.restype)
    )


_lib_lvgl.py_lv_obj_has_flag_any.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    f=obj_flag_t
)
_lib_lvgl.py_lv_obj_has_flag_any.restype = bool_t


def obj_has_flag_any(
    obj: obj_t,
    f: obj_flag_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_has_flag_any.argtypes.obj
    )

    f = _convert_to_ctype(
        f, 
        _lib_lvgl.py_lv_obj_has_flag_any.argtypes.f
    )

    res = _lib_lvgl.py_lv_obj_has_flag_any(obj, f)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_has_flag_any.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_has_flag_any.restype)
    )


_lib_lvgl.py_lv_obj_get_state.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_get_state.restype = state_t


def obj_get_state(obj: obj_t) -> state_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_state.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_state(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_state.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_state.restype)
    )


_lib_lvgl.py_lv_obj_has_state.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    state=state_t
)
_lib_lvgl.py_lv_obj_has_state.restype = bool_t


def obj_has_state(obj: obj_t, state: state_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_has_state.argtypes.obj
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_obj_has_state.argtypes.state
    )

    res = _lib_lvgl.py_lv_obj_has_state(obj, state)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_has_state.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_has_state.restype)
    )


_lib_lvgl.py_lv_obj_get_group.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_get_group.restype = _ctypes.POINTER(group_t)


def obj_get_group(obj: obj_t) -> group_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_group.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_group(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_group.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_group.restype)
    )


_lib_lvgl.py_lv_obj_get_user_data.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_get_user_data.restype = void_t


def obj_get_user_data(obj: obj_t) -> void_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_user_data.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_user_data(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_user_data.restype)
    )


_lib_lvgl.py_lv_obj_allocate_spec_attr.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_allocate_spec_attr.restype = None


def obj_allocate_spec_attr(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_allocate_spec_attr.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_allocate_spec_attr(obj)


_lib_lvgl.py_lv_obj_check_type.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    class_p=_ctypes.POINTER(obj_class_t)
)
_lib_lvgl.py_lv_obj_check_type.restype = bool_t


def obj_check_type(
    obj: obj_t,
    class_p: obj_class_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_check_type.argtypes.obj
    )

    class_p = _convert_to_ctype(
        class_p, 
        _lib_lvgl.py_lv_obj_check_type.argtypes.class_p
    )

    res = _lib_lvgl.py_lv_obj_check_type(obj, class_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_check_type.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_check_type.restype)
    )


_lib_lvgl.py_lv_obj_has_class.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    class_p=_ctypes.POINTER(obj_class_t)
)
_lib_lvgl.py_lv_obj_has_class.restype = bool_t


def obj_has_class(
    obj: obj_t,
    class_p: obj_class_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_has_class.argtypes.obj
    )

    class_p = _convert_to_ctype(
        class_p, 
        _lib_lvgl.py_lv_obj_has_class.argtypes.class_p
    )

    res = _lib_lvgl.py_lv_obj_has_class(obj, class_p)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_has_class.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_has_class.restype)
    )


_lib_lvgl.py_lv_obj_get_class.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_get_class.restype = _ctypes.POINTER(obj_class_t)


def obj_get_class(obj: obj_t) -> obj_class_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_class.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_class(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_class.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_class.restype)
    )


_lib_lvgl.py_lv_obj_is_valid.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_is_valid.restype = bool_t


def obj_is_valid(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_is_valid.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_is_valid(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_is_valid.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_is_valid.restype)
    )


_lib_lvgl.py__lv_refr_init.argtypes = __CArgList()
_lib_lvgl.py__lv_refr_init.restype = None


def _refr_init() -> None:

    _lib_lvgl.py__lv_refr_init()


_lib_lvgl.py_lv_refr_now.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_refr_now.restype = None


def refr_now(disp: disp_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_refr_now.argtypes.disp
    )

    _lib_lvgl.py_lv_refr_now(disp)


_lib_lvgl.py_lv_obj_redraw.argtypes = __CArgList(
    layer=_ctypes.POINTER(layer_t),
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_redraw.restype = None


def obj_redraw(layer: layer_t, obj: obj_t) -> None:
    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_obj_redraw.argtypes.layer
    )

    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_redraw.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_redraw(layer, obj)


_lib_lvgl.py__lv_inv_area.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    area_p=_ctypes.POINTER(area_t)
)
_lib_lvgl.py__lv_inv_area.restype = None


def _inv_area(disp: disp_t, area_p: area_t) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py__lv_inv_area.argtypes.disp
    )

    area_p = _convert_to_ctype(
        area_p, 
        _lib_lvgl.py__lv_inv_area.argtypes.area_p
    )

    _lib_lvgl.py__lv_inv_area(disp, area_p)


_lib_lvgl.py__lv_refr_get_disp_refreshing.argtypes = __CArgList()
_lib_lvgl.py__lv_refr_get_disp_refreshing.restype = _ctypes.POINTER(disp_t)


def _refr_get_disp_refreshing() -> disp_t:

    res = _lib_lvgl.py__lv_refr_get_disp_refreshing()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_refr_get_disp_refreshing.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_refr_get_disp_refreshing.restype)
    )


_lib_lvgl.py__lv_disp_refr_timer.argtypes = __CArgList(
    timer=_ctypes.POINTER(timer_t)
)
_lib_lvgl.py__lv_disp_refr_timer.restype = None


def _disp_refr_timer(timer: timer_t) -> None:
    timer = _convert_to_ctype(
        timer, 
        _lib_lvgl.py__lv_disp_refr_timer.argtypes.timer
    )

    _lib_lvgl.py__lv_disp_refr_timer(timer)


_lib_lvgl.py_lv_font_load.argtypes = __CArgList(
    fontName=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_font_load.restype = _ctypes.POINTER(font_t)


def font_load(fontName: _type_char_t) -> font_t:
    fontName = _convert_to_ctype(
        fontName, 
        _lib_lvgl.py_lv_font_load.argtypes.fontName
    )

    res = _lib_lvgl.py_lv_font_load(fontName)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_load.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_load.restype)
    )


_lib_lvgl.py_lv_font_free.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t)
)
_lib_lvgl.py_lv_font_free.restype = None


def font_free(font: font_t) -> None:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_free.argtypes.font
    )

    _lib_lvgl.py_lv_font_free(font)


_lib_lvgl.py_lv_font_get_bitmap_fmt_txt.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t),
    unicode_letter=uint32_t,
    bitmap_out=_ctypes.POINTER(uint8_t)
)
_lib_lvgl.py_lv_font_get_bitmap_fmt_txt.restype = _ctypes.POINTER(uint8_t)


def font_get_bitmap_fmt_txt(
    font: font_t,
    unicode_letter: _type_uint32_t,
    bitmap_out: _type_uint8_t
) -> uint8_t:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_get_bitmap_fmt_txt.argtypes.font
    )

    unicode_letter = _convert_to_ctype(
        unicode_letter, 
        _lib_lvgl.py_lv_font_get_bitmap_fmt_txt.argtypes.unicode_letter
    )

    bitmap_out = _convert_to_ctype(
        bitmap_out, 
        _lib_lvgl.py_lv_font_get_bitmap_fmt_txt.argtypes.bitmap_out
    )

    res = _lib_lvgl.py_lv_font_get_bitmap_fmt_txt(font, unicode_letter, bitmap_out)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_get_bitmap_fmt_txt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_get_bitmap_fmt_txt.restype)
    )


_lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t),
    dsc_out=_ctypes.POINTER(font_glyph_dsc_t),
    unicode_letter=uint32_t,
    unicode_letter_next=uint32_t
)
_lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.restype = bool_t


def font_get_glyph_dsc_fmt_txt(
    font: font_t,
    dsc_out: font_glyph_dsc_t,
    unicode_letter: _type_uint32_t,
    unicode_letter_next: _type_uint32_t
) -> bool_t:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.argtypes.font
    )

    dsc_out = _convert_to_ctype(
        dsc_out, 
        _lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.argtypes.dsc_out
    )

    unicode_letter = _convert_to_ctype(
        unicode_letter, 
        _lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.argtypes.unicode_letter
    )

    unicode_letter_next = _convert_to_ctype(
        unicode_letter_next, 
        _lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.argtypes.unicode_letter_next
    )

    res = _lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt(font, dsc_out, unicode_letter, unicode_letter_next)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_font_get_glyph_dsc_fmt_txt.restype)
    )


_lib_lvgl.py_lv_img_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_create.restype = _ctypes.POINTER(obj_t)


def img_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_img_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_img_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_create.restype)
    )


_lib_lvgl.py_lv_img_set_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    src=void_t
)
_lib_lvgl.py_lv_img_set_src.restype = None


def img_set_src(obj: obj_t, src: void_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_src.argtypes.obj
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_img_set_src.argtypes.src
    )

    _lib_lvgl.py_lv_img_set_src(obj, src)


_lib_lvgl.py_lv_img_set_offset_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    x=coord_t
)
_lib_lvgl.py_lv_img_set_offset_x.restype = None


def img_set_offset_x(obj: obj_t, x: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_offset_x.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_img_set_offset_x.argtypes.x
    )

    _lib_lvgl.py_lv_img_set_offset_x(obj, x)


_lib_lvgl.py_lv_img_set_offset_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    y=coord_t
)
_lib_lvgl.py_lv_img_set_offset_y.restype = None


def img_set_offset_y(obj: obj_t, y: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_offset_y.argtypes.obj
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_img_set_offset_y.argtypes.y
    )

    _lib_lvgl.py_lv_img_set_offset_y(obj, y)


_lib_lvgl.py_lv_img_set_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    angle=int16_t
)
_lib_lvgl.py_lv_img_set_angle.restype = None


def img_set_angle(
    obj: obj_t,
    angle: _type_int16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_angle.argtypes.obj
    )

    angle = _convert_to_ctype(
        angle, 
        _lib_lvgl.py_lv_img_set_angle.argtypes.angle
    )

    _lib_lvgl.py_lv_img_set_angle(obj, angle)


_lib_lvgl.py_lv_img_set_pivot.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py_lv_img_set_pivot.restype = None


def img_set_pivot(
    obj: obj_t,
    x: coord_t,
    y: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_pivot.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_img_set_pivot.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_img_set_pivot.argtypes.y
    )

    _lib_lvgl.py_lv_img_set_pivot(obj, x, y)


_lib_lvgl.py_lv_img_set_zoom.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    zoom=uint16_t
)
_lib_lvgl.py_lv_img_set_zoom.restype = None


def img_set_zoom(
    obj: obj_t,
    zoom: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_zoom.argtypes.obj
    )

    zoom = _convert_to_ctype(
        zoom, 
        _lib_lvgl.py_lv_img_set_zoom.argtypes.zoom
    )

    _lib_lvgl.py_lv_img_set_zoom(obj, zoom)


_lib_lvgl.py_lv_img_set_antialias.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    antialias=bool_t
)
_lib_lvgl.py_lv_img_set_antialias.restype = None


def img_set_antialias(
    obj: obj_t,
    antialias: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_antialias.argtypes.obj
    )

    antialias = _convert_to_ctype(
        antialias, 
        _lib_lvgl.py_lv_img_set_antialias.argtypes.antialias
    )

    _lib_lvgl.py_lv_img_set_antialias(obj, antialias)


_lib_lvgl.py_lv_img_set_size_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode=img_size_mode_t
)
_lib_lvgl.py_lv_img_set_size_mode.restype = None


def img_set_size_mode(
    obj: obj_t,
    mode: img_size_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_set_size_mode.argtypes.obj
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_img_set_size_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_img_set_size_mode(obj, mode)


_lib_lvgl.py_lv_img_get_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_src.restype = void_t


def img_get_src(obj: obj_t) -> void_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_src.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_src(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_src.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_src.restype)
    )


_lib_lvgl.py_lv_img_get_offset_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_offset_x.restype = coord_t


def img_get_offset_x(obj: obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_offset_x.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_offset_x(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_offset_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_offset_x.restype)
    )


_lib_lvgl.py_lv_img_get_offset_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_offset_y.restype = coord_t


def img_get_offset_y(obj: obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_offset_y.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_offset_y(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_offset_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_offset_y.restype)
    )


_lib_lvgl.py_lv_img_get_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_angle.restype = coord_t


def img_get_angle(obj: obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_angle.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_angle(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_angle.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_angle.restype)
    )


_lib_lvgl.py_lv_img_get_pivot.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pivot=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_img_get_pivot.restype = None


def img_get_pivot(obj: obj_t, pivot: point_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_pivot.argtypes.obj
    )

    pivot = _convert_to_ctype(
        pivot, 
        _lib_lvgl.py_lv_img_get_pivot.argtypes.pivot
    )

    _lib_lvgl.py_lv_img_get_pivot(obj, pivot)


_lib_lvgl.py_lv_img_get_zoom.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_zoom.restype = coord_t


def img_get_zoom(obj: obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_zoom.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_zoom(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_zoom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_zoom.restype)
    )


_lib_lvgl.py_lv_img_get_antialias.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_antialias.restype = bool_t


def img_get_antialias(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_antialias.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_antialias(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_antialias.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_antialias.restype)
    )


_lib_lvgl.py_lv_img_get_size_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_img_get_size_mode.restype = img_size_mode_t


def img_get_size_mode(obj: obj_t) -> img_size_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_img_get_size_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_img_get_size_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_img_get_size_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_img_get_size_mode.restype)
    )


_lib_lvgl.py_lv_animimg_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_animimg_create.restype = _ctypes.POINTER(obj_t)


def animimg_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_animimg_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_animimg_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_animimg_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_animimg_create.restype)
    )


_lib_lvgl.py_lv_animimg_set_src.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t),
    dsc=_ctypes.POINTER(void_t),
    num=uint8_t
)
_lib_lvgl.py_lv_animimg_set_src.restype = None


def animimg_set_src(
    img: obj_t,
    dsc: List[void_t],
    num: _type_uint8_t
) -> None:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_set_src.argtypes.img
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_animimg_set_src.argtypes.dsc
    )

    num = _convert_to_ctype(
        num, 
        _lib_lvgl.py_lv_animimg_set_src.argtypes.num
    )

    _lib_lvgl.py_lv_animimg_set_src(img, dsc, num)


_lib_lvgl.py_lv_animimg_start.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_animimg_start.restype = None


def animimg_start(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_animimg_start.argtypes.obj
    )

    _lib_lvgl.py_lv_animimg_start(obj)


_lib_lvgl.py_lv_animimg_set_duration.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t),
    duration=uint32_t
)
_lib_lvgl.py_lv_animimg_set_duration.restype = None


def animimg_set_duration(
    img: obj_t,
    duration: _type_uint32_t
) -> None:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_set_duration.argtypes.img
    )

    duration = _convert_to_ctype(
        duration, 
        _lib_lvgl.py_lv_animimg_set_duration.argtypes.duration
    )

    _lib_lvgl.py_lv_animimg_set_duration(img, duration)


_lib_lvgl.py_lv_animimg_set_repeat_count.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t),
    count=uint16_t
)
_lib_lvgl.py_lv_animimg_set_repeat_count.restype = None


def animimg_set_repeat_count(
    img: obj_t,
    count: _type_uint16_t
) -> None:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_set_repeat_count.argtypes.img
    )

    count = _convert_to_ctype(
        count, 
        _lib_lvgl.py_lv_animimg_set_repeat_count.argtypes.count
    )

    _lib_lvgl.py_lv_animimg_set_repeat_count(img, count)


_lib_lvgl.py_lv_animimg_get_src.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_animimg_get_src.restype = _ctypes.POINTER(void_t)


def animimg_get_src(img: obj_t) -> void_t:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_get_src.argtypes.img
    )

    res = _lib_lvgl.py_lv_animimg_get_src(img)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_animimg_get_src.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_animimg_get_src.restype)
    )


_lib_lvgl.py_lv_animimg_get_src_count.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_animimg_get_src_count.restype = uint8_t


def animimg_get_src_count(img: obj_t) -> uint8_t:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_get_src_count.argtypes.img
    )

    res = _lib_lvgl.py_lv_animimg_get_src_count(img)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_animimg_get_src_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_animimg_get_src_count.restype)
    )


_lib_lvgl.py_lv_animimg_get_duration.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_animimg_get_duration.restype = uint32_t


def animimg_get_duration(img: obj_t) -> uint32_t:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_get_duration.argtypes.img
    )

    res = _lib_lvgl.py_lv_animimg_get_duration(img)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_animimg_get_duration.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_animimg_get_duration.restype)
    )


_lib_lvgl.py_lv_animimg_get_repeat_count.argtypes = __CArgList(
    img=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_animimg_get_repeat_count.restype = uint16_t


def animimg_get_repeat_count(img: obj_t) -> uint16_t:
    img = _convert_to_ctype(
        img, 
        _lib_lvgl.py_lv_animimg_get_repeat_count.argtypes.img
    )

    res = _lib_lvgl.py_lv_animimg_get_repeat_count(img)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_animimg_get_repeat_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_animimg_get_repeat_count.restype)
    )


_lib_lvgl.py_lv_arc_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_create.restype = _ctypes.POINTER(obj_t)


def arc_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_arc_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_arc_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_create.restype)
    )


_lib_lvgl.py_lv_arc_set_start_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    start=uint16_t
)
_lib_lvgl.py_lv_arc_set_start_angle.restype = None


def arc_set_start_angle(
    obj: obj_t,
    start: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_start_angle.argtypes.obj
    )

    start = _convert_to_ctype(
        start, 
        _lib_lvgl.py_lv_arc_set_start_angle.argtypes.start
    )

    _lib_lvgl.py_lv_arc_set_start_angle(obj, start)


_lib_lvgl.py_lv_arc_set_end_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    end=uint16_t
)
_lib_lvgl.py_lv_arc_set_end_angle.restype = None


def arc_set_end_angle(
    obj: obj_t,
    end: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_end_angle.argtypes.obj
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_arc_set_end_angle.argtypes.end
    )

    _lib_lvgl.py_lv_arc_set_end_angle(obj, end)


_lib_lvgl.py_lv_arc_set_angles.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    start=uint16_t,
    end=uint16_t
)
_lib_lvgl.py_lv_arc_set_angles.restype = None


def arc_set_angles(
    obj: obj_t,
    start: _type_uint16_t,
    end: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_angles.argtypes.obj
    )

    start = _convert_to_ctype(
        start, 
        _lib_lvgl.py_lv_arc_set_angles.argtypes.start
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_arc_set_angles.argtypes.end
    )

    _lib_lvgl.py_lv_arc_set_angles(obj, start, end)


_lib_lvgl.py_lv_arc_set_bg_start_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    start=uint16_t
)
_lib_lvgl.py_lv_arc_set_bg_start_angle.restype = None


def arc_set_bg_start_angle(
    obj: obj_t,
    start: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_bg_start_angle.argtypes.obj
    )

    start = _convert_to_ctype(
        start, 
        _lib_lvgl.py_lv_arc_set_bg_start_angle.argtypes.start
    )

    _lib_lvgl.py_lv_arc_set_bg_start_angle(obj, start)


_lib_lvgl.py_lv_arc_set_bg_end_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    end=uint16_t
)
_lib_lvgl.py_lv_arc_set_bg_end_angle.restype = None


def arc_set_bg_end_angle(
    obj: obj_t,
    end: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_bg_end_angle.argtypes.obj
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_arc_set_bg_end_angle.argtypes.end
    )

    _lib_lvgl.py_lv_arc_set_bg_end_angle(obj, end)


_lib_lvgl.py_lv_arc_set_bg_angles.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    start=uint16_t,
    end=uint16_t
)
_lib_lvgl.py_lv_arc_set_bg_angles.restype = None


def arc_set_bg_angles(
    obj: obj_t,
    start: _type_uint16_t,
    end: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_bg_angles.argtypes.obj
    )

    start = _convert_to_ctype(
        start, 
        _lib_lvgl.py_lv_arc_set_bg_angles.argtypes.start
    )

    end = _convert_to_ctype(
        end, 
        _lib_lvgl.py_lv_arc_set_bg_angles.argtypes.end
    )

    _lib_lvgl.py_lv_arc_set_bg_angles(obj, start, end)


_lib_lvgl.py_lv_arc_set_rotation.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    rotation=uint16_t
)
_lib_lvgl.py_lv_arc_set_rotation.restype = None


def arc_set_rotation(
    obj: obj_t,
    rotation: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_rotation.argtypes.obj
    )

    rotation = _convert_to_ctype(
        rotation, 
        _lib_lvgl.py_lv_arc_set_rotation.argtypes.rotation
    )

    _lib_lvgl.py_lv_arc_set_rotation(obj, rotation)


_lib_lvgl.py_lv_arc_set_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    type=arc_mode_t
)
_lib_lvgl.py_lv_arc_set_mode.restype = None


def arc_set_mode(obj: obj_t, type: arc_mode_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_mode.argtypes.obj
    )

    type = _convert_to_ctype(
        type, 
        _lib_lvgl.py_lv_arc_set_mode.argtypes.type
    )

    _lib_lvgl.py_lv_arc_set_mode(obj, type)


_lib_lvgl.py_lv_arc_set_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=int16_t
)
_lib_lvgl.py_lv_arc_set_value.restype = None


def arc_set_value(
    obj: obj_t,
    value: _type_int16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_value.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_arc_set_value.argtypes.value
    )

    _lib_lvgl.py_lv_arc_set_value(obj, value)


_lib_lvgl.py_lv_arc_set_range.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    min=int16_t,
    max=int16_t
)
_lib_lvgl.py_lv_arc_set_range.restype = None


def arc_set_range(
    obj: obj_t,
    min: _type_int16_t,
    max: _type_int16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_range.argtypes.obj
    )

    min = _convert_to_ctype(
        min, 
        _lib_lvgl.py_lv_arc_set_range.argtypes.min
    )

    max = _convert_to_ctype(
        max, 
        _lib_lvgl.py_lv_arc_set_range.argtypes.max
    )

    _lib_lvgl.py_lv_arc_set_range(obj, min, max)


_lib_lvgl.py_lv_arc_set_change_rate.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    rate=uint16_t
)
_lib_lvgl.py_lv_arc_set_change_rate.restype = None


def arc_set_change_rate(
    obj: obj_t,
    rate: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_set_change_rate.argtypes.obj
    )

    rate = _convert_to_ctype(
        rate, 
        _lib_lvgl.py_lv_arc_set_change_rate.argtypes.rate
    )

    _lib_lvgl.py_lv_arc_set_change_rate(obj, rate)


_lib_lvgl.py_lv_arc_set_knob_offset.argtypes = __CArgList(
    arc=_ctypes.POINTER(obj_t),
    offset=int16_t
)
_lib_lvgl.py_lv_arc_set_knob_offset.restype = None


def arc_set_knob_offset(
    arc: obj_t,
    offset: _type_int16_t
) -> None:
    arc = _convert_to_ctype(
        arc, 
        _lib_lvgl.py_lv_arc_set_knob_offset.argtypes.arc
    )

    offset = _convert_to_ctype(
        offset, 
        _lib_lvgl.py_lv_arc_set_knob_offset.argtypes.offset
    )

    _lib_lvgl.py_lv_arc_set_knob_offset(arc, offset)


_lib_lvgl.py_lv_arc_get_angle_start.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_angle_start.restype = uint16_t


def arc_get_angle_start(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_angle_start.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_angle_start(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_angle_start.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_angle_start.restype)
    )


_lib_lvgl.py_lv_arc_get_angle_end.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_angle_end.restype = uint16_t


def arc_get_angle_end(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_angle_end.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_angle_end(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_angle_end.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_angle_end.restype)
    )


_lib_lvgl.py_lv_arc_get_bg_angle_start.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_bg_angle_start.restype = uint16_t


def arc_get_bg_angle_start(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_bg_angle_start.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_bg_angle_start(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_bg_angle_start.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_bg_angle_start.restype)
    )


_lib_lvgl.py_lv_arc_get_bg_angle_end.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_bg_angle_end.restype = uint16_t


def arc_get_bg_angle_end(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_bg_angle_end.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_bg_angle_end(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_bg_angle_end.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_bg_angle_end.restype)
    )


_lib_lvgl.py_lv_arc_get_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_value.restype = int16_t


def arc_get_value(obj: obj_t) -> int16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_value.restype)
    )


_lib_lvgl.py_lv_arc_get_min_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_min_value.restype = int16_t


def arc_get_min_value(obj: obj_t) -> int16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_min_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_min_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_min_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_min_value.restype)
    )


_lib_lvgl.py_lv_arc_get_max_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_max_value.restype = int16_t


def arc_get_max_value(obj: obj_t) -> int16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_max_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_max_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_max_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_max_value.restype)
    )


_lib_lvgl.py_lv_arc_get_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_mode.restype = arc_mode_t


def arc_get_mode(obj: obj_t) -> arc_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_mode.restype)
    )


_lib_lvgl.py_lv_arc_get_rotation.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_rotation.restype = int16_t


def arc_get_rotation(obj: obj_t) -> int16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_rotation.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_rotation(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_rotation.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_rotation.restype)
    )


_lib_lvgl.py_lv_arc_get_knob_offset.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_arc_get_knob_offset.restype = int16_t


def arc_get_knob_offset(obj: obj_t) -> int16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_get_knob_offset.argtypes.obj
    )

    res = _lib_lvgl.py_lv_arc_get_knob_offset(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_arc_get_knob_offset.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_arc_get_knob_offset.restype)
    )


_lib_lvgl.py_lv_arc_align_obj_to_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    obj_to_align=_ctypes.POINTER(obj_t),
    r_offset=coord_t
)
_lib_lvgl.py_lv_arc_align_obj_to_angle.restype = None


def arc_align_obj_to_angle(
    obj: obj_t,
    obj_to_align: obj_t,
    r_offset: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_align_obj_to_angle.argtypes.obj
    )

    obj_to_align = _convert_to_ctype(
        obj_to_align, 
        _lib_lvgl.py_lv_arc_align_obj_to_angle.argtypes.obj_to_align
    )

    r_offset = _convert_to_ctype(
        r_offset, 
        _lib_lvgl.py_lv_arc_align_obj_to_angle.argtypes.r_offset
    )

    _lib_lvgl.py_lv_arc_align_obj_to_angle(obj, obj_to_align, r_offset)


_lib_lvgl.py_lv_arc_rotate_obj_to_angle.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    obj_to_rotate=_ctypes.POINTER(obj_t),
    r_offset=coord_t
)
_lib_lvgl.py_lv_arc_rotate_obj_to_angle.restype = None


def arc_rotate_obj_to_angle(
    obj: obj_t,
    obj_to_rotate: obj_t,
    r_offset: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_arc_rotate_obj_to_angle.argtypes.obj
    )

    obj_to_rotate = _convert_to_ctype(
        obj_to_rotate, 
        _lib_lvgl.py_lv_arc_rotate_obj_to_angle.argtypes.obj_to_rotate
    )

    r_offset = _convert_to_ctype(
        r_offset, 
        _lib_lvgl.py_lv_arc_rotate_obj_to_angle.argtypes.r_offset
    )

    _lib_lvgl.py_lv_arc_rotate_obj_to_angle(obj, obj_to_rotate, r_offset)


_lib_lvgl.py_lv_label_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_label_create.restype = _ctypes.POINTER(obj_t)


def label_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_label_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_label_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_create.restype)
    )


_lib_lvgl.py_lv_label_set_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    text=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_label_set_text.restype = None


def label_set_text(
    obj: obj_t,
    text: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_set_text.argtypes.obj
    )

    text = _convert_to_ctype(
        text, 
        _lib_lvgl.py_lv_label_set_text.argtypes.text
    )

    _lib_lvgl.py_lv_label_set_text(obj, text)


_lib_lvgl.py_lv_label_set_text_static.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    text=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_label_set_text_static.restype = None


def label_set_text_static(
    obj: obj_t,
    text: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_set_text_static.argtypes.obj
    )

    text = _convert_to_ctype(
        text, 
        _lib_lvgl.py_lv_label_set_text_static.argtypes.text
    )

    _lib_lvgl.py_lv_label_set_text_static(obj, text)


_lib_lvgl.py_lv_label_set_long_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    long_mode=label_long_mode_t
)
_lib_lvgl.py_lv_label_set_long_mode.restype = None


def label_set_long_mode(
    obj: obj_t,
    long_mode: label_long_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_set_long_mode.argtypes.obj
    )

    long_mode = _convert_to_ctype(
        long_mode, 
        _lib_lvgl.py_lv_label_set_long_mode.argtypes.long_mode
    )

    _lib_lvgl.py_lv_label_set_long_mode(obj, long_mode)


_lib_lvgl.py_lv_label_set_recolor.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_label_set_recolor.restype = None


def label_set_recolor(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_set_recolor.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_label_set_recolor.argtypes.en
    )

    _lib_lvgl.py_lv_label_set_recolor(obj, en)


_lib_lvgl.py_lv_label_set_text_selection_start.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    index=uint32_t
)
_lib_lvgl.py_lv_label_set_text_selection_start.restype = None


def label_set_text_selection_start(
    obj: obj_t,
    index: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_set_text_selection_start.argtypes.obj
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_label_set_text_selection_start.argtypes.index
    )

    _lib_lvgl.py_lv_label_set_text_selection_start(obj, index)


_lib_lvgl.py_lv_label_set_text_selection_end.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    index=uint32_t
)
_lib_lvgl.py_lv_label_set_text_selection_end.restype = None


def label_set_text_selection_end(
    obj: obj_t,
    index: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_set_text_selection_end.argtypes.obj
    )

    index = _convert_to_ctype(
        index, 
        _lib_lvgl.py_lv_label_set_text_selection_end.argtypes.index
    )

    _lib_lvgl.py_lv_label_set_text_selection_end(obj, index)


_lib_lvgl.py_lv_label_get_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_label_get_text.restype = _ctypes.POINTER(char_t)


def label_get_text(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_text.argtypes.obj
    )

    res = _lib_lvgl.py_lv_label_get_text(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_get_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_get_text.restype)
    )


_lib_lvgl.py_lv_label_get_long_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_label_get_long_mode.restype = label_long_mode_t


def label_get_long_mode(obj: obj_t) -> label_long_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_long_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_label_get_long_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_get_long_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_get_long_mode.restype)
    )


_lib_lvgl.py_lv_label_get_recolor.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_label_get_recolor.restype = bool_t


def label_get_recolor(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_recolor.argtypes.obj
    )

    res = _lib_lvgl.py_lv_label_get_recolor(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_get_recolor.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_get_recolor.restype)
    )


_lib_lvgl.py_lv_label_get_letter_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    char_id=uint32_t,
    pos=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_label_get_letter_pos.restype = None


def label_get_letter_pos(
    obj: obj_t,
    char_id: _type_uint32_t,
    pos: point_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_letter_pos.argtypes.obj
    )

    char_id = _convert_to_ctype(
        char_id, 
        _lib_lvgl.py_lv_label_get_letter_pos.argtypes.char_id
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_label_get_letter_pos.argtypes.pos
    )

    _lib_lvgl.py_lv_label_get_letter_pos(obj, char_id, pos)


_lib_lvgl.py_lv_label_get_letter_on.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pos_in=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_label_get_letter_on.restype = uint32_t


def label_get_letter_on(
    obj: obj_t,
    pos_in: point_t
) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_letter_on.argtypes.obj
    )

    pos_in = _convert_to_ctype(
        pos_in, 
        _lib_lvgl.py_lv_label_get_letter_on.argtypes.pos_in
    )

    res = _lib_lvgl.py_lv_label_get_letter_on(obj, pos_in)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_get_letter_on.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_get_letter_on.restype)
    )


_lib_lvgl.py_lv_label_is_char_under_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pos=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_label_is_char_under_pos.restype = bool_t


def label_is_char_under_pos(
    obj: obj_t,
    pos: point_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_is_char_under_pos.argtypes.obj
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_label_is_char_under_pos.argtypes.pos
    )

    res = _lib_lvgl.py_lv_label_is_char_under_pos(obj, pos)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_is_char_under_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_is_char_under_pos.restype)
    )


_lib_lvgl.py_lv_label_get_text_selection_start.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_label_get_text_selection_start.restype = uint32_t


def label_get_text_selection_start(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_text_selection_start.argtypes.obj
    )

    res = _lib_lvgl.py_lv_label_get_text_selection_start(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_get_text_selection_start.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_get_text_selection_start.restype)
    )


_lib_lvgl.py_lv_label_get_text_selection_end.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_label_get_text_selection_end.restype = uint32_t


def label_get_text_selection_end(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_get_text_selection_end.argtypes.obj
    )

    res = _lib_lvgl.py_lv_label_get_text_selection_end(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_label_get_text_selection_end.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_label_get_text_selection_end.restype)
    )


_lib_lvgl.py_lv_label_ins_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pos=uint32_t,
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_label_ins_text.restype = None


def label_ins_text(
    obj: obj_t,
    pos: _type_uint32_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_ins_text.argtypes.obj
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_label_ins_text.argtypes.pos
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_label_ins_text.argtypes.txt
    )

    _lib_lvgl.py_lv_label_ins_text(obj, pos, txt)


_lib_lvgl.py_lv_label_cut_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pos=uint32_t,
    cnt=uint32_t
)
_lib_lvgl.py_lv_label_cut_text.restype = None


def label_cut_text(
    obj: obj_t,
    pos: _type_uint32_t,
    cnt: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_label_cut_text.argtypes.obj
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_label_cut_text.argtypes.pos
    )

    cnt = _convert_to_ctype(
        cnt, 
        _lib_lvgl.py_lv_label_cut_text.argtypes.cnt
    )

    _lib_lvgl.py_lv_label_cut_text(obj, pos, cnt)


_lib_lvgl.py_lv_bar_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_bar_create.restype = _ctypes.POINTER(obj_t)


def bar_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_bar_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_bar_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bar_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bar_create.restype)
    )


_lib_lvgl.py_lv_bar_set_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=int32_t,
    anim=anim_enable_t
)
_lib_lvgl.py_lv_bar_set_value.restype = None


def bar_set_value(
    obj: obj_t,
    value: _type_int32_t,
    anim: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_set_value.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_bar_set_value.argtypes.value
    )

    anim = _convert_to_ctype(
        anim, 
        _lib_lvgl.py_lv_bar_set_value.argtypes.anim
    )

    _lib_lvgl.py_lv_bar_set_value(obj, value, anim)


_lib_lvgl.py_lv_bar_set_start_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    start_value=int32_t,
    anim=anim_enable_t
)
_lib_lvgl.py_lv_bar_set_start_value.restype = None


def bar_set_start_value(
    obj: obj_t,
    start_value: _type_int32_t,
    anim: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_set_start_value.argtypes.obj
    )

    start_value = _convert_to_ctype(
        start_value, 
        _lib_lvgl.py_lv_bar_set_start_value.argtypes.start_value
    )

    anim = _convert_to_ctype(
        anim, 
        _lib_lvgl.py_lv_bar_set_start_value.argtypes.anim
    )

    _lib_lvgl.py_lv_bar_set_start_value(obj, start_value, anim)


_lib_lvgl.py_lv_bar_set_range.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    min=int32_t,
    max=int32_t
)
_lib_lvgl.py_lv_bar_set_range.restype = None


def bar_set_range(
    obj: obj_t,
    min: _type_int32_t,
    max: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_set_range.argtypes.obj
    )

    min = _convert_to_ctype(
        min, 
        _lib_lvgl.py_lv_bar_set_range.argtypes.min
    )

    max = _convert_to_ctype(
        max, 
        _lib_lvgl.py_lv_bar_set_range.argtypes.max
    )

    _lib_lvgl.py_lv_bar_set_range(obj, min, max)


_lib_lvgl.py_lv_bar_set_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode=bar_mode_t
)
_lib_lvgl.py_lv_bar_set_mode.restype = None


def bar_set_mode(obj: obj_t, mode: bar_mode_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_set_mode.argtypes.obj
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_bar_set_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_bar_set_mode(obj, mode)


_lib_lvgl.py_lv_bar_get_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_bar_get_value.restype = int32_t


def bar_get_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_get_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_bar_get_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bar_get_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bar_get_value.restype)
    )


_lib_lvgl.py_lv_bar_get_start_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_bar_get_start_value.restype = int32_t


def bar_get_start_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_get_start_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_bar_get_start_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bar_get_start_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bar_get_start_value.restype)
    )


_lib_lvgl.py_lv_bar_get_min_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_bar_get_min_value.restype = int32_t


def bar_get_min_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_get_min_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_bar_get_min_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bar_get_min_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bar_get_min_value.restype)
    )


_lib_lvgl.py_lv_bar_get_max_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_bar_get_max_value.restype = int32_t


def bar_get_max_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_get_max_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_bar_get_max_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bar_get_max_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bar_get_max_value.restype)
    )


_lib_lvgl.py_lv_bar_get_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_bar_get_mode.restype = bar_mode_t


def bar_get_mode(obj: obj_t) -> bar_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_bar_get_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_bar_get_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_bar_get_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_bar_get_mode.restype)
    )


_lib_lvgl.py_lv_btn_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_btn_create.restype = _ctypes.POINTER(obj_t)


def btn_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_btn_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_btn_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btn_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btn_create.restype)
    )


_lib_lvgl.py_lv_btnmatrix_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_btnmatrix_create.restype = _ctypes.POINTER(obj_t)


def btnmatrix_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_btnmatrix_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_btnmatrix_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_create.restype)
    )


_lib_lvgl.py_lv_btnmatrix_set_map.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    map=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_btnmatrix_set_map.restype = None


def btnmatrix_set_map(
    obj: obj_t,
    map: List[char_t]
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_map.argtypes.obj
    )

    map = _convert_to_ctype(
        map, 
        _lib_lvgl.py_lv_btnmatrix_set_map.argtypes.map
    )

    _lib_lvgl.py_lv_btnmatrix_set_map(obj, map)


_lib_lvgl.py_lv_btnmatrix_set_ctrl_map.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ctrl_map=_ctypes.POINTER(btnmatrix_ctrl_t)
)
_lib_lvgl.py_lv_btnmatrix_set_ctrl_map.restype = None


def btnmatrix_set_ctrl_map(
    obj: obj_t,
    ctrl_map: List[btnmatrix_ctrl_t]
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_ctrl_map.argtypes.obj
    )

    ctrl_map = _convert_to_ctype(
        ctrl_map, 
        _lib_lvgl.py_lv_btnmatrix_set_ctrl_map.argtypes.ctrl_map
    )

    _lib_lvgl.py_lv_btnmatrix_set_ctrl_map(obj, ctrl_map)


_lib_lvgl.py_lv_btnmatrix_set_selected_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t
)
_lib_lvgl.py_lv_btnmatrix_set_selected_btn.restype = None


def btnmatrix_set_selected_btn(
    obj: obj_t,
    btn_id: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_selected_btn.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_btnmatrix_set_selected_btn.argtypes.btn_id
    )

    _lib_lvgl.py_lv_btnmatrix_set_selected_btn(obj, btn_id)


_lib_lvgl.py_lv_btnmatrix_set_btn_ctrl.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t,
    ctrl=btnmatrix_ctrl_t
)
_lib_lvgl.py_lv_btnmatrix_set_btn_ctrl.restype = None


def btnmatrix_set_btn_ctrl(
    obj: obj_t,
    btn_id: _type_uint16_t,
    ctrl: btnmatrix_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl.argtypes.btn_id
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl.argtypes.ctrl
    )

    _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl(obj, btn_id, ctrl)


_lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t,
    ctrl=btnmatrix_ctrl_t
)
_lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl.restype = None


def btnmatrix_clear_btn_ctrl(
    obj: obj_t,
    btn_id: _type_uint16_t,
    ctrl: btnmatrix_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl.argtypes.btn_id
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl.argtypes.ctrl
    )

    _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl(obj, btn_id, ctrl)


_lib_lvgl.py_lv_btnmatrix_set_btn_ctrl_all.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ctrl=btnmatrix_ctrl_t
)
_lib_lvgl.py_lv_btnmatrix_set_btn_ctrl_all.restype = None


def btnmatrix_set_btn_ctrl_all(
    obj: obj_t,
    ctrl: btnmatrix_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl_all.argtypes.obj
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl_all.argtypes.ctrl
    )

    _lib_lvgl.py_lv_btnmatrix_set_btn_ctrl_all(obj, ctrl)


_lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl_all.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ctrl=btnmatrix_ctrl_t
)
_lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl_all.restype = None


def btnmatrix_clear_btn_ctrl_all(
    obj: obj_t,
    ctrl: btnmatrix_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl_all.argtypes.obj
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl_all.argtypes.ctrl
    )

    _lib_lvgl.py_lv_btnmatrix_clear_btn_ctrl_all(obj, ctrl)


_lib_lvgl.py_lv_btnmatrix_set_btn_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t,
    width=uint8_t
)
_lib_lvgl.py_lv_btnmatrix_set_btn_width.restype = None


def btnmatrix_set_btn_width(
    obj: obj_t,
    btn_id: _type_uint16_t,
    width: _type_uint8_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_width.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_width.argtypes.btn_id
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_btnmatrix_set_btn_width.argtypes.width
    )

    _lib_lvgl.py_lv_btnmatrix_set_btn_width(obj, btn_id, width)


_lib_lvgl.py_lv_btnmatrix_set_one_checked.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_btnmatrix_set_one_checked.restype = None


def btnmatrix_set_one_checked(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_set_one_checked.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_btnmatrix_set_one_checked.argtypes.en
    )

    _lib_lvgl.py_lv_btnmatrix_set_one_checked(obj, en)


_lib_lvgl.py_lv_btnmatrix_get_map.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_btnmatrix_get_map.restype = _ctypes.POINTER(_ctypes.POINTER(char_t))


def btnmatrix_get_map(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_get_map.argtypes.obj
    )

    res = _lib_lvgl.py_lv_btnmatrix_get_map(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_get_map.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_get_map.restype)
    )


_lib_lvgl.py_lv_btnmatrix_get_selected_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_btnmatrix_get_selected_btn.restype = uint16_t


def btnmatrix_get_selected_btn(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_get_selected_btn.argtypes.obj
    )

    res = _lib_lvgl.py_lv_btnmatrix_get_selected_btn(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_get_selected_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_get_selected_btn.restype)
    )


_lib_lvgl.py_lv_btnmatrix_get_btn_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t
)
_lib_lvgl.py_lv_btnmatrix_get_btn_text.restype = _ctypes.POINTER(char_t)


def btnmatrix_get_btn_text(
    obj: obj_t,
    btn_id: _type_uint16_t
) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_get_btn_text.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_btnmatrix_get_btn_text.argtypes.btn_id
    )

    res = _lib_lvgl.py_lv_btnmatrix_get_btn_text(obj, btn_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_get_btn_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_get_btn_text.restype)
    )


_lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t,
    ctrl=btnmatrix_ctrl_t
)
_lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.restype = bool_t


def btnmatrix_has_btn_ctrl(
    obj: obj_t,
    btn_id: _type_uint16_t,
    ctrl: btnmatrix_ctrl_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.argtypes.btn_id
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.argtypes.ctrl
    )

    res = _lib_lvgl.py_lv_btnmatrix_has_btn_ctrl(obj, btn_id, ctrl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_has_btn_ctrl.restype)
    )


_lib_lvgl.py_lv_btnmatrix_get_one_checked.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_btnmatrix_get_one_checked.restype = bool_t


def btnmatrix_get_one_checked(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_get_one_checked.argtypes.obj
    )

    res = _lib_lvgl.py_lv_btnmatrix_get_one_checked(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_get_one_checked.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_get_one_checked.restype)
    )


_lib_lvgl.py_lv_calendar_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_create.restype = _ctypes.POINTER(obj_t)


def calendar_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_calendar_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_calendar_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_create.restype)
    )


_lib_lvgl.py_lv_calendar_set_today_date.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    year=uint32_t,
    month=uint32_t,
    day=uint32_t
)
_lib_lvgl.py_lv_calendar_set_today_date.restype = None


def calendar_set_today_date(
    obj: obj_t,
    year: _type_uint32_t,
    month: _type_uint32_t,
    day: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_calendar_set_today_date.argtypes.obj
    )

    year = _convert_to_ctype(
        year, 
        _lib_lvgl.py_lv_calendar_set_today_date.argtypes.year
    )

    month = _convert_to_ctype(
        month, 
        _lib_lvgl.py_lv_calendar_set_today_date.argtypes.month
    )

    day = _convert_to_ctype(
        day, 
        _lib_lvgl.py_lv_calendar_set_today_date.argtypes.day
    )

    _lib_lvgl.py_lv_calendar_set_today_date(obj, year, month, day)


_lib_lvgl.py_lv_calendar_set_showed_date.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    year=uint32_t,
    month=uint32_t
)
_lib_lvgl.py_lv_calendar_set_showed_date.restype = None


def calendar_set_showed_date(
    obj: obj_t,
    year: _type_uint32_t,
    month: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_calendar_set_showed_date.argtypes.obj
    )

    year = _convert_to_ctype(
        year, 
        _lib_lvgl.py_lv_calendar_set_showed_date.argtypes.year
    )

    month = _convert_to_ctype(
        month, 
        _lib_lvgl.py_lv_calendar_set_showed_date.argtypes.month
    )

    _lib_lvgl.py_lv_calendar_set_showed_date(obj, year, month)


_lib_lvgl.py_lv_calendar_set_highlighted_dates.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    highlighted=_ctypes.POINTER(calendar_date_t),
    date_num=uint16_t
)
_lib_lvgl.py_lv_calendar_set_highlighted_dates.restype = None


def calendar_set_highlighted_dates(
    obj: obj_t,
    highlighted: List[calendar_date_t],
    date_num: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_calendar_set_highlighted_dates.argtypes.obj
    )

    highlighted = _convert_to_ctype(
        highlighted, 
        _lib_lvgl.py_lv_calendar_set_highlighted_dates.argtypes.highlighted
    )

    date_num = _convert_to_ctype(
        date_num, 
        _lib_lvgl.py_lv_calendar_set_highlighted_dates.argtypes.date_num
    )

    _lib_lvgl.py_lv_calendar_set_highlighted_dates(obj, highlighted, date_num)


_lib_lvgl.py_lv_calendar_set_day_names.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    day_names=_ctypes.POINTER(_ctypes.POINTER(char_t))
)
_lib_lvgl.py_lv_calendar_set_day_names.restype = None


def calendar_set_day_names(
    obj: obj_t,
    day_names: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_calendar_set_day_names.argtypes.obj
    )

    day_names = _convert_to_ctype(
        day_names, 
        _lib_lvgl.py_lv_calendar_set_day_names.argtypes.day_names
    )

    _lib_lvgl.py_lv_calendar_set_day_names(obj, day_names)


_lib_lvgl.py_lv_calendar_get_btnmatrix.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_get_btnmatrix.restype = _ctypes.POINTER(obj_t)


def calendar_get_btnmatrix(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_calendar_get_btnmatrix.argtypes.obj
    )

    res = _lib_lvgl.py_lv_calendar_get_btnmatrix(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_get_btnmatrix.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_get_btnmatrix.restype)
    )


_lib_lvgl.py_lv_calendar_get_today_date.argtypes = __CArgList(
    calendar=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_get_today_date.restype = _ctypes.POINTER(calendar_date_t)


def calendar_get_today_date(calendar: obj_t) -> calendar_date_t:
    calendar = _convert_to_ctype(
        calendar, 
        _lib_lvgl.py_lv_calendar_get_today_date.argtypes.calendar
    )

    res = _lib_lvgl.py_lv_calendar_get_today_date(calendar)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_get_today_date.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_get_today_date.restype)
    )


_lib_lvgl.py_lv_calendar_get_showed_date.argtypes = __CArgList(
    calendar=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_get_showed_date.restype = _ctypes.POINTER(calendar_date_t)


def calendar_get_showed_date(calendar: obj_t) -> calendar_date_t:
    calendar = _convert_to_ctype(
        calendar, 
        _lib_lvgl.py_lv_calendar_get_showed_date.argtypes.calendar
    )

    res = _lib_lvgl.py_lv_calendar_get_showed_date(calendar)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_get_showed_date.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_get_showed_date.restype)
    )


_lib_lvgl.py_lv_calendar_get_highlighted_dates.argtypes = __CArgList(
    calendar=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_get_highlighted_dates.restype = _ctypes.POINTER(calendar_date_t)


def calendar_get_highlighted_dates(
    calendar: obj_t
) -> calendar_date_t:
    calendar = _convert_to_ctype(
        calendar, 
        _lib_lvgl.py_lv_calendar_get_highlighted_dates.argtypes.calendar
    )

    res = _lib_lvgl.py_lv_calendar_get_highlighted_dates(calendar)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_get_highlighted_dates.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_get_highlighted_dates.restype)
    )


_lib_lvgl.py_lv_calendar_get_highlighted_dates_num.argtypes = __CArgList(
    calendar=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_get_highlighted_dates_num.restype = uint16_t


def calendar_get_highlighted_dates_num(
    calendar: obj_t
) -> uint16_t:
    calendar = _convert_to_ctype(
        calendar, 
        _lib_lvgl.py_lv_calendar_get_highlighted_dates_num.argtypes.calendar
    )

    res = _lib_lvgl.py_lv_calendar_get_highlighted_dates_num(calendar)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_get_highlighted_dates_num.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_get_highlighted_dates_num.restype)
    )


_lib_lvgl.py_lv_calendar_get_pressed_date.argtypes = __CArgList(
    calendar=_ctypes.POINTER(obj_t),
    date=_ctypes.POINTER(calendar_date_t)
)
_lib_lvgl.py_lv_calendar_get_pressed_date.restype = res_t


def calendar_get_pressed_date(
    calendar: obj_t,
    date: calendar_date_t
) -> res_t:
    calendar = _convert_to_ctype(
        calendar, 
        _lib_lvgl.py_lv_calendar_get_pressed_date.argtypes.calendar
    )

    date = _convert_to_ctype(
        date, 
        _lib_lvgl.py_lv_calendar_get_pressed_date.argtypes.date
    )

    res = _lib_lvgl.py_lv_calendar_get_pressed_date(calendar, date)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_get_pressed_date.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_get_pressed_date.restype)
    )


_lib_lvgl.py_lv_calendar_header_arrow_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_header_arrow_create.restype = _ctypes.POINTER(obj_t)


def calendar_header_arrow_create(
    parent: obj_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_calendar_header_arrow_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_calendar_header_arrow_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_header_arrow_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_header_arrow_create.restype)
    )


_lib_lvgl.py_lv_calendar_header_dropdown_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_calendar_header_dropdown_create.restype = _ctypes.POINTER(obj_t)


def calendar_header_dropdown_create(
    parent: obj_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_calendar_header_dropdown_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_calendar_header_dropdown_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_calendar_header_dropdown_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_calendar_header_dropdown_create.restype)
    )


_lib_lvgl.py_lv_canvas_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_canvas_create.restype = _ctypes.POINTER(obj_t)


def canvas_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_canvas_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_canvas_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_canvas_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_canvas_create.restype)
    )


_lib_lvgl.py_lv_canvas_set_buffer.argtypes = __CArgList(
    canvas=_ctypes.POINTER(obj_t),
    buf=void_t,
    w=coord_t,
    h=coord_t,
    cf=color_format_t
)
_lib_lvgl.py_lv_canvas_set_buffer.restype = None


def canvas_set_buffer(
    canvas: obj_t,
    buf: void_t,
    w: coord_t,
    h: coord_t,
    cf: color_format_t
) -> None:
    canvas = _convert_to_ctype(
        canvas, 
        _lib_lvgl.py_lv_canvas_set_buffer.argtypes.canvas
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_canvas_set_buffer.argtypes.buf
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_canvas_set_buffer.argtypes.w
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_canvas_set_buffer.argtypes.h
    )

    cf = _convert_to_ctype(
        cf, 
        _lib_lvgl.py_lv_canvas_set_buffer.argtypes.cf
    )

    _lib_lvgl.py_lv_canvas_set_buffer(canvas, buf, w, h, cf)


_lib_lvgl.py_lv_canvas_set_px.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    x=coord_t,
    y=coord_t,
    color=color_t,
    opa=opa_t
)
_lib_lvgl.py_lv_canvas_set_px.restype = None


def canvas_set_px(
    obj: obj_t,
    x: coord_t,
    y: coord_t,
    color: color_t,
    opa: opa_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_canvas_set_px.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_canvas_set_px.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_canvas_set_px.argtypes.y
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_canvas_set_px.argtypes.color
    )

    opa = _convert_to_ctype(
        opa, 
        _lib_lvgl.py_lv_canvas_set_px.argtypes.opa
    )

    _lib_lvgl.py_lv_canvas_set_px(obj, x, y, color, opa)


_lib_lvgl.py_lv_canvas_set_palette.argtypes = __CArgList(
    canvas=_ctypes.POINTER(obj_t),
    id=uint8_t,
    c=color32_t
)
_lib_lvgl.py_lv_canvas_set_palette.restype = None


def canvas_set_palette(
    canvas: obj_t,
    id: _type_uint8_t,
    c: color32_t
) -> None:
    canvas = _convert_to_ctype(
        canvas, 
        _lib_lvgl.py_lv_canvas_set_palette.argtypes.canvas
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_canvas_set_palette.argtypes.id
    )

    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_canvas_set_palette.argtypes.c
    )

    _lib_lvgl.py_lv_canvas_set_palette(canvas, id, c)


_lib_lvgl.py_lv_canvas_get_px.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    x=coord_t,
    y=coord_t
)
_lib_lvgl.py_lv_canvas_get_px.restype = color32_t


def canvas_get_px(
    obj: obj_t,
    x: coord_t,
    y: coord_t
) -> color32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_canvas_get_px.argtypes.obj
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_canvas_get_px.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_canvas_get_px.argtypes.y
    )

    res = _lib_lvgl.py_lv_canvas_get_px(obj, x, y)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_canvas_get_px.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_canvas_get_px.restype)
    )


_lib_lvgl.py_lv_canvas_get_img.argtypes = __CArgList(
    canvas=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_canvas_get_img.restype = _ctypes.POINTER(img_dsc_t)


def canvas_get_img(canvas: obj_t) -> img_dsc_t:
    canvas = _convert_to_ctype(
        canvas, 
        _lib_lvgl.py_lv_canvas_get_img.argtypes.canvas
    )

    res = _lib_lvgl.py_lv_canvas_get_img(canvas)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_canvas_get_img.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_canvas_get_img.restype)
    )


_lib_lvgl.py_lv_canvas_copy_buf.argtypes = __CArgList(
    canvas=_ctypes.POINTER(obj_t),
    to_copy=void_t,
    x=coord_t,
    y=coord_t,
    w=coord_t,
    h=coord_t
)
_lib_lvgl.py_lv_canvas_copy_buf.restype = None


def canvas_copy_buf(
    canvas: obj_t,
    to_copy: void_t,
    x: coord_t,
    y: coord_t,
    w: coord_t,
    h: coord_t
) -> None:
    canvas = _convert_to_ctype(
        canvas, 
        _lib_lvgl.py_lv_canvas_copy_buf.argtypes.canvas
    )

    to_copy = _convert_to_ctype(
        to_copy, 
        _lib_lvgl.py_lv_canvas_copy_buf.argtypes.to_copy
    )

    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_canvas_copy_buf.argtypes.x
    )

    y = _convert_to_ctype(
        y, 
        _lib_lvgl.py_lv_canvas_copy_buf.argtypes.y
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_canvas_copy_buf.argtypes.w
    )

    h = _convert_to_ctype(
        h, 
        _lib_lvgl.py_lv_canvas_copy_buf.argtypes.h
    )

    _lib_lvgl.py_lv_canvas_copy_buf(canvas, to_copy, x, y, w, h)


_lib_lvgl.py_lv_canvas_fill_bg.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t,
    opa=opa_t
)
_lib_lvgl.py_lv_canvas_fill_bg.restype = None


def canvas_fill_bg(
    obj: obj_t,
    color: color_t,
    opa: opa_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_canvas_fill_bg.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_canvas_fill_bg.argtypes.color
    )

    opa = _convert_to_ctype(
        opa, 
        _lib_lvgl.py_lv_canvas_fill_bg.argtypes.opa
    )

    _lib_lvgl.py_lv_canvas_fill_bg(obj, color, opa)


_lib_lvgl.py_lv_canvas_init_layer.argtypes = __CArgList(
    canvas=_ctypes.POINTER(obj_t),
    layer=_ctypes.POINTER(layer_t)
)
_lib_lvgl.py_lv_canvas_init_layer.restype = None


def canvas_init_layer(
    canvas: obj_t,
    layer: layer_t
) -> None:
    canvas = _convert_to_ctype(
        canvas, 
        _lib_lvgl.py_lv_canvas_init_layer.argtypes.canvas
    )

    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_canvas_init_layer.argtypes.layer
    )

    _lib_lvgl.py_lv_canvas_init_layer(canvas, layer)


_lib_lvgl.py_lv_canvas_finish_layer.argtypes = __CArgList(
    canvas=_ctypes.POINTER(obj_t),
    layer=_ctypes.POINTER(layer_t)
)
_lib_lvgl.py_lv_canvas_finish_layer.restype = None


def canvas_finish_layer(
    canvas: obj_t,
    layer: layer_t
) -> None:
    canvas = _convert_to_ctype(
        canvas, 
        _lib_lvgl.py_lv_canvas_finish_layer.argtypes.canvas
    )

    layer = _convert_to_ctype(
        layer, 
        _lib_lvgl.py_lv_canvas_finish_layer.argtypes.layer
    )

    _lib_lvgl.py_lv_canvas_finish_layer(canvas, layer)


_lib_lvgl.py_lv_chart_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_create.restype = _ctypes.POINTER(obj_t)


def chart_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_chart_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_chart_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_create.restype)
    )


_lib_lvgl.py_lv_chart_set_type.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    type=chart_type_t
)
_lib_lvgl.py_lv_chart_set_type.restype = None


def chart_set_type(
    obj: obj_t,
    type: chart_type_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_type.argtypes.obj
    )

    type = _convert_to_ctype(
        type, 
        _lib_lvgl.py_lv_chart_set_type.argtypes.type
    )

    _lib_lvgl.py_lv_chart_set_type(obj, type)


_lib_lvgl.py_lv_chart_set_point_count.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    cnt=uint16_t
)
_lib_lvgl.py_lv_chart_set_point_count.restype = None


def chart_set_point_count(
    obj: obj_t,
    cnt: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_point_count.argtypes.obj
    )

    cnt = _convert_to_ctype(
        cnt, 
        _lib_lvgl.py_lv_chart_set_point_count.argtypes.cnt
    )

    _lib_lvgl.py_lv_chart_set_point_count(obj, cnt)


_lib_lvgl.py_lv_chart_set_range.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    axis=chart_axis_t,
    min=coord_t,
    max=coord_t
)
_lib_lvgl.py_lv_chart_set_range.restype = None


def chart_set_range(
    obj: obj_t,
    axis: chart_axis_t,
    min: coord_t,
    max: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_range.argtypes.obj
    )

    axis = _convert_to_ctype(
        axis, 
        _lib_lvgl.py_lv_chart_set_range.argtypes.axis
    )

    min = _convert_to_ctype(
        min, 
        _lib_lvgl.py_lv_chart_set_range.argtypes.min
    )

    max = _convert_to_ctype(
        max, 
        _lib_lvgl.py_lv_chart_set_range.argtypes.max
    )

    _lib_lvgl.py_lv_chart_set_range(obj, axis, min, max)


_lib_lvgl.py_lv_chart_set_update_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    update_mode=chart_update_mode_t
)
_lib_lvgl.py_lv_chart_set_update_mode.restype = None


def chart_set_update_mode(
    obj: obj_t,
    update_mode: chart_update_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_update_mode.argtypes.obj
    )

    update_mode = _convert_to_ctype(
        update_mode, 
        _lib_lvgl.py_lv_chart_set_update_mode.argtypes.update_mode
    )

    _lib_lvgl.py_lv_chart_set_update_mode(obj, update_mode)


_lib_lvgl.py_lv_chart_set_div_line_count.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    hdiv=uint8_t,
    vdiv=uint8_t
)
_lib_lvgl.py_lv_chart_set_div_line_count.restype = None


def chart_set_div_line_count(
    obj: obj_t,
    hdiv: _type_uint8_t,
    vdiv: _type_uint8_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_div_line_count.argtypes.obj
    )

    hdiv = _convert_to_ctype(
        hdiv, 
        _lib_lvgl.py_lv_chart_set_div_line_count.argtypes.hdiv
    )

    vdiv = _convert_to_ctype(
        vdiv, 
        _lib_lvgl.py_lv_chart_set_div_line_count.argtypes.vdiv
    )

    _lib_lvgl.py_lv_chart_set_div_line_count(obj, hdiv, vdiv)


_lib_lvgl.py_lv_chart_set_zoom_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    zoom_x=uint16_t
)
_lib_lvgl.py_lv_chart_set_zoom_x.restype = None


def chart_set_zoom_x(
    obj: obj_t,
    zoom_x: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_zoom_x.argtypes.obj
    )

    zoom_x = _convert_to_ctype(
        zoom_x, 
        _lib_lvgl.py_lv_chart_set_zoom_x.argtypes.zoom_x
    )

    _lib_lvgl.py_lv_chart_set_zoom_x(obj, zoom_x)


_lib_lvgl.py_lv_chart_set_zoom_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    zoom_y=uint16_t
)
_lib_lvgl.py_lv_chart_set_zoom_y.restype = None


def chart_set_zoom_y(
    obj: obj_t,
    zoom_y: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_zoom_y.argtypes.obj
    )

    zoom_y = _convert_to_ctype(
        zoom_y, 
        _lib_lvgl.py_lv_chart_set_zoom_y.argtypes.zoom_y
    )

    _lib_lvgl.py_lv_chart_set_zoom_y(obj, zoom_y)


_lib_lvgl.py_lv_chart_get_zoom_x.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_get_zoom_x.restype = uint16_t


def chart_get_zoom_x(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_zoom_x.argtypes.obj
    )

    res = _lib_lvgl.py_lv_chart_get_zoom_x(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_zoom_x.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_zoom_x.restype)
    )


_lib_lvgl.py_lv_chart_get_zoom_y.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_get_zoom_y.restype = uint16_t


def chart_get_zoom_y(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_zoom_y.argtypes.obj
    )

    res = _lib_lvgl.py_lv_chart_get_zoom_y(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_zoom_y.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_zoom_y.restype)
    )


_lib_lvgl.py_lv_chart_set_axis_tick.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    axis=chart_axis_t,
    major_len=coord_t,
    minor_len=coord_t,
    major_cnt=coord_t,
    minor_cnt=coord_t,
    label_en=bool_t,
    draw_size=coord_t
)
_lib_lvgl.py_lv_chart_set_axis_tick.restype = None


def chart_set_axis_tick(
    obj: obj_t,
    axis: chart_axis_t,
    major_len: coord_t,
    minor_len: coord_t,
    major_cnt: coord_t,
    minor_cnt: coord_t,
    label_en: _type_bool_t,
    draw_size: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.obj
    )

    axis = _convert_to_ctype(
        axis, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.axis
    )

    major_len = _convert_to_ctype(
        major_len, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.major_len
    )

    minor_len = _convert_to_ctype(
        minor_len, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.minor_len
    )

    major_cnt = _convert_to_ctype(
        major_cnt, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.major_cnt
    )

    minor_cnt = _convert_to_ctype(
        minor_cnt, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.minor_cnt
    )

    label_en = _convert_to_ctype(
        label_en, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.label_en
    )

    draw_size = _convert_to_ctype(
        draw_size, 
        _lib_lvgl.py_lv_chart_set_axis_tick.argtypes.draw_size
    )

    _lib_lvgl.py_lv_chart_set_axis_tick(obj, axis, major_len, minor_len, major_cnt, minor_cnt, label_en, draw_size)


_lib_lvgl.py_lv_chart_get_type.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_get_type.restype = chart_type_t


def chart_get_type(obj: obj_t) -> chart_type_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_type.argtypes.obj
    )

    res = _lib_lvgl.py_lv_chart_get_type(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_type.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_type.restype)
    )


_lib_lvgl.py_lv_chart_get_point_count.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_get_point_count.restype = uint16_t


def chart_get_point_count(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_point_count.argtypes.obj
    )

    res = _lib_lvgl.py_lv_chart_get_point_count(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_point_count.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_point_count.restype)
    )


_lib_lvgl.py_lv_chart_get_x_start_point.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t)
)
_lib_lvgl.py_lv_chart_get_x_start_point.restype = uint16_t


def chart_get_x_start_point(
    obj: obj_t,
    ser: chart_series_t
) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_x_start_point.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_get_x_start_point.argtypes.ser
    )

    res = _lib_lvgl.py_lv_chart_get_x_start_point(obj, ser)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_x_start_point.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_x_start_point.restype)
    )


_lib_lvgl.py_lv_chart_get_point_pos_by_id.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    id=uint16_t,
    p_out=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_chart_get_point_pos_by_id.restype = None


def chart_get_point_pos_by_id(
    obj: obj_t,
    ser: chart_series_t,
    id: _type_uint16_t,
    p_out: point_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_point_pos_by_id.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_get_point_pos_by_id.argtypes.ser
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_chart_get_point_pos_by_id.argtypes.id
    )

    p_out = _convert_to_ctype(
        p_out, 
        _lib_lvgl.py_lv_chart_get_point_pos_by_id.argtypes.p_out
    )

    _lib_lvgl.py_lv_chart_get_point_pos_by_id(obj, ser, id, p_out)


_lib_lvgl.py_lv_chart_refresh.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_refresh.restype = None


def chart_refresh(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_refresh.argtypes.obj
    )

    _lib_lvgl.py_lv_chart_refresh(obj)


_lib_lvgl.py_lv_chart_add_series.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t,
    axis=chart_axis_t
)
_lib_lvgl.py_lv_chart_add_series.restype = _ctypes.POINTER(chart_series_t)


def chart_add_series(
    obj: obj_t,
    color: color_t,
    axis: chart_axis_t
) -> chart_series_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_add_series.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_chart_add_series.argtypes.color
    )

    axis = _convert_to_ctype(
        axis, 
        _lib_lvgl.py_lv_chart_add_series.argtypes.axis
    )

    res = _lib_lvgl.py_lv_chart_add_series(obj, color, axis)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_add_series.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_add_series.restype)
    )


_lib_lvgl.py_lv_chart_remove_series.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    series=_ctypes.POINTER(chart_series_t)
)
_lib_lvgl.py_lv_chart_remove_series.restype = None


def chart_remove_series(
    obj: obj_t,
    series: chart_series_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_remove_series.argtypes.obj
    )

    series = _convert_to_ctype(
        series, 
        _lib_lvgl.py_lv_chart_remove_series.argtypes.series
    )

    _lib_lvgl.py_lv_chart_remove_series(obj, series)


_lib_lvgl.py_lv_chart_hide_series.argtypes = __CArgList(
    chart=_ctypes.POINTER(obj_t),
    series=_ctypes.POINTER(chart_series_t),
    hide=bool_t
)
_lib_lvgl.py_lv_chart_hide_series.restype = None


def chart_hide_series(
    chart: obj_t,
    series: chart_series_t,
    hide: _type_bool_t
) -> None:
    chart = _convert_to_ctype(
        chart, 
        _lib_lvgl.py_lv_chart_hide_series.argtypes.chart
    )

    series = _convert_to_ctype(
        series, 
        _lib_lvgl.py_lv_chart_hide_series.argtypes.series
    )

    hide = _convert_to_ctype(
        hide, 
        _lib_lvgl.py_lv_chart_hide_series.argtypes.hide
    )

    _lib_lvgl.py_lv_chart_hide_series(chart, series, hide)


_lib_lvgl.py_lv_chart_set_series_color.argtypes = __CArgList(
    chart=_ctypes.POINTER(obj_t),
    series=_ctypes.POINTER(chart_series_t),
    color=color_t
)
_lib_lvgl.py_lv_chart_set_series_color.restype = None


def chart_set_series_color(
    chart: obj_t,
    series: chart_series_t,
    color: color_t
) -> None:
    chart = _convert_to_ctype(
        chart, 
        _lib_lvgl.py_lv_chart_set_series_color.argtypes.chart
    )

    series = _convert_to_ctype(
        series, 
        _lib_lvgl.py_lv_chart_set_series_color.argtypes.series
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_chart_set_series_color.argtypes.color
    )

    _lib_lvgl.py_lv_chart_set_series_color(chart, series, color)


_lib_lvgl.py_lv_chart_set_x_start_point.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    id=uint16_t
)
_lib_lvgl.py_lv_chart_set_x_start_point.restype = None


def chart_set_x_start_point(
    obj: obj_t,
    ser: chart_series_t,
    id: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_x_start_point.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_x_start_point.argtypes.ser
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_chart_set_x_start_point.argtypes.id
    )

    _lib_lvgl.py_lv_chart_set_x_start_point(obj, ser, id)


_lib_lvgl.py_lv_chart_get_series_next.argtypes = __CArgList(
    chart=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t)
)
_lib_lvgl.py_lv_chart_get_series_next.restype = _ctypes.POINTER(chart_series_t)


def chart_get_series_next(
    chart: obj_t,
    ser: chart_series_t
) -> chart_series_t:
    chart = _convert_to_ctype(
        chart, 
        _lib_lvgl.py_lv_chart_get_series_next.argtypes.chart
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_get_series_next.argtypes.ser
    )

    res = _lib_lvgl.py_lv_chart_get_series_next(chart, ser)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_series_next.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_series_next.restype)
    )


_lib_lvgl.py_lv_chart_add_cursor.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t,
    dir=dir_t
)
_lib_lvgl.py_lv_chart_add_cursor.restype = _ctypes.POINTER(chart_cursor_t)


def chart_add_cursor(
    obj: obj_t,
    color: color_t,
    dir: dir_t
) -> chart_cursor_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_add_cursor.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_chart_add_cursor.argtypes.color
    )

    dir = _convert_to_ctype(
        dir, 
        _lib_lvgl.py_lv_chart_add_cursor.argtypes.dir
    )

    res = _lib_lvgl.py_lv_chart_add_cursor(obj, color, dir)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_add_cursor.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_add_cursor.restype)
    )


_lib_lvgl.py_lv_chart_set_cursor_pos.argtypes = __CArgList(
    chart=_ctypes.POINTER(obj_t),
    cursor=_ctypes.POINTER(chart_cursor_t),
    pos=_ctypes.POINTER(point_t)
)
_lib_lvgl.py_lv_chart_set_cursor_pos.restype = None


def chart_set_cursor_pos(
    chart: obj_t,
    cursor: chart_cursor_t,
    pos: point_t
) -> None:
    chart = _convert_to_ctype(
        chart, 
        _lib_lvgl.py_lv_chart_set_cursor_pos.argtypes.chart
    )

    cursor = _convert_to_ctype(
        cursor, 
        _lib_lvgl.py_lv_chart_set_cursor_pos.argtypes.cursor
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_chart_set_cursor_pos.argtypes.pos
    )

    _lib_lvgl.py_lv_chart_set_cursor_pos(chart, cursor, pos)


_lib_lvgl.py_lv_chart_set_cursor_point.argtypes = __CArgList(
    chart=_ctypes.POINTER(obj_t),
    cursor=_ctypes.POINTER(chart_cursor_t),
    ser=_ctypes.POINTER(chart_series_t),
    point_id=uint16_t
)
_lib_lvgl.py_lv_chart_set_cursor_point.restype = None


def chart_set_cursor_point(
    chart: obj_t,
    cursor: chart_cursor_t,
    ser: chart_series_t,
    point_id: _type_uint16_t
) -> None:
    chart = _convert_to_ctype(
        chart, 
        _lib_lvgl.py_lv_chart_set_cursor_point.argtypes.chart
    )

    cursor = _convert_to_ctype(
        cursor, 
        _lib_lvgl.py_lv_chart_set_cursor_point.argtypes.cursor
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_cursor_point.argtypes.ser
    )

    point_id = _convert_to_ctype(
        point_id, 
        _lib_lvgl.py_lv_chart_set_cursor_point.argtypes.point_id
    )

    _lib_lvgl.py_lv_chart_set_cursor_point(chart, cursor, ser, point_id)


_lib_lvgl.py_lv_chart_get_cursor_point.argtypes = __CArgList(
    chart=_ctypes.POINTER(obj_t),
    cursor=_ctypes.POINTER(chart_cursor_t)
)
_lib_lvgl.py_lv_chart_get_cursor_point.restype = point_t


def chart_get_cursor_point(
    chart: obj_t,
    cursor: chart_cursor_t
) -> point_t:
    chart = _convert_to_ctype(
        chart, 
        _lib_lvgl.py_lv_chart_get_cursor_point.argtypes.chart
    )

    cursor = _convert_to_ctype(
        cursor, 
        _lib_lvgl.py_lv_chart_get_cursor_point.argtypes.cursor
    )

    res = _lib_lvgl.py_lv_chart_get_cursor_point(chart, cursor)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_cursor_point.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_cursor_point.restype)
    )


_lib_lvgl.py_lv_chart_set_all_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    value=coord_t
)
_lib_lvgl.py_lv_chart_set_all_value.restype = None


def chart_set_all_value(
    obj: obj_t,
    ser: chart_series_t,
    value: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_all_value.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_all_value.argtypes.ser
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_chart_set_all_value.argtypes.value
    )

    _lib_lvgl.py_lv_chart_set_all_value(obj, ser, value)


_lib_lvgl.py_lv_chart_set_next_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    value=coord_t
)
_lib_lvgl.py_lv_chart_set_next_value.restype = None


def chart_set_next_value(
    obj: obj_t,
    ser: chart_series_t,
    value: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_next_value.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_next_value.argtypes.ser
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_chart_set_next_value.argtypes.value
    )

    _lib_lvgl.py_lv_chart_set_next_value(obj, ser, value)


_lib_lvgl.py_lv_chart_set_next_value2.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    x_value=coord_t,
    y_value=coord_t
)
_lib_lvgl.py_lv_chart_set_next_value2.restype = None


def chart_set_next_value2(
    obj: obj_t,
    ser: chart_series_t,
    x_value: coord_t,
    y_value: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_next_value2.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_next_value2.argtypes.ser
    )

    x_value = _convert_to_ctype(
        x_value, 
        _lib_lvgl.py_lv_chart_set_next_value2.argtypes.x_value
    )

    y_value = _convert_to_ctype(
        y_value, 
        _lib_lvgl.py_lv_chart_set_next_value2.argtypes.y_value
    )

    _lib_lvgl.py_lv_chart_set_next_value2(obj, ser, x_value, y_value)


_lib_lvgl.py_lv_chart_set_value_by_id.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    id=uint16_t,
    value=coord_t
)
_lib_lvgl.py_lv_chart_set_value_by_id.restype = None


def chart_set_value_by_id(
    obj: obj_t,
    ser: chart_series_t,
    id: _type_uint16_t,
    value: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_value_by_id.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_value_by_id.argtypes.ser
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_chart_set_value_by_id.argtypes.id
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_chart_set_value_by_id.argtypes.value
    )

    _lib_lvgl.py_lv_chart_set_value_by_id(obj, ser, id, value)


_lib_lvgl.py_lv_chart_set_value_by_id2.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    id=uint16_t,
    x_value=coord_t,
    y_value=coord_t
)
_lib_lvgl.py_lv_chart_set_value_by_id2.restype = None


def chart_set_value_by_id2(
    obj: obj_t,
    ser: chart_series_t,
    id: _type_uint16_t,
    x_value: coord_t,
    y_value: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_value_by_id2.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_value_by_id2.argtypes.ser
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_chart_set_value_by_id2.argtypes.id
    )

    x_value = _convert_to_ctype(
        x_value, 
        _lib_lvgl.py_lv_chart_set_value_by_id2.argtypes.x_value
    )

    y_value = _convert_to_ctype(
        y_value, 
        _lib_lvgl.py_lv_chart_set_value_by_id2.argtypes.y_value
    )

    _lib_lvgl.py_lv_chart_set_value_by_id2(obj, ser, id, x_value, y_value)


_lib_lvgl.py_lv_chart_set_ext_y_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    array=_ctypes.POINTER(coord_t)
)
_lib_lvgl.py_lv_chart_set_ext_y_array.restype = None


def chart_set_ext_y_array(
    obj: obj_t,
    ser: chart_series_t,
    array: List[coord_t]
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_ext_y_array.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_ext_y_array.argtypes.ser
    )

    array = _convert_to_ctype(
        array, 
        _lib_lvgl.py_lv_chart_set_ext_y_array.argtypes.array
    )

    _lib_lvgl.py_lv_chart_set_ext_y_array(obj, ser, array)


_lib_lvgl.py_lv_chart_set_ext_x_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t),
    array=_ctypes.POINTER(coord_t)
)
_lib_lvgl.py_lv_chart_set_ext_x_array.restype = None


def chart_set_ext_x_array(
    obj: obj_t,
    ser: chart_series_t,
    array: List[coord_t]
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_set_ext_x_array.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_set_ext_x_array.argtypes.ser
    )

    array = _convert_to_ctype(
        array, 
        _lib_lvgl.py_lv_chart_set_ext_x_array.argtypes.array
    )

    _lib_lvgl.py_lv_chart_set_ext_x_array(obj, ser, array)


_lib_lvgl.py_lv_chart_get_y_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t)
)
_lib_lvgl.py_lv_chart_get_y_array.restype = _ctypes.POINTER(coord_t)


def chart_get_y_array(
    obj: obj_t,
    ser: chart_series_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_y_array.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_get_y_array.argtypes.ser
    )

    res = _lib_lvgl.py_lv_chart_get_y_array(obj, ser)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_y_array.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_y_array.restype)
    )


_lib_lvgl.py_lv_chart_get_x_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ser=_ctypes.POINTER(chart_series_t)
)
_lib_lvgl.py_lv_chart_get_x_array.restype = _ctypes.POINTER(coord_t)


def chart_get_x_array(
    obj: obj_t,
    ser: chart_series_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_x_array.argtypes.obj
    )

    ser = _convert_to_ctype(
        ser, 
        _lib_lvgl.py_lv_chart_get_x_array.argtypes.ser
    )

    res = _lib_lvgl.py_lv_chart_get_x_array(obj, ser)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_x_array.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_x_array.restype)
    )


_lib_lvgl.py_lv_chart_get_pressed_point.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_chart_get_pressed_point.restype = uint32_t


def chart_get_pressed_point(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_chart_get_pressed_point.argtypes.obj
    )

    res = _lib_lvgl.py_lv_chart_get_pressed_point(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_chart_get_pressed_point.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_chart_get_pressed_point.restype)
    )


_lib_lvgl.py_lv_checkbox_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_checkbox_create.restype = _ctypes.POINTER(obj_t)


def checkbox_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_checkbox_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_checkbox_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_checkbox_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_checkbox_create.restype)
    )


_lib_lvgl.py_lv_checkbox_set_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_checkbox_set_text.restype = None


def checkbox_set_text(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_checkbox_set_text.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_checkbox_set_text.argtypes.txt
    )

    _lib_lvgl.py_lv_checkbox_set_text(obj, txt)


_lib_lvgl.py_lv_checkbox_set_text_static.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_checkbox_set_text_static.restype = None


def checkbox_set_text_static(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_checkbox_set_text_static.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_checkbox_set_text_static.argtypes.txt
    )

    _lib_lvgl.py_lv_checkbox_set_text_static(obj, txt)


_lib_lvgl.py_lv_checkbox_get_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_checkbox_get_text.restype = _ctypes.POINTER(char_t)


def checkbox_get_text(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_checkbox_get_text.argtypes.obj
    )

    res = _lib_lvgl.py_lv_checkbox_get_text(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_checkbox_get_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_checkbox_get_text.restype)
    )


_lib_lvgl.py_lv_dropdown_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_create.restype = _ctypes.POINTER(obj_t)


def dropdown_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_dropdown_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_dropdown_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_create.restype)
    )


_lib_lvgl.py_lv_dropdown_set_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_dropdown_set_text.restype = None


def dropdown_set_text(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_text.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_dropdown_set_text.argtypes.txt
    )

    _lib_lvgl.py_lv_dropdown_set_text(obj, txt)


_lib_lvgl.py_lv_dropdown_set_options.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    options=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_dropdown_set_options.restype = None


def dropdown_set_options(
    obj: obj_t,
    options: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_options.argtypes.obj
    )

    options = _convert_to_ctype(
        options, 
        _lib_lvgl.py_lv_dropdown_set_options.argtypes.options
    )

    _lib_lvgl.py_lv_dropdown_set_options(obj, options)


_lib_lvgl.py_lv_dropdown_set_options_static.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    options=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_dropdown_set_options_static.restype = None


def dropdown_set_options_static(
    obj: obj_t,
    options: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_options_static.argtypes.obj
    )

    options = _convert_to_ctype(
        options, 
        _lib_lvgl.py_lv_dropdown_set_options_static.argtypes.options
    )

    _lib_lvgl.py_lv_dropdown_set_options_static(obj, options)


_lib_lvgl.py_lv_dropdown_add_option.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    option=_ctypes.POINTER(char_t),
    pos=uint32_t
)
_lib_lvgl.py_lv_dropdown_add_option.restype = None


def dropdown_add_option(
    obj: obj_t,
    option: _type_char_t,
    pos: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_add_option.argtypes.obj
    )

    option = _convert_to_ctype(
        option, 
        _lib_lvgl.py_lv_dropdown_add_option.argtypes.option
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_dropdown_add_option.argtypes.pos
    )

    _lib_lvgl.py_lv_dropdown_add_option(obj, option, pos)


_lib_lvgl.py_lv_dropdown_clear_options.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_clear_options.restype = None


def dropdown_clear_options(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_clear_options.argtypes.obj
    )

    _lib_lvgl.py_lv_dropdown_clear_options(obj)


_lib_lvgl.py_lv_dropdown_set_selected.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    sel_opt=uint16_t
)
_lib_lvgl.py_lv_dropdown_set_selected.restype = None


def dropdown_set_selected(
    obj: obj_t,
    sel_opt: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_selected.argtypes.obj
    )

    sel_opt = _convert_to_ctype(
        sel_opt, 
        _lib_lvgl.py_lv_dropdown_set_selected.argtypes.sel_opt
    )

    _lib_lvgl.py_lv_dropdown_set_selected(obj, sel_opt)


_lib_lvgl.py_lv_dropdown_set_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    dir=dir_t
)
_lib_lvgl.py_lv_dropdown_set_dir.restype = None


def dropdown_set_dir(obj: obj_t, dir: dir_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_dir.argtypes.obj
    )

    dir = _convert_to_ctype(
        dir, 
        _lib_lvgl.py_lv_dropdown_set_dir.argtypes.dir
    )

    _lib_lvgl.py_lv_dropdown_set_dir(obj, dir)


_lib_lvgl.py_lv_dropdown_set_symbol.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    symbol=void_t
)
_lib_lvgl.py_lv_dropdown_set_symbol.restype = None


def dropdown_set_symbol(
    obj: obj_t,
    symbol: void_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_symbol.argtypes.obj
    )

    symbol = _convert_to_ctype(
        symbol, 
        _lib_lvgl.py_lv_dropdown_set_symbol.argtypes.symbol
    )

    _lib_lvgl.py_lv_dropdown_set_symbol(obj, symbol)


_lib_lvgl.py_lv_dropdown_set_selected_highlight.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_dropdown_set_selected_highlight.restype = None


def dropdown_set_selected_highlight(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_set_selected_highlight.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_dropdown_set_selected_highlight.argtypes.en
    )

    _lib_lvgl.py_lv_dropdown_set_selected_highlight(obj, en)


_lib_lvgl.py_lv_dropdown_get_list.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_list.restype = _ctypes.POINTER(obj_t)


def dropdown_get_list(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_list.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_list(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_list.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_list.restype)
    )


_lib_lvgl.py_lv_dropdown_get_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_text.restype = _ctypes.POINTER(char_t)


def dropdown_get_text(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_text.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_text(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_text.restype)
    )


_lib_lvgl.py_lv_dropdown_get_options.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_options.restype = _ctypes.POINTER(char_t)


def dropdown_get_options(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_options.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_options(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_options.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_options.restype)
    )


_lib_lvgl.py_lv_dropdown_get_selected.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_selected.restype = uint16_t


def dropdown_get_selected(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_selected.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_selected(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_selected.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_selected.restype)
    )


_lib_lvgl.py_lv_dropdown_get_option_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_option_cnt.restype = uint16_t


def dropdown_get_option_cnt(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_option_cnt.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_option_cnt(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_option_cnt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_option_cnt.restype)
    )


_lib_lvgl.py_lv_dropdown_get_selected_str.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    buf=_ctypes.POINTER(char_t),
    buf_size=uint32_t
)
_lib_lvgl.py_lv_dropdown_get_selected_str.restype = None


def dropdown_get_selected_str(
    obj: obj_t,
    buf: _type_char_t,
    buf_size: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_selected_str.argtypes.obj
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_dropdown_get_selected_str.argtypes.buf
    )

    buf_size = _convert_to_ctype(
        buf_size, 
        _lib_lvgl.py_lv_dropdown_get_selected_str.argtypes.buf_size
    )

    _lib_lvgl.py_lv_dropdown_get_selected_str(obj, buf, buf_size)


_lib_lvgl.py_lv_dropdown_get_option_index.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    option=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_dropdown_get_option_index.restype = int32_t


def dropdown_get_option_index(
    obj: obj_t,
    option: _type_char_t
) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_option_index.argtypes.obj
    )

    option = _convert_to_ctype(
        option, 
        _lib_lvgl.py_lv_dropdown_get_option_index.argtypes.option
    )

    res = _lib_lvgl.py_lv_dropdown_get_option_index(obj, option)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_option_index.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_option_index.restype)
    )


_lib_lvgl.py_lv_dropdown_get_symbol.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_symbol.restype = _ctypes.POINTER(char_t)


def dropdown_get_symbol(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_symbol.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_symbol(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_symbol.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_symbol.restype)
    )


_lib_lvgl.py_lv_dropdown_get_selected_highlight.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_selected_highlight.restype = bool_t


def dropdown_get_selected_highlight(
    obj: obj_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_selected_highlight.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_selected_highlight(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_selected_highlight.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_selected_highlight.restype)
    )


_lib_lvgl.py_lv_dropdown_get_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_get_dir.restype = dir_t


def dropdown_get_dir(obj: obj_t) -> dir_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_get_dir.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_get_dir(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_get_dir.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_get_dir.restype)
    )


_lib_lvgl.py_lv_dropdown_open.argtypes = __CArgList(
    dropdown_obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_open.restype = None


def dropdown_open(dropdown_obj: obj_t) -> None:
    dropdown_obj = _convert_to_ctype(
        dropdown_obj, 
        _lib_lvgl.py_lv_dropdown_open.argtypes.dropdown_obj
    )

    _lib_lvgl.py_lv_dropdown_open(dropdown_obj)


_lib_lvgl.py_lv_dropdown_close.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_close.restype = None


def dropdown_close(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_close.argtypes.obj
    )

    _lib_lvgl.py_lv_dropdown_close(obj)


_lib_lvgl.py_lv_dropdown_is_open.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_dropdown_is_open.restype = bool_t


def dropdown_is_open(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_dropdown_is_open.argtypes.obj
    )

    res = _lib_lvgl.py_lv_dropdown_is_open(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_dropdown_is_open.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_dropdown_is_open.restype)
    )


_lib_lvgl.py_lv_imgbtn_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_imgbtn_create.restype = _ctypes.POINTER(obj_t)


def imgbtn_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_imgbtn_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_imgbtn_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_imgbtn_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_imgbtn_create.restype)
    )


_lib_lvgl.py_lv_imgbtn_set_src.argtypes = __CArgList(
    imgbtn=_ctypes.POINTER(obj_t),
    state=imgbtn_state_t,
    src_left=void_t,
    src_mid=void_t,
    src_right=void_t
)
_lib_lvgl.py_lv_imgbtn_set_src.restype = None


def imgbtn_set_src(
    imgbtn: obj_t,
    state: _type_imgbtn_state_t,
    src_left: void_t,
    src_mid: void_t,
    src_right: void_t
) -> None:
    imgbtn = _convert_to_ctype(
        imgbtn, 
        _lib_lvgl.py_lv_imgbtn_set_src.argtypes.imgbtn
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_imgbtn_set_src.argtypes.state
    )

    src_left = _convert_to_ctype(
        src_left, 
        _lib_lvgl.py_lv_imgbtn_set_src.argtypes.src_left
    )

    src_mid = _convert_to_ctype(
        src_mid, 
        _lib_lvgl.py_lv_imgbtn_set_src.argtypes.src_mid
    )

    src_right = _convert_to_ctype(
        src_right, 
        _lib_lvgl.py_lv_imgbtn_set_src.argtypes.src_right
    )

    _lib_lvgl.py_lv_imgbtn_set_src(imgbtn, state, src_left, src_mid, src_right)


_lib_lvgl.py_lv_imgbtn_set_state.argtypes = __CArgList(
    imgbtn=_ctypes.POINTER(obj_t),
    state=imgbtn_state_t
)
_lib_lvgl.py_lv_imgbtn_set_state.restype = None


def imgbtn_set_state(
    imgbtn: obj_t,
    state: _type_imgbtn_state_t
) -> None:
    imgbtn = _convert_to_ctype(
        imgbtn, 
        _lib_lvgl.py_lv_imgbtn_set_state.argtypes.imgbtn
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_imgbtn_set_state.argtypes.state
    )

    _lib_lvgl.py_lv_imgbtn_set_state(imgbtn, state)


_lib_lvgl.py_lv_imgbtn_get_src_left.argtypes = __CArgList(
    imgbtn=_ctypes.POINTER(obj_t),
    state=imgbtn_state_t
)
_lib_lvgl.py_lv_imgbtn_get_src_left.restype = void_t


def imgbtn_get_src_left(
    imgbtn: obj_t,
    state: _type_imgbtn_state_t
) -> void_t:
    imgbtn = _convert_to_ctype(
        imgbtn, 
        _lib_lvgl.py_lv_imgbtn_get_src_left.argtypes.imgbtn
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_imgbtn_get_src_left.argtypes.state
    )

    res = _lib_lvgl.py_lv_imgbtn_get_src_left(imgbtn, state)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_imgbtn_get_src_left.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_imgbtn_get_src_left.restype)
    )


_lib_lvgl.py_lv_imgbtn_get_src_middle.argtypes = __CArgList(
    imgbtn=_ctypes.POINTER(obj_t),
    state=imgbtn_state_t
)
_lib_lvgl.py_lv_imgbtn_get_src_middle.restype = void_t


def imgbtn_get_src_middle(
    imgbtn: obj_t,
    state: _type_imgbtn_state_t
) -> void_t:
    imgbtn = _convert_to_ctype(
        imgbtn, 
        _lib_lvgl.py_lv_imgbtn_get_src_middle.argtypes.imgbtn
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_imgbtn_get_src_middle.argtypes.state
    )

    res = _lib_lvgl.py_lv_imgbtn_get_src_middle(imgbtn, state)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_imgbtn_get_src_middle.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_imgbtn_get_src_middle.restype)
    )


_lib_lvgl.py_lv_imgbtn_get_src_right.argtypes = __CArgList(
    imgbtn=_ctypes.POINTER(obj_t),
    state=imgbtn_state_t
)
_lib_lvgl.py_lv_imgbtn_get_src_right.restype = void_t


def imgbtn_get_src_right(
    imgbtn: obj_t,
    state: _type_imgbtn_state_t
) -> void_t:
    imgbtn = _convert_to_ctype(
        imgbtn, 
        _lib_lvgl.py_lv_imgbtn_get_src_right.argtypes.imgbtn
    )

    state = _convert_to_ctype(
        state, 
        _lib_lvgl.py_lv_imgbtn_get_src_right.argtypes.state
    )

    res = _lib_lvgl.py_lv_imgbtn_get_src_right(imgbtn, state)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_imgbtn_get_src_right.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_imgbtn_get_src_right.restype)
    )


_lib_lvgl.py_lv_keyboard_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_keyboard_create.restype = _ctypes.POINTER(obj_t)


def keyboard_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_keyboard_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_keyboard_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_keyboard_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_keyboard_create.restype)
    )


_lib_lvgl.py_lv_keyboard_set_textarea.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t),
    ta=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_keyboard_set_textarea.restype = None


def keyboard_set_textarea(
    kb: obj_t,
    ta: obj_t
) -> None:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_set_textarea.argtypes.kb
    )

    ta = _convert_to_ctype(
        ta, 
        _lib_lvgl.py_lv_keyboard_set_textarea.argtypes.ta
    )

    _lib_lvgl.py_lv_keyboard_set_textarea(kb, ta)


_lib_lvgl.py_lv_keyboard_set_mode.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t),
    mode=keyboard_mode_t
)
_lib_lvgl.py_lv_keyboard_set_mode.restype = None


def keyboard_set_mode(
    kb: obj_t,
    mode: keyboard_mode_t
) -> None:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_set_mode.argtypes.kb
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_keyboard_set_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_keyboard_set_mode(kb, mode)


_lib_lvgl.py_lv_keyboard_set_popovers.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_keyboard_set_popovers.restype = None


def keyboard_set_popovers(
    kb: obj_t,
    en: _type_bool_t
) -> None:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_set_popovers.argtypes.kb
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_keyboard_set_popovers.argtypes.en
    )

    _lib_lvgl.py_lv_keyboard_set_popovers(kb, en)


_lib_lvgl.py_lv_keyboard_set_map.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t),
    mode=keyboard_mode_t,
    map=_ctypes.POINTER(char_t),
    ctrl_map=_ctypes.POINTER(btnmatrix_ctrl_t)
)
_lib_lvgl.py_lv_keyboard_set_map.restype = None


def keyboard_set_map(
    kb: obj_t,
    mode: keyboard_mode_t,
    map: List[char_t],
    ctrl_map: List[btnmatrix_ctrl_t]
) -> None:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_set_map.argtypes.kb
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_keyboard_set_map.argtypes.mode
    )

    map = _convert_to_ctype(
        map, 
        _lib_lvgl.py_lv_keyboard_set_map.argtypes.map
    )

    ctrl_map = _convert_to_ctype(
        ctrl_map, 
        _lib_lvgl.py_lv_keyboard_set_map.argtypes.ctrl_map
    )

    _lib_lvgl.py_lv_keyboard_set_map(kb, mode, map, ctrl_map)


_lib_lvgl.py_lv_keyboard_get_textarea.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_keyboard_get_textarea.restype = _ctypes.POINTER(obj_t)


def keyboard_get_textarea(kb: obj_t) -> obj_t:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_get_textarea.argtypes.kb
    )

    res = _lib_lvgl.py_lv_keyboard_get_textarea(kb)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_keyboard_get_textarea.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_keyboard_get_textarea.restype)
    )


_lib_lvgl.py_lv_keyboard_get_mode.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_keyboard_get_mode.restype = keyboard_mode_t


def keyboard_get_mode(kb: obj_t) -> keyboard_mode_t:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_get_mode.argtypes.kb
    )

    res = _lib_lvgl.py_lv_keyboard_get_mode(kb)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_keyboard_get_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_keyboard_get_mode.restype)
    )


_lib_lvgl.py_lv_btnmatrix_get_popovers.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_btnmatrix_get_popovers.restype = bool_t


def btnmatrix_get_popovers(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_btnmatrix_get_popovers.argtypes.obj
    )

    res = _lib_lvgl.py_lv_btnmatrix_get_popovers(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_btnmatrix_get_popovers.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_btnmatrix_get_popovers.restype)
    )


_lib_lvgl.py_lv_keyboard_get_map_array.argtypes = __CArgList(
    kb=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_keyboard_get_map_array.restype = _ctypes.POINTER(_ctypes.POINTER(char_t))


def keyboard_get_map_array(kb: obj_t) -> char_t:
    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_keyboard_get_map_array.argtypes.kb
    )

    res = _lib_lvgl.py_lv_keyboard_get_map_array(kb)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_keyboard_get_map_array.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_keyboard_get_map_array.restype)
    )


_lib_lvgl.py_lv_keyboard_get_selected_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_keyboard_get_selected_btn.restype = uint16_t


def keyboard_get_selected_btn(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_keyboard_get_selected_btn.argtypes.obj
    )

    res = _lib_lvgl.py_lv_keyboard_get_selected_btn(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_keyboard_get_selected_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_keyboard_get_selected_btn.restype)
    )


_lib_lvgl.py_lv_keyboard_get_btn_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    btn_id=uint16_t
)
_lib_lvgl.py_lv_keyboard_get_btn_text.restype = _ctypes.POINTER(char_t)


def keyboard_get_btn_text(
    obj: obj_t,
    btn_id: _type_uint16_t
) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_keyboard_get_btn_text.argtypes.obj
    )

    btn_id = _convert_to_ctype(
        btn_id, 
        _lib_lvgl.py_lv_keyboard_get_btn_text.argtypes.btn_id
    )

    res = _lib_lvgl.py_lv_keyboard_get_btn_text(obj, btn_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_keyboard_get_btn_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_keyboard_get_btn_text.restype)
    )


_lib_lvgl.py_lv_keyboard_def_event_cb.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_keyboard_def_event_cb.restype = None


def keyboard_def_event_cb(e: event_t) -> None:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_keyboard_def_event_cb.argtypes.e
    )

    _lib_lvgl.py_lv_keyboard_def_event_cb(e)


_lib_lvgl.py_lv_led_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_led_create.restype = _ctypes.POINTER(obj_t)


def led_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_led_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_led_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_led_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_led_create.restype)
    )


_lib_lvgl.py_lv_led_set_color.argtypes = __CArgList(
    led=_ctypes.POINTER(obj_t),
    color=color_t
)
_lib_lvgl.py_lv_led_set_color.restype = None


def led_set_color(led: obj_t, color: color_t) -> None:
    led = _convert_to_ctype(
        led, 
        _lib_lvgl.py_lv_led_set_color.argtypes.led
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_led_set_color.argtypes.color
    )

    _lib_lvgl.py_lv_led_set_color(led, color)


_lib_lvgl.py_lv_led_set_brightness.argtypes = __CArgList(
    led=_ctypes.POINTER(obj_t),
    bright=uint8_t
)
_lib_lvgl.py_lv_led_set_brightness.restype = None


def led_set_brightness(
    led: obj_t,
    bright: _type_uint8_t
) -> None:
    led = _convert_to_ctype(
        led, 
        _lib_lvgl.py_lv_led_set_brightness.argtypes.led
    )

    bright = _convert_to_ctype(
        bright, 
        _lib_lvgl.py_lv_led_set_brightness.argtypes.bright
    )

    _lib_lvgl.py_lv_led_set_brightness(led, bright)


_lib_lvgl.py_lv_led_on.argtypes = __CArgList(
    led=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_led_on.restype = None


def led_on(led: obj_t) -> None:
    led = _convert_to_ctype(
        led, 
        _lib_lvgl.py_lv_led_on.argtypes.led
    )

    _lib_lvgl.py_lv_led_on(led)


_lib_lvgl.py_lv_led_off.argtypes = __CArgList(
    led=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_led_off.restype = None


def led_off(led: obj_t) -> None:
    led = _convert_to_ctype(
        led, 
        _lib_lvgl.py_lv_led_off.argtypes.led
    )

    _lib_lvgl.py_lv_led_off(led)


_lib_lvgl.py_lv_led_toggle.argtypes = __CArgList(
    led=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_led_toggle.restype = None


def led_toggle(led: obj_t) -> None:
    led = _convert_to_ctype(
        led, 
        _lib_lvgl.py_lv_led_toggle.argtypes.led
    )

    _lib_lvgl.py_lv_led_toggle(led)


_lib_lvgl.py_lv_led_get_brightness.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_led_get_brightness.restype = uint8_t


def led_get_brightness(obj: obj_t) -> uint8_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_led_get_brightness.argtypes.obj
    )

    res = _lib_lvgl.py_lv_led_get_brightness(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_led_get_brightness.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_led_get_brightness.restype)
    )


_lib_lvgl.py_lv_line_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_line_create.restype = _ctypes.POINTER(obj_t)


def line_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_line_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_line_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_line_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_line_create.restype)
    )


_lib_lvgl.py_lv_line_set_points.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    points=_ctypes.POINTER(point_t),
    point_num=uint16_t
)
_lib_lvgl.py_lv_line_set_points.restype = None


def line_set_points(
    obj: obj_t,
    points: List[point_t],
    point_num: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_line_set_points.argtypes.obj
    )

    points = _convert_to_ctype(
        points, 
        _lib_lvgl.py_lv_line_set_points.argtypes.points
    )

    point_num = _convert_to_ctype(
        point_num, 
        _lib_lvgl.py_lv_line_set_points.argtypes.point_num
    )

    _lib_lvgl.py_lv_line_set_points(obj, points, point_num)


_lib_lvgl.py_lv_line_set_y_invert.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_line_set_y_invert.restype = None


def line_set_y_invert(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_line_set_y_invert.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_line_set_y_invert.argtypes.en
    )

    _lib_lvgl.py_lv_line_set_y_invert(obj, en)


_lib_lvgl.py_lv_line_get_y_invert.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_line_get_y_invert.restype = bool_t


def line_get_y_invert(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_line_get_y_invert.argtypes.obj
    )

    res = _lib_lvgl.py_lv_line_get_y_invert(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_line_get_y_invert.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_line_get_y_invert.restype)
    )


_lib_lvgl.py_lv_list_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_list_create.restype = _ctypes.POINTER(obj_t)


def list_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_list_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_list_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_list_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_list_create.restype)
    )


_lib_lvgl.py_lv_list_add_text.argtypes = __CArgList(
    list=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_list_add_text.restype = _ctypes.POINTER(obj_t)


def list_add_text(
    list: obj_t,
    txt: _type_char_t
) -> obj_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_list_add_text.argtypes.list
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_list_add_text.argtypes.txt
    )

    res = _lib_lvgl.py_lv_list_add_text(list, txt)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_list_add_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_list_add_text.restype)
    )


_lib_lvgl.py_lv_list_add_btn.argtypes = __CArgList(
    list=_ctypes.POINTER(obj_t),
    icon=void_t,
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_list_add_btn.restype = _ctypes.POINTER(obj_t)


def list_add_btn(
    list: obj_t,
    icon: void_t,
    txt: _type_char_t
) -> obj_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_list_add_btn.argtypes.list
    )

    icon = _convert_to_ctype(
        icon, 
        _lib_lvgl.py_lv_list_add_btn.argtypes.icon
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_list_add_btn.argtypes.txt
    )

    res = _lib_lvgl.py_lv_list_add_btn(list, icon, txt)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_list_add_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_list_add_btn.restype)
    )


_lib_lvgl.py_lv_list_get_btn_text.argtypes = __CArgList(
    list=_ctypes.POINTER(obj_t),
    btn=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_list_get_btn_text.restype = _ctypes.POINTER(char_t)


def list_get_btn_text(list: obj_t, btn: obj_t) -> char_t:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_list_get_btn_text.argtypes.list
    )

    btn = _convert_to_ctype(
        btn, 
        _lib_lvgl.py_lv_list_get_btn_text.argtypes.btn
    )

    res = _lib_lvgl.py_lv_list_get_btn_text(list, btn)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_list_get_btn_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_list_get_btn_text.restype)
    )


_lib_lvgl.py_lv_list_set_btn_text.argtypes = __CArgList(
    list=_ctypes.POINTER(obj_t),
    btn=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_list_set_btn_text.restype = None


def list_set_btn_text(
    list: obj_t,
    btn: obj_t,
    txt: _type_char_t
) -> None:
    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_list_set_btn_text.argtypes.list
    )

    btn = _convert_to_ctype(
        btn, 
        _lib_lvgl.py_lv_list_set_btn_text.argtypes.btn
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_list_set_btn_text.argtypes.txt
    )

    _lib_lvgl.py_lv_list_set_btn_text(list, btn, txt)


_lib_lvgl.py_lv_menu_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_create.restype = _ctypes.POINTER(obj_t)


def menu_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_menu_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_menu_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_create.restype)
    )


_lib_lvgl.py_lv_menu_page_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t),
    title=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_menu_page_create.restype = _ctypes.POINTER(obj_t)


def menu_page_create(
    parent: obj_t,
    title: _type_char_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_menu_page_create.argtypes.parent
    )

    title = _convert_to_ctype(
        title, 
        _lib_lvgl.py_lv_menu_page_create.argtypes.title
    )

    res = _lib_lvgl.py_lv_menu_page_create(parent, title)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_page_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_page_create.restype)
    )


_lib_lvgl.py_lv_menu_cont_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_cont_create.restype = _ctypes.POINTER(obj_t)


def menu_cont_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_menu_cont_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_menu_cont_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_cont_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_cont_create.restype)
    )


_lib_lvgl.py_lv_menu_section_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_section_create.restype = _ctypes.POINTER(obj_t)


def menu_section_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_menu_section_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_menu_section_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_section_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_section_create.restype)
    )


_lib_lvgl.py_lv_menu_separator_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_separator_create.restype = _ctypes.POINTER(obj_t)


def menu_separator_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_menu_separator_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_menu_separator_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_separator_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_separator_create.restype)
    )


_lib_lvgl.py_lv_menu_set_page.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    page=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_set_page.restype = None


def menu_set_page(obj: obj_t, page: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_set_page.argtypes.obj
    )

    page = _convert_to_ctype(
        page, 
        _lib_lvgl.py_lv_menu_set_page.argtypes.page
    )

    _lib_lvgl.py_lv_menu_set_page(obj, page)


_lib_lvgl.py_lv_menu_set_page_title.argtypes = __CArgList(
    page=_ctypes.POINTER(obj_t),
    title=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_menu_set_page_title.restype = None


def menu_set_page_title(
    page: obj_t,
    title: _type_char_t
) -> None:
    page = _convert_to_ctype(
        page, 
        _lib_lvgl.py_lv_menu_set_page_title.argtypes.page
    )

    title = _convert_to_ctype(
        title, 
        _lib_lvgl.py_lv_menu_set_page_title.argtypes.title
    )

    _lib_lvgl.py_lv_menu_set_page_title(page, title)


_lib_lvgl.py_lv_menu_set_page_title_static.argtypes = __CArgList(
    page=_ctypes.POINTER(obj_t),
    title=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_menu_set_page_title_static.restype = None


def menu_set_page_title_static(
    page: obj_t,
    title: _type_char_t
) -> None:
    page = _convert_to_ctype(
        page, 
        _lib_lvgl.py_lv_menu_set_page_title_static.argtypes.page
    )

    title = _convert_to_ctype(
        title, 
        _lib_lvgl.py_lv_menu_set_page_title_static.argtypes.title
    )

    _lib_lvgl.py_lv_menu_set_page_title_static(page, title)


_lib_lvgl.py_lv_menu_set_sidebar_page.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    page=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_set_sidebar_page.restype = None


def menu_set_sidebar_page(
    obj: obj_t,
    page: obj_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_set_sidebar_page.argtypes.obj
    )

    page = _convert_to_ctype(
        page, 
        _lib_lvgl.py_lv_menu_set_sidebar_page.argtypes.page
    )

    _lib_lvgl.py_lv_menu_set_sidebar_page(obj, page)


_lib_lvgl.py_lv_menu_set_mode_header.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode_header=menu_mode_header_t
)
_lib_lvgl.py_lv_menu_set_mode_header.restype = None


def menu_set_mode_header(
    obj: obj_t,
    mode_header: menu_mode_header_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_set_mode_header.argtypes.obj
    )

    mode_header = _convert_to_ctype(
        mode_header, 
        _lib_lvgl.py_lv_menu_set_mode_header.argtypes.mode_header
    )

    _lib_lvgl.py_lv_menu_set_mode_header(obj, mode_header)


_lib_lvgl.py_lv_menu_set_mode_root_back_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode_root_back_btn=menu_mode_root_back_btn_t
)
_lib_lvgl.py_lv_menu_set_mode_root_back_btn.restype = None


def menu_set_mode_root_back_btn(
    obj: obj_t,
    mode_root_back_btn: menu_mode_root_back_btn_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_set_mode_root_back_btn.argtypes.obj
    )

    mode_root_back_btn = _convert_to_ctype(
        mode_root_back_btn, 
        _lib_lvgl.py_lv_menu_set_mode_root_back_btn.argtypes.mode_root_back_btn
    )

    _lib_lvgl.py_lv_menu_set_mode_root_back_btn(obj, mode_root_back_btn)


_lib_lvgl.py_lv_menu_set_load_page_event.argtypes = __CArgList(
    menu=_ctypes.POINTER(obj_t),
    obj=_ctypes.POINTER(obj_t),
    page=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_set_load_page_event.restype = None


def menu_set_load_page_event(
    menu: obj_t,
    obj: obj_t,
    page: obj_t
) -> None:
    menu = _convert_to_ctype(
        menu, 
        _lib_lvgl.py_lv_menu_set_load_page_event.argtypes.menu
    )

    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_set_load_page_event.argtypes.obj
    )

    page = _convert_to_ctype(
        page, 
        _lib_lvgl.py_lv_menu_set_load_page_event.argtypes.page
    )

    _lib_lvgl.py_lv_menu_set_load_page_event(menu, obj, page)


_lib_lvgl.py_lv_menu_get_cur_main_page.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_get_cur_main_page.restype = _ctypes.POINTER(obj_t)


def menu_get_cur_main_page(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_get_cur_main_page.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_get_cur_main_page(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_get_cur_main_page.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_get_cur_main_page.restype)
    )


_lib_lvgl.py_lv_menu_get_cur_sidebar_page.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_get_cur_sidebar_page.restype = _ctypes.POINTER(obj_t)


def menu_get_cur_sidebar_page(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_get_cur_sidebar_page.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_get_cur_sidebar_page(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_get_cur_sidebar_page.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_get_cur_sidebar_page.restype)
    )


_lib_lvgl.py_lv_menu_get_main_header.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_get_main_header.restype = _ctypes.POINTER(obj_t)


def menu_get_main_header(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_get_main_header.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_get_main_header(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_get_main_header.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_get_main_header.restype)
    )


_lib_lvgl.py_lv_menu_get_main_header_back_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_get_main_header_back_btn.restype = _ctypes.POINTER(obj_t)


def menu_get_main_header_back_btn(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_get_main_header_back_btn.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_get_main_header_back_btn(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_get_main_header_back_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_get_main_header_back_btn.restype)
    )


_lib_lvgl.py_lv_menu_get_sidebar_header.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_get_sidebar_header.restype = _ctypes.POINTER(obj_t)


def menu_get_sidebar_header(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_get_sidebar_header.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_get_sidebar_header(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_get_sidebar_header.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_get_sidebar_header.restype)
    )


_lib_lvgl.py_lv_menu_get_sidebar_header_back_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_get_sidebar_header_back_btn.restype = _ctypes.POINTER(obj_t)


def menu_get_sidebar_header_back_btn(
    obj: obj_t
) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_get_sidebar_header_back_btn.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_get_sidebar_header_back_btn(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_get_sidebar_header_back_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_get_sidebar_header_back_btn.restype)
    )


_lib_lvgl.py_lv_menu_back_btn_is_root.argtypes = __CArgList(
    menu=_ctypes.POINTER(obj_t),
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_back_btn_is_root.restype = bool_t


def menu_back_btn_is_root(
    menu: obj_t,
    obj: obj_t
) -> bool_t:
    menu = _convert_to_ctype(
        menu, 
        _lib_lvgl.py_lv_menu_back_btn_is_root.argtypes.menu
    )

    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_back_btn_is_root.argtypes.obj
    )

    res = _lib_lvgl.py_lv_menu_back_btn_is_root(menu, obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_menu_back_btn_is_root.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_menu_back_btn_is_root.restype)
    )


_lib_lvgl.py_lv_menu_clear_history.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_menu_clear_history.restype = None


def menu_clear_history(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_menu_clear_history.argtypes.obj
    )

    _lib_lvgl.py_lv_menu_clear_history(obj)


_lib_lvgl.py_lv_meter_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_meter_create.restype = _ctypes.POINTER(obj_t)


def meter_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_meter_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_meter_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_meter_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_meter_create.restype)
    )


_lib_lvgl.py_lv_meter_set_scale_ticks.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    cnt=uint16_t,
    width=uint16_t,
    len=uint16_t,
    color=color_t
)
_lib_lvgl.py_lv_meter_set_scale_ticks.restype = None


def meter_set_scale_ticks(
    obj: obj_t,
    cnt: _type_uint16_t,
    width: _type_uint16_t,
    len: _type_uint16_t,
    color: color_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_set_scale_ticks.argtypes.obj
    )

    cnt = _convert_to_ctype(
        cnt, 
        _lib_lvgl.py_lv_meter_set_scale_ticks.argtypes.cnt
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_meter_set_scale_ticks.argtypes.width
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py_lv_meter_set_scale_ticks.argtypes.len
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_meter_set_scale_ticks.argtypes.color
    )

    _lib_lvgl.py_lv_meter_set_scale_ticks(obj, cnt, width, len, color)


_lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    nth=uint16_t,
    width=uint16_t,
    len=uint16_t,
    color=color_t,
    label_gap=int16_t
)
_lib_lvgl.py_lv_meter_set_scale_major_ticks.restype = None


def meter_set_scale_major_ticks(
    obj: obj_t,
    nth: _type_uint16_t,
    width: _type_uint16_t,
    len: _type_uint16_t,
    color: color_t,
    label_gap: _type_int16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes.obj
    )

    nth = _convert_to_ctype(
        nth, 
        _lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes.nth
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes.width
    )

    len = _convert_to_ctype(
        len, 
        _lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes.len
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes.color
    )

    label_gap = _convert_to_ctype(
        label_gap, 
        _lib_lvgl.py_lv_meter_set_scale_major_ticks.argtypes.label_gap
    )

    _lib_lvgl.py_lv_meter_set_scale_major_ticks(obj, nth, width, len, color, label_gap)


_lib_lvgl.py_lv_meter_set_scale_range.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    min=int32_t,
    max=int32_t,
    angle_range=uint32_t,
    rotation=uint32_t
)
_lib_lvgl.py_lv_meter_set_scale_range.restype = None


def meter_set_scale_range(
    obj: obj_t,
    min: _type_int32_t,
    max: _type_int32_t,
    angle_range: _type_uint32_t,
    rotation: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_set_scale_range.argtypes.obj
    )

    min = _convert_to_ctype(
        min, 
        _lib_lvgl.py_lv_meter_set_scale_range.argtypes.min
    )

    max = _convert_to_ctype(
        max, 
        _lib_lvgl.py_lv_meter_set_scale_range.argtypes.max
    )

    angle_range = _convert_to_ctype(
        angle_range, 
        _lib_lvgl.py_lv_meter_set_scale_range.argtypes.angle_range
    )

    rotation = _convert_to_ctype(
        rotation, 
        _lib_lvgl.py_lv_meter_set_scale_range.argtypes.rotation
    )

    _lib_lvgl.py_lv_meter_set_scale_range(obj, min, max, angle_range, rotation)


_lib_lvgl.py_lv_meter_add_needle_line.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    width=uint16_t,
    color=color_t,
    r_mod=int16_t
)
_lib_lvgl.py_lv_meter_add_needle_line.restype = _ctypes.POINTER(meter_indicator_t)


def meter_add_needle_line(
    obj: obj_t,
    width: _type_uint16_t,
    color: color_t,
    r_mod: _type_int16_t
) -> meter_indicator_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_add_needle_line.argtypes.obj
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_meter_add_needle_line.argtypes.width
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_meter_add_needle_line.argtypes.color
    )

    r_mod = _convert_to_ctype(
        r_mod, 
        _lib_lvgl.py_lv_meter_add_needle_line.argtypes.r_mod
    )

    res = _lib_lvgl.py_lv_meter_add_needle_line(obj, width, color, r_mod)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_meter_add_needle_line.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_meter_add_needle_line.restype)
    )


_lib_lvgl.py_lv_meter_add_needle_img.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    src=void_t,
    pivot_x=coord_t,
    pivot_y=coord_t
)
_lib_lvgl.py_lv_meter_add_needle_img.restype = _ctypes.POINTER(meter_indicator_t)


def meter_add_needle_img(
    obj: obj_t,
    src: void_t,
    pivot_x: coord_t,
    pivot_y: coord_t
) -> meter_indicator_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_add_needle_img.argtypes.obj
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_meter_add_needle_img.argtypes.src
    )

    pivot_x = _convert_to_ctype(
        pivot_x, 
        _lib_lvgl.py_lv_meter_add_needle_img.argtypes.pivot_x
    )

    pivot_y = _convert_to_ctype(
        pivot_y, 
        _lib_lvgl.py_lv_meter_add_needle_img.argtypes.pivot_y
    )

    res = _lib_lvgl.py_lv_meter_add_needle_img(obj, src, pivot_x, pivot_y)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_meter_add_needle_img.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_meter_add_needle_img.restype)
    )


_lib_lvgl.py_lv_meter_add_arc.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    width=uint16_t,
    color=color_t,
    r_mod=int16_t
)
_lib_lvgl.py_lv_meter_add_arc.restype = _ctypes.POINTER(meter_indicator_t)


def meter_add_arc(
    obj: obj_t,
    width: _type_uint16_t,
    color: color_t,
    r_mod: _type_int16_t
) -> meter_indicator_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_add_arc.argtypes.obj
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_meter_add_arc.argtypes.width
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_meter_add_arc.argtypes.color
    )

    r_mod = _convert_to_ctype(
        r_mod, 
        _lib_lvgl.py_lv_meter_add_arc.argtypes.r_mod
    )

    res = _lib_lvgl.py_lv_meter_add_arc(obj, width, color, r_mod)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_meter_add_arc.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_meter_add_arc.restype)
    )


_lib_lvgl.py_lv_meter_add_scale_lines.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color_start=color_t,
    color_end=color_t,
    local=bool_t,
    width_mod=int16_t
)
_lib_lvgl.py_lv_meter_add_scale_lines.restype = _ctypes.POINTER(meter_indicator_t)


def meter_add_scale_lines(
    obj: obj_t,
    color_start: color_t,
    color_end: color_t,
    local: _type_bool_t,
    width_mod: _type_int16_t
) -> meter_indicator_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_add_scale_lines.argtypes.obj
    )

    color_start = _convert_to_ctype(
        color_start, 
        _lib_lvgl.py_lv_meter_add_scale_lines.argtypes.color_start
    )

    color_end = _convert_to_ctype(
        color_end, 
        _lib_lvgl.py_lv_meter_add_scale_lines.argtypes.color_end
    )

    local = _convert_to_ctype(
        local, 
        _lib_lvgl.py_lv_meter_add_scale_lines.argtypes.local
    )

    width_mod = _convert_to_ctype(
        width_mod, 
        _lib_lvgl.py_lv_meter_add_scale_lines.argtypes.width_mod
    )

    res = _lib_lvgl.py_lv_meter_add_scale_lines(obj, color_start, color_end, local, width_mod)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_meter_add_scale_lines.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_meter_add_scale_lines.restype)
    )


_lib_lvgl.py_lv_meter_set_indicator_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    indic=_ctypes.POINTER(meter_indicator_t),
    value=int32_t
)
_lib_lvgl.py_lv_meter_set_indicator_value.restype = None


def meter_set_indicator_value(
    obj: obj_t,
    indic: meter_indicator_t,
    value: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_set_indicator_value.argtypes.obj
    )

    indic = _convert_to_ctype(
        indic, 
        _lib_lvgl.py_lv_meter_set_indicator_value.argtypes.indic
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_meter_set_indicator_value.argtypes.value
    )

    _lib_lvgl.py_lv_meter_set_indicator_value(obj, indic, value)


_lib_lvgl.py_lv_meter_set_indicator_start_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    indic=_ctypes.POINTER(meter_indicator_t),
    value=int32_t
)
_lib_lvgl.py_lv_meter_set_indicator_start_value.restype = None


def meter_set_indicator_start_value(
    obj: obj_t,
    indic: meter_indicator_t,
    value: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_set_indicator_start_value.argtypes.obj
    )

    indic = _convert_to_ctype(
        indic, 
        _lib_lvgl.py_lv_meter_set_indicator_start_value.argtypes.indic
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_meter_set_indicator_start_value.argtypes.value
    )

    _lib_lvgl.py_lv_meter_set_indicator_start_value(obj, indic, value)


_lib_lvgl.py_lv_meter_set_indicator_end_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    indic=_ctypes.POINTER(meter_indicator_t),
    value=int32_t
)
_lib_lvgl.py_lv_meter_set_indicator_end_value.restype = None


def meter_set_indicator_end_value(
    obj: obj_t,
    indic: meter_indicator_t,
    value: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_meter_set_indicator_end_value.argtypes.obj
    )

    indic = _convert_to_ctype(
        indic, 
        _lib_lvgl.py_lv_meter_set_indicator_end_value.argtypes.indic
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_meter_set_indicator_end_value.argtypes.value
    )

    _lib_lvgl.py_lv_meter_set_indicator_end_value(obj, indic, value)


_lib_lvgl.py_lv_msgbox_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t),
    title=_ctypes.POINTER(char_t),
    txt=_ctypes.POINTER(char_t),
    btn_txts=_ctypes.POINTER(char_t),
    add_close_btn=bool_t
)
_lib_lvgl.py_lv_msgbox_create.restype = _ctypes.POINTER(obj_t)


def msgbox_create(
    parent: obj_t,
    title: _type_char_t,
    txt: _type_char_t,
    btn_txts: List[char_t],
    add_close_btn: _type_bool_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_msgbox_create.argtypes.parent
    )

    title = _convert_to_ctype(
        title, 
        _lib_lvgl.py_lv_msgbox_create.argtypes.title
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_msgbox_create.argtypes.txt
    )

    btn_txts = _convert_to_ctype(
        btn_txts, 
        _lib_lvgl.py_lv_msgbox_create.argtypes.btn_txts
    )

    add_close_btn = _convert_to_ctype(
        add_close_btn, 
        _lib_lvgl.py_lv_msgbox_create.argtypes.add_close_btn
    )

    res = _lib_lvgl.py_lv_msgbox_create(parent, title, txt, btn_txts, add_close_btn)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_create.restype)
    )


_lib_lvgl.py_lv_msgbox_get_title.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_title.restype = _ctypes.POINTER(obj_t)


def msgbox_get_title(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_msgbox_get_title.argtypes.obj
    )

    res = _lib_lvgl.py_lv_msgbox_get_title(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_title.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_title.restype)
    )


_lib_lvgl.py_lv_msgbox_get_close_btn.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_close_btn.restype = _ctypes.POINTER(obj_t)


def msgbox_get_close_btn(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_msgbox_get_close_btn.argtypes.obj
    )

    res = _lib_lvgl.py_lv_msgbox_get_close_btn(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_close_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_close_btn.restype)
    )


_lib_lvgl.py_lv_msgbox_get_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_text.restype = _ctypes.POINTER(obj_t)


def msgbox_get_text(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_msgbox_get_text.argtypes.obj
    )

    res = _lib_lvgl.py_lv_msgbox_get_text(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_text.restype)
    )


_lib_lvgl.py_lv_msgbox_get_content.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_content.restype = _ctypes.POINTER(obj_t)


def msgbox_get_content(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_msgbox_get_content.argtypes.obj
    )

    res = _lib_lvgl.py_lv_msgbox_get_content(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_content.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_content.restype)
    )


_lib_lvgl.py_lv_msgbox_get_btns.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_btns.restype = _ctypes.POINTER(obj_t)


def msgbox_get_btns(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_msgbox_get_btns.argtypes.obj
    )

    res = _lib_lvgl.py_lv_msgbox_get_btns(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_btns.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_btns.restype)
    )


_lib_lvgl.py_lv_msgbox_get_active_btn.argtypes = __CArgList(
    mbox=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_active_btn.restype = uint16_t


def msgbox_get_active_btn(mbox: obj_t) -> uint16_t:
    mbox = _convert_to_ctype(
        mbox, 
        _lib_lvgl.py_lv_msgbox_get_active_btn.argtypes.mbox
    )

    res = _lib_lvgl.py_lv_msgbox_get_active_btn(mbox)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_active_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_active_btn.restype)
    )


_lib_lvgl.py_lv_msgbox_get_active_btn_text.argtypes = __CArgList(
    mbox=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_get_active_btn_text.restype = _ctypes.POINTER(char_t)


def msgbox_get_active_btn_text(mbox: obj_t) -> char_t:
    mbox = _convert_to_ctype(
        mbox, 
        _lib_lvgl.py_lv_msgbox_get_active_btn_text.argtypes.mbox
    )

    res = _lib_lvgl.py_lv_msgbox_get_active_btn_text(mbox)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msgbox_get_active_btn_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msgbox_get_active_btn_text.restype)
    )


_lib_lvgl.py_lv_msgbox_close.argtypes = __CArgList(
    mbox=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_close.restype = None


def msgbox_close(mbox: obj_t) -> None:
    mbox = _convert_to_ctype(
        mbox, 
        _lib_lvgl.py_lv_msgbox_close.argtypes.mbox
    )

    _lib_lvgl.py_lv_msgbox_close(mbox)


_lib_lvgl.py_lv_msgbox_close_async.argtypes = __CArgList(
    mbox=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_msgbox_close_async.restype = None


def msgbox_close_async(mbox: obj_t) -> None:
    mbox = _convert_to_ctype(
        mbox, 
        _lib_lvgl.py_lv_msgbox_close_async.argtypes.mbox
    )

    _lib_lvgl.py_lv_msgbox_close_async(mbox)


_lib_lvgl.py_lv_roller_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_roller_create.restype = _ctypes.POINTER(obj_t)


def roller_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_roller_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_roller_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_roller_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_roller_create.restype)
    )


_lib_lvgl.py_lv_roller_set_options.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    options=_ctypes.POINTER(char_t),
    mode=roller_mode_t
)
_lib_lvgl.py_lv_roller_set_options.restype = None


def roller_set_options(
    obj: obj_t,
    options: _type_char_t,
    mode: roller_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_set_options.argtypes.obj
    )

    options = _convert_to_ctype(
        options, 
        _lib_lvgl.py_lv_roller_set_options.argtypes.options
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_roller_set_options.argtypes.mode
    )

    _lib_lvgl.py_lv_roller_set_options(obj, options, mode)


_lib_lvgl.py_lv_roller_set_selected.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    sel_opt=uint16_t,
    anim=anim_enable_t
)
_lib_lvgl.py_lv_roller_set_selected.restype = None


def roller_set_selected(
    obj: obj_t,
    sel_opt: _type_uint16_t,
    anim: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_set_selected.argtypes.obj
    )

    sel_opt = _convert_to_ctype(
        sel_opt, 
        _lib_lvgl.py_lv_roller_set_selected.argtypes.sel_opt
    )

    anim = _convert_to_ctype(
        anim, 
        _lib_lvgl.py_lv_roller_set_selected.argtypes.anim
    )

    _lib_lvgl.py_lv_roller_set_selected(obj, sel_opt, anim)


_lib_lvgl.py_lv_roller_set_visible_row_count.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row_cnt=uint8_t
)
_lib_lvgl.py_lv_roller_set_visible_row_count.restype = None


def roller_set_visible_row_count(
    obj: obj_t,
    row_cnt: _type_uint8_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_set_visible_row_count.argtypes.obj
    )

    row_cnt = _convert_to_ctype(
        row_cnt, 
        _lib_lvgl.py_lv_roller_set_visible_row_count.argtypes.row_cnt
    )

    _lib_lvgl.py_lv_roller_set_visible_row_count(obj, row_cnt)


_lib_lvgl.py_lv_roller_get_selected.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_roller_get_selected.restype = uint16_t


def roller_get_selected(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_get_selected.argtypes.obj
    )

    res = _lib_lvgl.py_lv_roller_get_selected(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_roller_get_selected.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_roller_get_selected.restype)
    )


_lib_lvgl.py_lv_roller_get_selected_str.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    buf=_ctypes.POINTER(char_t),
    buf_size=uint32_t
)
_lib_lvgl.py_lv_roller_get_selected_str.restype = None


def roller_get_selected_str(
    obj: obj_t,
    buf: _type_char_t,
    buf_size: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_get_selected_str.argtypes.obj
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_roller_get_selected_str.argtypes.buf
    )

    buf_size = _convert_to_ctype(
        buf_size, 
        _lib_lvgl.py_lv_roller_get_selected_str.argtypes.buf_size
    )

    _lib_lvgl.py_lv_roller_get_selected_str(obj, buf, buf_size)


_lib_lvgl.py_lv_roller_get_options.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_roller_get_options.restype = _ctypes.POINTER(char_t)


def roller_get_options(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_get_options.argtypes.obj
    )

    res = _lib_lvgl.py_lv_roller_get_options(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_roller_get_options.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_roller_get_options.restype)
    )


_lib_lvgl.py_lv_roller_get_option_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_roller_get_option_cnt.restype = uint16_t


def roller_get_option_cnt(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_roller_get_option_cnt.argtypes.obj
    )

    res = _lib_lvgl.py_lv_roller_get_option_cnt(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_roller_get_option_cnt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_roller_get_option_cnt.restype)
    )


_lib_lvgl.py_lv_slider_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_create.restype = _ctypes.POINTER(obj_t)


def slider_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_slider_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_slider_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_create.restype)
    )


_lib_lvgl.py_lv_slider_set_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=int32_t,
    anim=anim_enable_t
)
_lib_lvgl.py_lv_slider_set_value.restype = None


def slider_set_value(
    obj: obj_t,
    value: _type_int32_t,
    anim: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_set_value.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_slider_set_value.argtypes.value
    )

    anim = _convert_to_ctype(
        anim, 
        _lib_lvgl.py_lv_slider_set_value.argtypes.anim
    )

    _lib_lvgl.py_lv_slider_set_value(obj, value, anim)


_lib_lvgl.py_lv_slider_set_left_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=int32_t,
    anim=anim_enable_t
)
_lib_lvgl.py_lv_slider_set_left_value.restype = None


def slider_set_left_value(
    obj: obj_t,
    value: _type_int32_t,
    anim: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_set_left_value.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_slider_set_left_value.argtypes.value
    )

    anim = _convert_to_ctype(
        anim, 
        _lib_lvgl.py_lv_slider_set_left_value.argtypes.anim
    )

    _lib_lvgl.py_lv_slider_set_left_value(obj, value, anim)


_lib_lvgl.py_lv_slider_set_range.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    min=int32_t,
    max=int32_t
)
_lib_lvgl.py_lv_slider_set_range.restype = None


def slider_set_range(
    obj: obj_t,
    min: _type_int32_t,
    max: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_set_range.argtypes.obj
    )

    min = _convert_to_ctype(
        min, 
        _lib_lvgl.py_lv_slider_set_range.argtypes.min
    )

    max = _convert_to_ctype(
        max, 
        _lib_lvgl.py_lv_slider_set_range.argtypes.max
    )

    _lib_lvgl.py_lv_slider_set_range(obj, min, max)


_lib_lvgl.py_lv_slider_set_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode=slider_mode_t
)
_lib_lvgl.py_lv_slider_set_mode.restype = None


def slider_set_mode(
    obj: obj_t,
    mode: slider_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_set_mode.argtypes.obj
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_slider_set_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_slider_set_mode(obj, mode)


_lib_lvgl.py_lv_slider_get_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_get_value.restype = int32_t


def slider_get_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_get_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_slider_get_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_get_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_get_value.restype)
    )


_lib_lvgl.py_lv_slider_get_left_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_get_left_value.restype = int32_t


def slider_get_left_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_get_left_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_slider_get_left_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_get_left_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_get_left_value.restype)
    )


_lib_lvgl.py_lv_slider_get_min_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_get_min_value.restype = int32_t


def slider_get_min_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_get_min_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_slider_get_min_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_get_min_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_get_min_value.restype)
    )


_lib_lvgl.py_lv_slider_get_max_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_get_max_value.restype = int32_t


def slider_get_max_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_get_max_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_slider_get_max_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_get_max_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_get_max_value.restype)
    )


_lib_lvgl.py_lv_slider_is_dragged.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_is_dragged.restype = bool_t


def slider_is_dragged(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_slider_is_dragged.argtypes.obj
    )

    res = _lib_lvgl.py_lv_slider_is_dragged(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_is_dragged.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_is_dragged.restype)
    )


_lib_lvgl.py_lv_slider_get_mode.argtypes = __CArgList(
    slider=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_slider_get_mode.restype = slider_mode_t


def slider_get_mode(slider: obj_t) -> slider_mode_t:
    slider = _convert_to_ctype(
        slider, 
        _lib_lvgl.py_lv_slider_get_mode.argtypes.slider
    )

    res = _lib_lvgl.py_lv_slider_get_mode(slider)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_slider_get_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_slider_get_mode.restype)
    )


_lib_lvgl.py_lv_spangroup_create.argtypes = __CArgList(
    par=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_create.restype = _ctypes.POINTER(obj_t)


def spangroup_create(par: obj_t) -> obj_t:
    par = _convert_to_ctype(
        par, 
        _lib_lvgl.py_lv_spangroup_create.argtypes.par
    )

    res = _lib_lvgl.py_lv_spangroup_create(par)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_create.restype)
    )


_lib_lvgl.py_lv_spangroup_new_span.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_new_span.restype = _ctypes.POINTER(span_t)


def spangroup_new_span(obj: obj_t) -> span_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_new_span.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_new_span(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_new_span.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_new_span.restype)
    )


_lib_lvgl.py_lv_spangroup_del_span.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    span=_ctypes.POINTER(span_t)
)
_lib_lvgl.py_lv_spangroup_del_span.restype = None


def spangroup_del_span(
    obj: obj_t,
    span: span_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_del_span.argtypes.obj
    )

    span = _convert_to_ctype(
        span, 
        _lib_lvgl.py_lv_spangroup_del_span.argtypes.span
    )

    _lib_lvgl.py_lv_spangroup_del_span(obj, span)


_lib_lvgl.py_lv_span_set_text.argtypes = __CArgList(
    span=_ctypes.POINTER(span_t),
    text=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_span_set_text.restype = None


def span_set_text(
    span: span_t,
    text: _type_char_t
) -> None:
    span = _convert_to_ctype(
        span, 
        _lib_lvgl.py_lv_span_set_text.argtypes.span
    )

    text = _convert_to_ctype(
        text, 
        _lib_lvgl.py_lv_span_set_text.argtypes.text
    )

    _lib_lvgl.py_lv_span_set_text(span, text)


_lib_lvgl.py_lv_span_set_text_static.argtypes = __CArgList(
    span=_ctypes.POINTER(span_t),
    text=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_span_set_text_static.restype = None


def span_set_text_static(
    span: span_t,
    text: _type_char_t
) -> None:
    span = _convert_to_ctype(
        span, 
        _lib_lvgl.py_lv_span_set_text_static.argtypes.span
    )

    text = _convert_to_ctype(
        text, 
        _lib_lvgl.py_lv_span_set_text_static.argtypes.text
    )

    _lib_lvgl.py_lv_span_set_text_static(span, text)


_lib_lvgl.py_lv_spangroup_set_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    align=text_align_t
)
_lib_lvgl.py_lv_spangroup_set_align.restype = None


def spangroup_set_align(
    obj: obj_t,
    align: text_align_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_set_align.argtypes.obj
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_spangroup_set_align.argtypes.align
    )

    _lib_lvgl.py_lv_spangroup_set_align(obj, align)


_lib_lvgl.py_lv_spangroup_set_overflow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    overflow=span_overflow_t
)
_lib_lvgl.py_lv_spangroup_set_overflow.restype = None


def spangroup_set_overflow(
    obj: obj_t,
    overflow: span_overflow_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_set_overflow.argtypes.obj
    )

    overflow = _convert_to_ctype(
        overflow, 
        _lib_lvgl.py_lv_spangroup_set_overflow.argtypes.overflow
    )

    _lib_lvgl.py_lv_spangroup_set_overflow(obj, overflow)


_lib_lvgl.py_lv_spangroup_set_indent.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    indent=coord_t
)
_lib_lvgl.py_lv_spangroup_set_indent.restype = None


def spangroup_set_indent(
    obj: obj_t,
    indent: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_set_indent.argtypes.obj
    )

    indent = _convert_to_ctype(
        indent, 
        _lib_lvgl.py_lv_spangroup_set_indent.argtypes.indent
    )

    _lib_lvgl.py_lv_spangroup_set_indent(obj, indent)


_lib_lvgl.py_lv_spangroup_set_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode=span_mode_t
)
_lib_lvgl.py_lv_spangroup_set_mode.restype = None


def spangroup_set_mode(
    obj: obj_t,
    mode: span_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_set_mode.argtypes.obj
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_spangroup_set_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_spangroup_set_mode(obj, mode)


_lib_lvgl.py_lv_spangroup_set_lines.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    lines=int32_t
)
_lib_lvgl.py_lv_spangroup_set_lines.restype = None


def spangroup_set_lines(
    obj: obj_t,
    lines: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_set_lines.argtypes.obj
    )

    lines = _convert_to_ctype(
        lines, 
        _lib_lvgl.py_lv_spangroup_set_lines.argtypes.lines
    )

    _lib_lvgl.py_lv_spangroup_set_lines(obj, lines)


_lib_lvgl.py_lv_spangroup_get_child.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    id=int32_t
)
_lib_lvgl.py_lv_spangroup_get_child.restype = _ctypes.POINTER(span_t)


def spangroup_get_child(
    obj: obj_t,
    id: _type_int32_t
) -> span_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_child.argtypes.obj
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_spangroup_get_child.argtypes.id
    )

    res = _lib_lvgl.py_lv_spangroup_get_child(obj, id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_child.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_child.restype)
    )


_lib_lvgl.py_lv_spangroup_get_child_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_child_cnt.restype = uint32_t


def spangroup_get_child_cnt(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_child_cnt.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_child_cnt(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_child_cnt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_child_cnt.restype)
    )


_lib_lvgl.py_lv_spangroup_get_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_align.restype = text_align_t


def spangroup_get_align(obj: obj_t) -> text_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_align.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_align(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_align.restype)
    )


_lib_lvgl.py_lv_spangroup_get_overflow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_overflow.restype = span_overflow_t


def spangroup_get_overflow(obj: obj_t) -> span_overflow_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_overflow.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_overflow(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_overflow.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_overflow.restype)
    )


_lib_lvgl.py_lv_spangroup_get_indent.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_indent.restype = coord_t


def spangroup_get_indent(obj: obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_indent.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_indent(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_indent.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_indent.restype)
    )


_lib_lvgl.py_lv_spangroup_get_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_mode.restype = span_mode_t


def spangroup_get_mode(obj: obj_t) -> span_mode_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_mode.restype)
    )


_lib_lvgl.py_lv_spangroup_get_lines.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_lines.restype = int32_t


def spangroup_get_lines(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_lines.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_lines(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_lines.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_lines.restype)
    )


_lib_lvgl.py_lv_spangroup_get_max_line_h.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_get_max_line_h.restype = coord_t


def spangroup_get_max_line_h(obj: obj_t) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_max_line_h.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spangroup_get_max_line_h(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_max_line_h.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_max_line_h.restype)
    )


_lib_lvgl.py_lv_spangroup_get_expand_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    max_width=uint32_t
)
_lib_lvgl.py_lv_spangroup_get_expand_width.restype = uint32_t


def spangroup_get_expand_width(
    obj: obj_t,
    max_width: _type_uint32_t
) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_expand_width.argtypes.obj
    )

    max_width = _convert_to_ctype(
        max_width, 
        _lib_lvgl.py_lv_spangroup_get_expand_width.argtypes.max_width
    )

    res = _lib_lvgl.py_lv_spangroup_get_expand_width(obj, max_width)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_expand_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_expand_width.restype)
    )


_lib_lvgl.py_lv_spangroup_get_expand_height.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    width=coord_t
)
_lib_lvgl.py_lv_spangroup_get_expand_height.restype = coord_t


def spangroup_get_expand_height(
    obj: obj_t,
    width: coord_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_get_expand_height.argtypes.obj
    )

    width = _convert_to_ctype(
        width, 
        _lib_lvgl.py_lv_spangroup_get_expand_height.argtypes.width
    )

    res = _lib_lvgl.py_lv_spangroup_get_expand_height(obj, width)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spangroup_get_expand_height.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spangroup_get_expand_height.restype)
    )


_lib_lvgl.py_lv_spangroup_refr_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spangroup_refr_mode.restype = None


def spangroup_refr_mode(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spangroup_refr_mode.argtypes.obj
    )

    _lib_lvgl.py_lv_spangroup_refr_mode(obj)


_lib_lvgl.py_lv_textarea_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_create.restype = _ctypes.POINTER(obj_t)


def textarea_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_textarea_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_textarea_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_create.restype)
    )


_lib_lvgl.py_lv_textarea_add_char.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    c=uint32_t
)
_lib_lvgl.py_lv_textarea_add_char.restype = None


def textarea_add_char(
    obj: obj_t,
    c: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_add_char.argtypes.obj
    )

    c = _convert_to_ctype(
        c, 
        _lib_lvgl.py_lv_textarea_add_char.argtypes.c
    )

    _lib_lvgl.py_lv_textarea_add_char(obj, c)


_lib_lvgl.py_lv_textarea_add_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_textarea_add_text.restype = None


def textarea_add_text(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_add_text.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_textarea_add_text.argtypes.txt
    )

    _lib_lvgl.py_lv_textarea_add_text(obj, txt)


_lib_lvgl.py_lv_textarea_del_char.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_del_char.restype = None


def textarea_del_char(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_del_char.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_del_char(obj)


_lib_lvgl.py_lv_textarea_del_char_forward.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_del_char_forward.restype = None


def textarea_del_char_forward(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_del_char_forward.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_del_char_forward(obj)


_lib_lvgl.py_lv_textarea_set_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_textarea_set_text.restype = None


def textarea_set_text(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_text.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_textarea_set_text.argtypes.txt
    )

    _lib_lvgl.py_lv_textarea_set_text(obj, txt)


_lib_lvgl.py_lv_textarea_set_placeholder_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_textarea_set_placeholder_text.restype = None


def textarea_set_placeholder_text(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_placeholder_text.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_textarea_set_placeholder_text.argtypes.txt
    )

    _lib_lvgl.py_lv_textarea_set_placeholder_text(obj, txt)


_lib_lvgl.py_lv_textarea_set_cursor_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pos=int32_t
)
_lib_lvgl.py_lv_textarea_set_cursor_pos.restype = None


def textarea_set_cursor_pos(
    obj: obj_t,
    pos: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_cursor_pos.argtypes.obj
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_textarea_set_cursor_pos.argtypes.pos
    )

    _lib_lvgl.py_lv_textarea_set_cursor_pos(obj, pos)


_lib_lvgl.py_lv_textarea_set_cursor_click_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_textarea_set_cursor_click_pos.restype = None


def textarea_set_cursor_click_pos(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_cursor_click_pos.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_textarea_set_cursor_click_pos.argtypes.en
    )

    _lib_lvgl.py_lv_textarea_set_cursor_click_pos(obj, en)


_lib_lvgl.py_lv_textarea_set_password_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_textarea_set_password_mode.restype = None


def textarea_set_password_mode(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_password_mode.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_textarea_set_password_mode.argtypes.en
    )

    _lib_lvgl.py_lv_textarea_set_password_mode(obj, en)


_lib_lvgl.py_lv_textarea_set_password_bullet.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    bullet=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_textarea_set_password_bullet.restype = None


def textarea_set_password_bullet(
    obj: obj_t,
    bullet: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_password_bullet.argtypes.obj
    )

    bullet = _convert_to_ctype(
        bullet, 
        _lib_lvgl.py_lv_textarea_set_password_bullet.argtypes.bullet
    )

    _lib_lvgl.py_lv_textarea_set_password_bullet(obj, bullet)


_lib_lvgl.py_lv_textarea_set_one_line.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_textarea_set_one_line.restype = None


def textarea_set_one_line(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_one_line.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_textarea_set_one_line.argtypes.en
    )

    _lib_lvgl.py_lv_textarea_set_one_line(obj, en)


_lib_lvgl.py_lv_textarea_set_accepted_chars.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    list=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_textarea_set_accepted_chars.restype = None


def textarea_set_accepted_chars(
    obj: obj_t,
    list: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_accepted_chars.argtypes.obj
    )

    list = _convert_to_ctype(
        list, 
        _lib_lvgl.py_lv_textarea_set_accepted_chars.argtypes.list
    )

    _lib_lvgl.py_lv_textarea_set_accepted_chars(obj, list)


_lib_lvgl.py_lv_textarea_set_max_length.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    num=uint32_t
)
_lib_lvgl.py_lv_textarea_set_max_length.restype = None


def textarea_set_max_length(
    obj: obj_t,
    num: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_max_length.argtypes.obj
    )

    num = _convert_to_ctype(
        num, 
        _lib_lvgl.py_lv_textarea_set_max_length.argtypes.num
    )

    _lib_lvgl.py_lv_textarea_set_max_length(obj, num)


_lib_lvgl.py_lv_textarea_set_insert_replace.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_textarea_set_insert_replace.restype = None


def textarea_set_insert_replace(
    obj: obj_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_insert_replace.argtypes.obj
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_textarea_set_insert_replace.argtypes.txt
    )

    _lib_lvgl.py_lv_textarea_set_insert_replace(obj, txt)


_lib_lvgl.py_lv_textarea_set_text_selection.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    en=bool_t
)
_lib_lvgl.py_lv_textarea_set_text_selection.restype = None


def textarea_set_text_selection(
    obj: obj_t,
    en: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_text_selection.argtypes.obj
    )

    en = _convert_to_ctype(
        en, 
        _lib_lvgl.py_lv_textarea_set_text_selection.argtypes.en
    )

    _lib_lvgl.py_lv_textarea_set_text_selection(obj, en)


_lib_lvgl.py_lv_textarea_set_password_show_time.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    time=uint16_t
)
_lib_lvgl.py_lv_textarea_set_password_show_time.restype = None


def textarea_set_password_show_time(
    obj: obj_t,
    time: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_password_show_time.argtypes.obj
    )

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_textarea_set_password_show_time.argtypes.time
    )

    _lib_lvgl.py_lv_textarea_set_password_show_time(obj, time)


_lib_lvgl.py_lv_textarea_set_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    align=text_align_t
)
_lib_lvgl.py_lv_textarea_set_align.restype = None


def textarea_set_align(
    obj: obj_t,
    align: text_align_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_set_align.argtypes.obj
    )

    align = _convert_to_ctype(
        align, 
        _lib_lvgl.py_lv_textarea_set_align.argtypes.align
    )

    _lib_lvgl.py_lv_textarea_set_align(obj, align)


_lib_lvgl.py_lv_textarea_get_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_text.restype = _ctypes.POINTER(char_t)


def textarea_get_text(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_text.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_text(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_text.restype)
    )


_lib_lvgl.py_lv_textarea_get_placeholder_text.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_placeholder_text.restype = _ctypes.POINTER(char_t)


def textarea_get_placeholder_text(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_placeholder_text.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_placeholder_text(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_placeholder_text.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_placeholder_text.restype)
    )


_lib_lvgl.py_lv_textarea_get_label.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_label.restype = _ctypes.POINTER(obj_t)


def textarea_get_label(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_label.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_label(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_label.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_label.restype)
    )


_lib_lvgl.py_lv_textarea_get_cursor_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_cursor_pos.restype = uint32_t


def textarea_get_cursor_pos(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_cursor_pos.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_cursor_pos(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_cursor_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_cursor_pos.restype)
    )


_lib_lvgl.py_lv_textarea_get_cursor_click_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_cursor_click_pos.restype = bool_t


def textarea_get_cursor_click_pos(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_cursor_click_pos.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_cursor_click_pos(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_cursor_click_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_cursor_click_pos.restype)
    )


_lib_lvgl.py_lv_textarea_get_password_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_password_mode.restype = bool_t


def textarea_get_password_mode(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_password_mode.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_password_mode(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_password_mode.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_password_mode.restype)
    )


_lib_lvgl.py_lv_textarea_get_password_bullet.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_password_bullet.restype = _ctypes.POINTER(char_t)


def textarea_get_password_bullet(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_password_bullet.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_password_bullet(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_password_bullet.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_password_bullet.restype)
    )


_lib_lvgl.py_lv_textarea_get_one_line.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_one_line.restype = bool_t


def textarea_get_one_line(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_one_line.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_one_line(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_one_line.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_one_line.restype)
    )


_lib_lvgl.py_lv_textarea_get_accepted_chars.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_accepted_chars.restype = _ctypes.POINTER(char_t)


def textarea_get_accepted_chars(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_accepted_chars.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_accepted_chars(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_accepted_chars.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_accepted_chars.restype)
    )


_lib_lvgl.py_lv_textarea_get_max_length.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_max_length.restype = uint32_t


def textarea_get_max_length(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_max_length.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_max_length(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_max_length.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_max_length.restype)
    )


_lib_lvgl.py_lv_textarea_text_is_selected.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_text_is_selected.restype = bool_t


def textarea_text_is_selected(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_text_is_selected.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_text_is_selected(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_text_is_selected.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_text_is_selected.restype)
    )


_lib_lvgl.py_lv_textarea_get_text_selection.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_text_selection.restype = bool_t


def textarea_get_text_selection(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_text_selection.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_text_selection(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_text_selection.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_text_selection.restype)
    )


_lib_lvgl.py_lv_textarea_get_password_show_time.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_password_show_time.restype = uint16_t


def textarea_get_password_show_time(
    obj: obj_t
) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_password_show_time.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_password_show_time(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_password_show_time.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_password_show_time.restype)
    )


_lib_lvgl.py_lv_textarea_get_current_char.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_get_current_char.restype = uint32_t


def textarea_get_current_char(obj: obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_get_current_char.argtypes.obj
    )

    res = _lib_lvgl.py_lv_textarea_get_current_char(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_textarea_get_current_char.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_textarea_get_current_char.restype)
    )


_lib_lvgl.py_lv_textarea_clear_selection.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_clear_selection.restype = None


def textarea_clear_selection(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_clear_selection.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_clear_selection(obj)


_lib_lvgl.py_lv_textarea_cursor_right.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_cursor_right.restype = None


def textarea_cursor_right(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_cursor_right.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_cursor_right(obj)


_lib_lvgl.py_lv_textarea_cursor_left.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_cursor_left.restype = None


def textarea_cursor_left(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_cursor_left.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_cursor_left(obj)


_lib_lvgl.py_lv_textarea_cursor_down.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_cursor_down.restype = None


def textarea_cursor_down(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_cursor_down.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_cursor_down(obj)


_lib_lvgl.py_lv_textarea_cursor_up.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_textarea_cursor_up.restype = None


def textarea_cursor_up(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_textarea_cursor_up.argtypes.obj
    )

    _lib_lvgl.py_lv_textarea_cursor_up(obj)


_lib_lvgl.py_lv_spinbox_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_create.restype = _ctypes.POINTER(obj_t)


def spinbox_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_spinbox_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_spinbox_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spinbox_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spinbox_create.restype)
    )


_lib_lvgl.py_lv_spinbox_set_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    i=int32_t
)
_lib_lvgl.py_lv_spinbox_set_value.restype = None


def spinbox_set_value(
    obj: obj_t,
    i: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_value.argtypes.obj
    )

    i = _convert_to_ctype(
        i, 
        _lib_lvgl.py_lv_spinbox_set_value.argtypes.i
    )

    _lib_lvgl.py_lv_spinbox_set_value(obj, i)


_lib_lvgl.py_lv_spinbox_set_rollover.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    b=bool_t
)
_lib_lvgl.py_lv_spinbox_set_rollover.restype = None


def spinbox_set_rollover(
    obj: obj_t,
    b: _type_bool_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_rollover.argtypes.obj
    )

    b = _convert_to_ctype(
        b, 
        _lib_lvgl.py_lv_spinbox_set_rollover.argtypes.b
    )

    _lib_lvgl.py_lv_spinbox_set_rollover(obj, b)


_lib_lvgl.py_lv_spinbox_set_digit_format.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    digit_count=uint8_t,
    separator_position=uint8_t
)
_lib_lvgl.py_lv_spinbox_set_digit_format.restype = None


def spinbox_set_digit_format(
    obj: obj_t,
    digit_count: _type_uint8_t,
    separator_position: _type_uint8_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_digit_format.argtypes.obj
    )

    digit_count = _convert_to_ctype(
        digit_count, 
        _lib_lvgl.py_lv_spinbox_set_digit_format.argtypes.digit_count
    )

    separator_position = _convert_to_ctype(
        separator_position, 
        _lib_lvgl.py_lv_spinbox_set_digit_format.argtypes.separator_position
    )

    _lib_lvgl.py_lv_spinbox_set_digit_format(obj, digit_count, separator_position)


_lib_lvgl.py_lv_spinbox_set_step.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    step=uint32_t
)
_lib_lvgl.py_lv_spinbox_set_step.restype = None


def spinbox_set_step(
    obj: obj_t,
    step: _type_uint32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_step.argtypes.obj
    )

    step = _convert_to_ctype(
        step, 
        _lib_lvgl.py_lv_spinbox_set_step.argtypes.step
    )

    _lib_lvgl.py_lv_spinbox_set_step(obj, step)


_lib_lvgl.py_lv_spinbox_set_range.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    range_min=int32_t,
    range_max=int32_t
)
_lib_lvgl.py_lv_spinbox_set_range.restype = None


def spinbox_set_range(
    obj: obj_t,
    range_min: _type_int32_t,
    range_max: _type_int32_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_range.argtypes.obj
    )

    range_min = _convert_to_ctype(
        range_min, 
        _lib_lvgl.py_lv_spinbox_set_range.argtypes.range_min
    )

    range_max = _convert_to_ctype(
        range_max, 
        _lib_lvgl.py_lv_spinbox_set_range.argtypes.range_max
    )

    _lib_lvgl.py_lv_spinbox_set_range(obj, range_min, range_max)


_lib_lvgl.py_lv_spinbox_set_cursor_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    pos=uint8_t
)
_lib_lvgl.py_lv_spinbox_set_cursor_pos.restype = None


def spinbox_set_cursor_pos(
    obj: obj_t,
    pos: _type_uint8_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_cursor_pos.argtypes.obj
    )

    pos = _convert_to_ctype(
        pos, 
        _lib_lvgl.py_lv_spinbox_set_cursor_pos.argtypes.pos
    )

    _lib_lvgl.py_lv_spinbox_set_cursor_pos(obj, pos)


_lib_lvgl.py_lv_spinbox_set_digit_step_direction.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    direction=dir_t
)
_lib_lvgl.py_lv_spinbox_set_digit_step_direction.restype = None


def spinbox_set_digit_step_direction(
    obj: obj_t,
    direction: dir_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_set_digit_step_direction.argtypes.obj
    )

    direction = _convert_to_ctype(
        direction, 
        _lib_lvgl.py_lv_spinbox_set_digit_step_direction.argtypes.direction
    )

    _lib_lvgl.py_lv_spinbox_set_digit_step_direction(obj, direction)


_lib_lvgl.py_lv_spinbox_get_rollover.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_get_rollover.restype = bool_t


def spinbox_get_rollover(obj: obj_t) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_get_rollover.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spinbox_get_rollover(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spinbox_get_rollover.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spinbox_get_rollover.restype)
    )


_lib_lvgl.py_lv_spinbox_get_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_get_value.restype = int32_t


def spinbox_get_value(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_get_value.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spinbox_get_value(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spinbox_get_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spinbox_get_value.restype)
    )


_lib_lvgl.py_lv_spinbox_get_step.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_get_step.restype = int32_t


def spinbox_get_step(obj: obj_t) -> int32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_get_step.argtypes.obj
    )

    res = _lib_lvgl.py_lv_spinbox_get_step(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spinbox_get_step.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spinbox_get_step.restype)
    )


_lib_lvgl.py_lv_spinbox_step_next.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_step_next.restype = None


def spinbox_step_next(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_step_next.argtypes.obj
    )

    _lib_lvgl.py_lv_spinbox_step_next(obj)


_lib_lvgl.py_lv_spinbox_step_prev.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_step_prev.restype = None


def spinbox_step_prev(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_step_prev.argtypes.obj
    )

    _lib_lvgl.py_lv_spinbox_step_prev(obj)


_lib_lvgl.py_lv_spinbox_increment.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_increment.restype = None


def spinbox_increment(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_increment.argtypes.obj
    )

    _lib_lvgl.py_lv_spinbox_increment(obj)


_lib_lvgl.py_lv_spinbox_decrement.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_spinbox_decrement.restype = None


def spinbox_decrement(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_spinbox_decrement.argtypes.obj
    )

    _lib_lvgl.py_lv_spinbox_decrement(obj)


_lib_lvgl.py_lv_spinner_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t),
    time=uint32_t,
    arc_length=uint32_t
)
_lib_lvgl.py_lv_spinner_create.restype = _ctypes.POINTER(obj_t)


def spinner_create(
    parent: obj_t,
    time: _type_uint32_t,
    arc_length: _type_uint32_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_spinner_create.argtypes.parent
    )

    time = _convert_to_ctype(
        time, 
        _lib_lvgl.py_lv_spinner_create.argtypes.time
    )

    arc_length = _convert_to_ctype(
        arc_length, 
        _lib_lvgl.py_lv_spinner_create.argtypes.arc_length
    )

    res = _lib_lvgl.py_lv_spinner_create(parent, time, arc_length)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_spinner_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_spinner_create.restype)
    )


_lib_lvgl.py_lv_switch_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_switch_create.restype = _ctypes.POINTER(obj_t)


def switch_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_switch_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_switch_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_switch_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_switch_create.restype)
    )


_lib_lvgl.py_lv_table_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_table_create.restype = _ctypes.POINTER(obj_t)


def table_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_table_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_table_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_table_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_table_create.restype)
    )


_lib_lvgl.py_lv_table_set_cell_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row=uint16_t,
    col=uint16_t,
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_table_set_cell_value.restype = None


def table_set_cell_value(
    obj: obj_t,
    row: _type_uint16_t,
    col: _type_uint16_t,
    txt: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_set_cell_value.argtypes.obj
    )

    row = _convert_to_ctype(
        row, 
        _lib_lvgl.py_lv_table_set_cell_value.argtypes.row
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_set_cell_value.argtypes.col
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_table_set_cell_value.argtypes.txt
    )

    _lib_lvgl.py_lv_table_set_cell_value(obj, row, col, txt)


_lib_lvgl.py_lv_table_set_row_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row_cnt=uint16_t
)
_lib_lvgl.py_lv_table_set_row_cnt.restype = None


def table_set_row_cnt(
    obj: obj_t,
    row_cnt: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_set_row_cnt.argtypes.obj
    )

    row_cnt = _convert_to_ctype(
        row_cnt, 
        _lib_lvgl.py_lv_table_set_row_cnt.argtypes.row_cnt
    )

    _lib_lvgl.py_lv_table_set_row_cnt(obj, row_cnt)


_lib_lvgl.py_lv_table_set_col_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    col_cnt=uint16_t
)
_lib_lvgl.py_lv_table_set_col_cnt.restype = None


def table_set_col_cnt(
    obj: obj_t,
    col_cnt: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_set_col_cnt.argtypes.obj
    )

    col_cnt = _convert_to_ctype(
        col_cnt, 
        _lib_lvgl.py_lv_table_set_col_cnt.argtypes.col_cnt
    )

    _lib_lvgl.py_lv_table_set_col_cnt(obj, col_cnt)


_lib_lvgl.py_lv_table_set_col_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    col_id=uint16_t,
    w=coord_t
)
_lib_lvgl.py_lv_table_set_col_width.restype = None


def table_set_col_width(
    obj: obj_t,
    col_id: _type_uint16_t,
    w: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_set_col_width.argtypes.obj
    )

    col_id = _convert_to_ctype(
        col_id, 
        _lib_lvgl.py_lv_table_set_col_width.argtypes.col_id
    )

    w = _convert_to_ctype(
        w, 
        _lib_lvgl.py_lv_table_set_col_width.argtypes.w
    )

    _lib_lvgl.py_lv_table_set_col_width(obj, col_id, w)


_lib_lvgl.py_lv_table_add_cell_ctrl.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row=uint16_t,
    col=uint16_t,
    ctrl=table_cell_ctrl_t
)
_lib_lvgl.py_lv_table_add_cell_ctrl.restype = None


def table_add_cell_ctrl(
    obj: obj_t,
    row: _type_uint16_t,
    col: _type_uint16_t,
    ctrl: table_cell_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_add_cell_ctrl.argtypes.obj
    )

    row = _convert_to_ctype(
        row, 
        _lib_lvgl.py_lv_table_add_cell_ctrl.argtypes.row
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_add_cell_ctrl.argtypes.col
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_table_add_cell_ctrl.argtypes.ctrl
    )

    _lib_lvgl.py_lv_table_add_cell_ctrl(obj, row, col, ctrl)


_lib_lvgl.py_lv_table_clear_cell_ctrl.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row=uint16_t,
    col=uint16_t,
    ctrl=table_cell_ctrl_t
)
_lib_lvgl.py_lv_table_clear_cell_ctrl.restype = None


def table_clear_cell_ctrl(
    obj: obj_t,
    row: _type_uint16_t,
    col: _type_uint16_t,
    ctrl: table_cell_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_clear_cell_ctrl.argtypes.obj
    )

    row = _convert_to_ctype(
        row, 
        _lib_lvgl.py_lv_table_clear_cell_ctrl.argtypes.row
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_clear_cell_ctrl.argtypes.col
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_table_clear_cell_ctrl.argtypes.ctrl
    )

    _lib_lvgl.py_lv_table_clear_cell_ctrl(obj, row, col, ctrl)


_lib_lvgl.py_lv_table_get_cell_value.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row=uint16_t,
    col=uint16_t
)
_lib_lvgl.py_lv_table_get_cell_value.restype = _ctypes.POINTER(char_t)


def table_get_cell_value(
    obj: obj_t,
    row: _type_uint16_t,
    col: _type_uint16_t
) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_get_cell_value.argtypes.obj
    )

    row = _convert_to_ctype(
        row, 
        _lib_lvgl.py_lv_table_get_cell_value.argtypes.row
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_get_cell_value.argtypes.col
    )

    res = _lib_lvgl.py_lv_table_get_cell_value(obj, row, col)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_table_get_cell_value.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_table_get_cell_value.restype)
    )


_lib_lvgl.py_lv_table_get_row_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_table_get_row_cnt.restype = uint16_t


def table_get_row_cnt(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_get_row_cnt.argtypes.obj
    )

    res = _lib_lvgl.py_lv_table_get_row_cnt(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_table_get_row_cnt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_table_get_row_cnt.restype)
    )


_lib_lvgl.py_lv_table_get_col_cnt.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_table_get_col_cnt.restype = uint16_t


def table_get_col_cnt(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_get_col_cnt.argtypes.obj
    )

    res = _lib_lvgl.py_lv_table_get_col_cnt(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_table_get_col_cnt.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_table_get_col_cnt.restype)
    )


_lib_lvgl.py_lv_table_get_col_width.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    col=uint16_t
)
_lib_lvgl.py_lv_table_get_col_width.restype = coord_t


def table_get_col_width(
    obj: obj_t,
    col: _type_uint16_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_get_col_width.argtypes.obj
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_get_col_width.argtypes.col
    )

    res = _lib_lvgl.py_lv_table_get_col_width(obj, col)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_table_get_col_width.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_table_get_col_width.restype)
    )


_lib_lvgl.py_lv_table_has_cell_ctrl.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row=uint16_t,
    col=uint16_t,
    ctrl=table_cell_ctrl_t
)
_lib_lvgl.py_lv_table_has_cell_ctrl.restype = bool_t


def table_has_cell_ctrl(
    obj: obj_t,
    row: _type_uint16_t,
    col: _type_uint16_t,
    ctrl: table_cell_ctrl_t
) -> bool_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_has_cell_ctrl.argtypes.obj
    )

    row = _convert_to_ctype(
        row, 
        _lib_lvgl.py_lv_table_has_cell_ctrl.argtypes.row
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_has_cell_ctrl.argtypes.col
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_table_has_cell_ctrl.argtypes.ctrl
    )

    res = _lib_lvgl.py_lv_table_has_cell_ctrl(obj, row, col, ctrl)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_table_has_cell_ctrl.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_table_has_cell_ctrl.restype)
    )


_lib_lvgl.py_lv_table_get_selected_cell.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    row=_ctypes.POINTER(uint16_t),
    col=_ctypes.POINTER(uint16_t)
)
_lib_lvgl.py_lv_table_get_selected_cell.restype = None


def table_get_selected_cell(
    obj: obj_t,
    row: _type_uint16_t,
    col: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_table_get_selected_cell.argtypes.obj
    )

    row = _convert_to_ctype(
        row, 
        _lib_lvgl.py_lv_table_get_selected_cell.argtypes.row
    )

    col = _convert_to_ctype(
        col, 
        _lib_lvgl.py_lv_table_get_selected_cell.argtypes.col
    )

    _lib_lvgl.py_lv_table_get_selected_cell(obj, row, col)


_lib_lvgl.py_lv_tabview_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t),
    tab_pos=dir_t,
    tab_size=coord_t
)
_lib_lvgl.py_lv_tabview_create.restype = _ctypes.POINTER(obj_t)


def tabview_create(
    parent: obj_t,
    tab_pos: dir_t,
    tab_size: coord_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_tabview_create.argtypes.parent
    )

    tab_pos = _convert_to_ctype(
        tab_pos, 
        _lib_lvgl.py_lv_tabview_create.argtypes.tab_pos
    )

    tab_size = _convert_to_ctype(
        tab_size, 
        _lib_lvgl.py_lv_tabview_create.argtypes.tab_size
    )

    res = _lib_lvgl.py_lv_tabview_create(parent, tab_pos, tab_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tabview_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tabview_create.restype)
    )


_lib_lvgl.py_lv_tabview_add_tab.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t),
    name=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_tabview_add_tab.restype = _ctypes.POINTER(obj_t)


def tabview_add_tab(
    tv: obj_t,
    name: _type_char_t
) -> obj_t:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_tabview_add_tab.argtypes.tv
    )

    name = _convert_to_ctype(
        name, 
        _lib_lvgl.py_lv_tabview_add_tab.argtypes.name
    )

    res = _lib_lvgl.py_lv_tabview_add_tab(tv, name)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tabview_add_tab.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tabview_add_tab.restype)
    )


_lib_lvgl.py_lv_tabview_rename_tab.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    tab_id=uint32_t,
    new_name=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_tabview_rename_tab.restype = None


def tabview_rename_tab(
    obj: obj_t,
    tab_id: _type_uint32_t,
    new_name: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_tabview_rename_tab.argtypes.obj
    )

    tab_id = _convert_to_ctype(
        tab_id, 
        _lib_lvgl.py_lv_tabview_rename_tab.argtypes.tab_id
    )

    new_name = _convert_to_ctype(
        new_name, 
        _lib_lvgl.py_lv_tabview_rename_tab.argtypes.new_name
    )

    _lib_lvgl.py_lv_tabview_rename_tab(obj, tab_id, new_name)


_lib_lvgl.py_lv_tabview_get_content.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_tabview_get_content.restype = _ctypes.POINTER(obj_t)


def tabview_get_content(tv: obj_t) -> obj_t:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_tabview_get_content.argtypes.tv
    )

    res = _lib_lvgl.py_lv_tabview_get_content(tv)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tabview_get_content.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tabview_get_content.restype)
    )


_lib_lvgl.py_lv_tabview_get_tab_btns.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_tabview_get_tab_btns.restype = _ctypes.POINTER(obj_t)


def tabview_get_tab_btns(tv: obj_t) -> obj_t:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_tabview_get_tab_btns.argtypes.tv
    )

    res = _lib_lvgl.py_lv_tabview_get_tab_btns(tv)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tabview_get_tab_btns.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tabview_get_tab_btns.restype)
    )


_lib_lvgl.py_lv_tabview_set_act.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    id=uint32_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_tabview_set_act.restype = None


def tabview_set_act(
    obj: obj_t,
    id: _type_uint32_t,
    anim_en: _type_anim_enable_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_tabview_set_act.argtypes.obj
    )

    id = _convert_to_ctype(
        id, 
        _lib_lvgl.py_lv_tabview_set_act.argtypes.id
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_tabview_set_act.argtypes.anim_en
    )

    _lib_lvgl.py_lv_tabview_set_act(obj, id, anim_en)


_lib_lvgl.py_lv_tabview_get_tab_act.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_tabview_get_tab_act.restype = uint16_t


def tabview_get_tab_act(tv: obj_t) -> uint16_t:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_tabview_get_tab_act.argtypes.tv
    )

    res = _lib_lvgl.py_lv_tabview_get_tab_act(tv)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tabview_get_tab_act.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tabview_get_tab_act.restype)
    )


_lib_lvgl.py_lv_tileview_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_tileview_create.restype = _ctypes.POINTER(obj_t)


def tileview_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_tileview_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_tileview_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tileview_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tileview_create.restype)
    )


_lib_lvgl.py_lv_tileview_add_tile.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t),
    col_id=uint8_t,
    row_id=uint8_t,
    dir=dir_t
)
_lib_lvgl.py_lv_tileview_add_tile.restype = _ctypes.POINTER(obj_t)


def tileview_add_tile(
    tv: obj_t,
    col_id: _type_uint8_t,
    row_id: _type_uint8_t,
    dir: dir_t
) -> obj_t:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_tileview_add_tile.argtypes.tv
    )

    col_id = _convert_to_ctype(
        col_id, 
        _lib_lvgl.py_lv_tileview_add_tile.argtypes.col_id
    )

    row_id = _convert_to_ctype(
        row_id, 
        _lib_lvgl.py_lv_tileview_add_tile.argtypes.row_id
    )

    dir = _convert_to_ctype(
        dir, 
        _lib_lvgl.py_lv_tileview_add_tile.argtypes.dir
    )

    res = _lib_lvgl.py_lv_tileview_add_tile(tv, col_id, row_id, dir)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tileview_add_tile.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tileview_add_tile.restype)
    )


_lib_lvgl.py_lv_obj_set_tile.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t),
    tile_obj=_ctypes.POINTER(obj_t),
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_set_tile.restype = None


def obj_set_tile(
    tv: obj_t,
    tile_obj: obj_t,
    anim_en: _type_anim_enable_t
) -> None:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_obj_set_tile.argtypes.tv
    )

    tile_obj = _convert_to_ctype(
        tile_obj, 
        _lib_lvgl.py_lv_obj_set_tile.argtypes.tile_obj
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_set_tile.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_set_tile(tv, tile_obj, anim_en)


_lib_lvgl.py_lv_obj_set_tile_id.argtypes = __CArgList(
    tv=_ctypes.POINTER(obj_t),
    col_id=uint32_t,
    row_id=uint32_t,
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_obj_set_tile_id.restype = None


def obj_set_tile_id(
    tv: obj_t,
    col_id: _type_uint32_t,
    row_id: _type_uint32_t,
    anim_en: _type_anim_enable_t
) -> None:
    tv = _convert_to_ctype(
        tv, 
        _lib_lvgl.py_lv_obj_set_tile_id.argtypes.tv
    )

    col_id = _convert_to_ctype(
        col_id, 
        _lib_lvgl.py_lv_obj_set_tile_id.argtypes.col_id
    )

    row_id = _convert_to_ctype(
        row_id, 
        _lib_lvgl.py_lv_obj_set_tile_id.argtypes.row_id
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_obj_set_tile_id.argtypes.anim_en
    )

    _lib_lvgl.py_lv_obj_set_tile_id(tv, col_id, row_id, anim_en)


_lib_lvgl.py_lv_tileview_get_tile_act.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_tileview_get_tile_act.restype = _ctypes.POINTER(obj_t)


def tileview_get_tile_act(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_tileview_get_tile_act.argtypes.obj
    )

    res = _lib_lvgl.py_lv_tileview_get_tile_act(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tileview_get_tile_act.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tileview_get_tile_act.restype)
    )


_lib_lvgl.py_lv_win_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t),
    header_height=coord_t
)
_lib_lvgl.py_lv_win_create.restype = _ctypes.POINTER(obj_t)


def win_create(
    parent: obj_t,
    header_height: coord_t
) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_win_create.argtypes.parent
    )

    header_height = _convert_to_ctype(
        header_height, 
        _lib_lvgl.py_lv_win_create.argtypes.header_height
    )

    res = _lib_lvgl.py_lv_win_create(parent, header_height)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_win_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_win_create.restype)
    )


_lib_lvgl.py_lv_win_add_title.argtypes = __CArgList(
    win=_ctypes.POINTER(obj_t),
    txt=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_win_add_title.restype = _ctypes.POINTER(obj_t)


def win_add_title(
    win: obj_t,
    txt: _type_char_t
) -> obj_t:
    win = _convert_to_ctype(
        win, 
        _lib_lvgl.py_lv_win_add_title.argtypes.win
    )

    txt = _convert_to_ctype(
        txt, 
        _lib_lvgl.py_lv_win_add_title.argtypes.txt
    )

    res = _lib_lvgl.py_lv_win_add_title(win, txt)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_win_add_title.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_win_add_title.restype)
    )


_lib_lvgl.py_lv_win_add_btn.argtypes = __CArgList(
    win=_ctypes.POINTER(obj_t),
    icon=void_t,
    btn_w=coord_t
)
_lib_lvgl.py_lv_win_add_btn.restype = _ctypes.POINTER(obj_t)


def win_add_btn(
    win: obj_t,
    icon: void_t,
    btn_w: coord_t
) -> obj_t:
    win = _convert_to_ctype(
        win, 
        _lib_lvgl.py_lv_win_add_btn.argtypes.win
    )

    icon = _convert_to_ctype(
        icon, 
        _lib_lvgl.py_lv_win_add_btn.argtypes.icon
    )

    btn_w = _convert_to_ctype(
        btn_w, 
        _lib_lvgl.py_lv_win_add_btn.argtypes.btn_w
    )

    res = _lib_lvgl.py_lv_win_add_btn(win, icon, btn_w)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_win_add_btn.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_win_add_btn.restype)
    )


_lib_lvgl.py_lv_win_get_header.argtypes = __CArgList(
    win=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_win_get_header.restype = _ctypes.POINTER(obj_t)


def win_get_header(win: obj_t) -> obj_t:
    win = _convert_to_ctype(
        win, 
        _lib_lvgl.py_lv_win_get_header.argtypes.win
    )

    res = _lib_lvgl.py_lv_win_get_header(win)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_win_get_header.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_win_get_header.restype)
    )


_lib_lvgl.py_lv_win_get_content.argtypes = __CArgList(
    win=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_win_get_content.restype = _ctypes.POINTER(obj_t)


def win_get_content(win: obj_t) -> obj_t:
    win = _convert_to_ctype(
        win, 
        _lib_lvgl.py_lv_win_get_content.argtypes.win
    )

    res = _lib_lvgl.py_lv_win_get_content(win)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_win_get_content.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_win_get_content.restype)
    )


_lib_lvgl.py_lv_snapshot_take.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    cf=color_format_t
)
_lib_lvgl.py_lv_snapshot_take.restype = _ctypes.POINTER(img_dsc_t)


def snapshot_take(
    obj: obj_t,
    cf: color_format_t
) -> img_dsc_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_snapshot_take.argtypes.obj
    )

    cf = _convert_to_ctype(
        cf, 
        _lib_lvgl.py_lv_snapshot_take.argtypes.cf
    )

    res = _lib_lvgl.py_lv_snapshot_take(obj, cf)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_snapshot_take.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_snapshot_take.restype)
    )


_lib_lvgl.py_lv_snapshot_free.argtypes = __CArgList(
    dsc=_ctypes.POINTER(img_dsc_t)
)
_lib_lvgl.py_lv_snapshot_free.restype = None


def snapshot_free(dsc: img_dsc_t) -> None:
    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_snapshot_free.argtypes.dsc
    )

    _lib_lvgl.py_lv_snapshot_free(dsc)


_lib_lvgl.py_lv_snapshot_buf_size_needed.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    cf=color_format_t
)
_lib_lvgl.py_lv_snapshot_buf_size_needed.restype = uint32_t


def snapshot_buf_size_needed(
    obj: obj_t,
    cf: color_format_t
) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_snapshot_buf_size_needed.argtypes.obj
    )

    cf = _convert_to_ctype(
        cf, 
        _lib_lvgl.py_lv_snapshot_buf_size_needed.argtypes.cf
    )

    res = _lib_lvgl.py_lv_snapshot_buf_size_needed(obj, cf)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_snapshot_buf_size_needed.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_snapshot_buf_size_needed.restype)
    )


_lib_lvgl.py_lv_snapshot_take_to_buf.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    cf=color_format_t,
    dsc=_ctypes.POINTER(img_dsc_t),
    buf=void_t,
    buff_size=uint32_t
)
_lib_lvgl.py_lv_snapshot_take_to_buf.restype = res_t


def snapshot_take_to_buf(
    obj: obj_t,
    cf: color_format_t,
    dsc: img_dsc_t,
    buf: void_t,
    buff_size: _type_uint32_t
) -> res_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_snapshot_take_to_buf.argtypes.obj
    )

    cf = _convert_to_ctype(
        cf, 
        _lib_lvgl.py_lv_snapshot_take_to_buf.argtypes.cf
    )

    dsc = _convert_to_ctype(
        dsc, 
        _lib_lvgl.py_lv_snapshot_take_to_buf.argtypes.dsc
    )

    buf = _convert_to_ctype(
        buf, 
        _lib_lvgl.py_lv_snapshot_take_to_buf.argtypes.buf
    )

    buff_size = _convert_to_ctype(
        buff_size, 
        _lib_lvgl.py_lv_snapshot_take_to_buf.argtypes.buff_size
    )

    res = _lib_lvgl.py_lv_snapshot_take_to_buf(obj, cf, dsc, buf, buff_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_snapshot_take_to_buf.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_snapshot_take_to_buf.restype)
    )


_lib_lvgl.py_lv_gridnav_add.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    ctrl=gridnav_ctrl_t
)
_lib_lvgl.py_lv_gridnav_add.restype = None


def gridnav_add(
    obj: obj_t,
    ctrl: _type_gridnav_ctrl_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_gridnav_add.argtypes.obj
    )

    ctrl = _convert_to_ctype(
        ctrl, 
        _lib_lvgl.py_lv_gridnav_add.argtypes.ctrl
    )

    _lib_lvgl.py_lv_gridnav_add(obj, ctrl)


_lib_lvgl.py_lv_gridnav_remove.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_gridnav_remove.restype = None


def gridnav_remove(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_gridnav_remove.argtypes.obj
    )

    _lib_lvgl.py_lv_gridnav_remove(obj)


_lib_lvgl.py_lv_gridnav_set_focused.argtypes = __CArgList(
    cont=_ctypes.POINTER(obj_t),
    to_focus=_ctypes.POINTER(obj_t),
    anim_en=anim_enable_t
)
_lib_lvgl.py_lv_gridnav_set_focused.restype = None


def gridnav_set_focused(
    cont: obj_t,
    to_focus: obj_t,
    anim_en: _type_anim_enable_t
) -> None:
    cont = _convert_to_ctype(
        cont, 
        _lib_lvgl.py_lv_gridnav_set_focused.argtypes.cont
    )

    to_focus = _convert_to_ctype(
        to_focus, 
        _lib_lvgl.py_lv_gridnav_set_focused.argtypes.to_focus
    )

    anim_en = _convert_to_ctype(
        anim_en, 
        _lib_lvgl.py_lv_gridnav_set_focused.argtypes.anim_en
    )

    _lib_lvgl.py_lv_gridnav_set_focused(cont, to_focus, anim_en)


_lib_lvgl.py_lv_imgfont_create.argtypes = __CArgList(
    height=uint16_t,
    path_cb=imgfont_get_path_cb_t,
    user_data=void_t
)
_lib_lvgl.py_lv_imgfont_create.restype = _ctypes.POINTER(font_t)


_imgfont_callback_storage = {}


def _imgfont_weakref_callback(ref):
    if ref in _imgfont_callback_storage:
        del _imgfont_callback_storage[ref]


def imgfont_create(
    height: _type_uint16_t,
    path_cb: imgfont_get_path_cb_t,
    user_data: void_t
) -> font_t:
    height = _convert_to_ctype(
        height, 
        _lib_lvgl.py_lv_imgfont_create.argtypes.height
    )

    if inspect.ismethod(path_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': path_cb.__hash__}
        )
        ref = weakmethod(path_cb, _imgfont_weakref_callback)
    elif inspect.isfunction(path_cb):
        ref = weakref.ref(path_cb, _imgfont_weakref_callback)
    else:
        raise TypeError

    if ref not in _imgfont_callback_storage:
        path_cb = imgfont_get_path_cb_t(path_cb)
        _imgfont_callback_storage[ref] = path_cb
    else:
        path_cb = _imgfont_callback_storage[ref]

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_imgfont_create.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_imgfont_create(height, path_cb, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_imgfont_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_imgfont_create.restype)
    )


_lib_lvgl.py_lv_imgfont_destroy.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t)
)
_lib_lvgl.py_lv_imgfont_destroy.restype = None


def imgfont_destroy(font: font_t) -> None:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_imgfont_destroy.argtypes.font
    )

    _lib_lvgl.py_lv_imgfont_destroy(font)


_lib_lvgl.py_lv_msg_init.argtypes = __CArgList()
_lib_lvgl.py_lv_msg_init.restype = None


def msg_init() -> None:

    _lib_lvgl.py_lv_msg_init()


_lib_lvgl.py_lv_msg_subscribe.argtypes = __CArgList(
    msg_id=msg_id_t,
    cb=msg_subscribe_cb_t,
    user_data=void_t
)
_lib_lvgl.py_lv_msg_subscribe.restype = void_t


_msg_callback_storage = {}


def _msg_weakref_callback(ref):
    if ref in _msg_callback_storage:
        del _msg_callback_storage[ref]


def msg_subscribe(
    msg_id: msg_id_t,
    cb: msg_subscribe_cb_t,
    user_data: void_t
) -> void_t:
    msg_id = _convert_to_ctype(
        msg_id, 
        _lib_lvgl.py_lv_msg_subscribe.argtypes.msg_id
    )

    if inspect.ismethod(cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': cb.__hash__}
        )
        ref = weakmethod(cb, _msg_weakref_callback)
    elif inspect.isfunction(cb):
        ref = weakref.ref(cb, _msg_weakref_callback)
    else:
        raise TypeError

    if ref not in _msg_callback_storage:
        cb = msg_subscribe_cb_t(cb)
        _msg_callback_storage[ref] = cb
    else:
        cb = _msg_callback_storage[ref]

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_msg_subscribe.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_msg_subscribe(msg_id, cb, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msg_subscribe.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msg_subscribe.restype)
    )


_lib_lvgl.py_lv_msg_subscribe_obj.argtypes = __CArgList(
    msg_id=msg_id_t,
    obj=_ctypes.POINTER(obj_t),
    user_data=void_t
)
_lib_lvgl.py_lv_msg_subscribe_obj.restype = void_t


def msg_subscribe_obj(
    msg_id: msg_id_t,
    obj: obj_t,
    user_data: void_t
) -> void_t:
    msg_id = _convert_to_ctype(
        msg_id, 
        _lib_lvgl.py_lv_msg_subscribe_obj.argtypes.msg_id
    )

    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_msg_subscribe_obj.argtypes.obj
    )

    user_data = _convert_to_ctype(
        user_data, 
        _lib_lvgl.py_lv_msg_subscribe_obj.argtypes.user_data
    )

    res = _lib_lvgl.py_lv_msg_subscribe_obj(msg_id, obj, user_data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msg_subscribe_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msg_subscribe_obj.restype)
    )


_lib_lvgl.py_lv_msg_unsubscribe.argtypes = __CArgList(
    s=void_t
)
_lib_lvgl.py_lv_msg_unsubscribe.restype = None


def msg_unsubscribe(s: void_t) -> None:
    s = _convert_to_ctype(
        s, 
        _lib_lvgl.py_lv_msg_unsubscribe.argtypes.s
    )

    _lib_lvgl.py_lv_msg_unsubscribe(s)


_lib_lvgl.py_lv_msg_send.argtypes = __CArgList(
    msg_id=msg_id_t,
    payload=void_t
)
_lib_lvgl.py_lv_msg_send.restype = None


def msg_send(
    msg_id: msg_id_t,
    payload: void_t
) -> None:
    msg_id = _convert_to_ctype(
        msg_id, 
        _lib_lvgl.py_lv_msg_send.argtypes.msg_id
    )

    payload = _convert_to_ctype(
        payload, 
        _lib_lvgl.py_lv_msg_send.argtypes.payload
    )

    _lib_lvgl.py_lv_msg_send(msg_id, payload)


_lib_lvgl.py_lv_msg_update_value.argtypes = __CArgList(
    v=void_t
)
_lib_lvgl.py_lv_msg_update_value.restype = None


def msg_update_value(v: void_t) -> None:
    v = _convert_to_ctype(
        v, 
        _lib_lvgl.py_lv_msg_update_value.argtypes.v
    )

    _lib_lvgl.py_lv_msg_update_value(v)


_lib_lvgl.py_lv_msg_get_id.argtypes = __CArgList(
    m=_ctypes.POINTER(msg_t)
)
_lib_lvgl.py_lv_msg_get_id.restype = msg_id_t


def msg_get_id(m: msg_t) -> msg_id_t:
    m = _convert_to_ctype(
        m, 
        _lib_lvgl.py_lv_msg_get_id.argtypes.m
    )

    res = _lib_lvgl.py_lv_msg_get_id(m)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msg_get_id.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msg_get_id.restype)
    )


_lib_lvgl.py_lv_msg_get_payload.argtypes = __CArgList(
    m=_ctypes.POINTER(msg_t)
)
_lib_lvgl.py_lv_msg_get_payload.restype = void_t


def msg_get_payload(m: msg_t) -> void_t:
    m = _convert_to_ctype(
        m, 
        _lib_lvgl.py_lv_msg_get_payload.argtypes.m
    )

    res = _lib_lvgl.py_lv_msg_get_payload(m)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msg_get_payload.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msg_get_payload.restype)
    )


_lib_lvgl.py_lv_msg_get_user_data.argtypes = __CArgList(
    m=_ctypes.POINTER(msg_t)
)
_lib_lvgl.py_lv_msg_get_user_data.restype = void_t


def msg_get_user_data(m: msg_t) -> void_t:
    m = _convert_to_ctype(
        m, 
        _lib_lvgl.py_lv_msg_get_user_data.argtypes.m
    )

    res = _lib_lvgl.py_lv_msg_get_user_data(m)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_msg_get_user_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_msg_get_user_data.restype)
    )


_lib_lvgl.py_lv_event_get_msg.argtypes = __CArgList(
    e=_ctypes.POINTER(event_t)
)
_lib_lvgl.py_lv_event_get_msg.restype = _ctypes.POINTER(msg_t)


def event_get_msg(e: event_t) -> msg_t:
    e = _convert_to_ctype(
        e, 
        _lib_lvgl.py_lv_event_get_msg.argtypes.e
    )

    res = _lib_lvgl.py_lv_event_get_msg(e)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_event_get_msg.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_event_get_msg.restype)
    )


_lib_lvgl.py_lv_ime_pinyin_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_ime_pinyin_create.restype = _ctypes.POINTER(obj_t)


def ime_pinyin_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_ime_pinyin_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_ime_pinyin_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_ime_pinyin_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_ime_pinyin_create.restype)
    )


_lib_lvgl.py_lv_ime_pinyin_set_keyboard.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    kb=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_ime_pinyin_set_keyboard.restype = None


def ime_pinyin_set_keyboard(
    obj: obj_t,
    kb: obj_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_ime_pinyin_set_keyboard.argtypes.obj
    )

    kb = _convert_to_ctype(
        kb, 
        _lib_lvgl.py_lv_ime_pinyin_set_keyboard.argtypes.kb
    )

    _lib_lvgl.py_lv_ime_pinyin_set_keyboard(obj, kb)


_lib_lvgl.py_lv_ime_pinyin_set_dict.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    dict=_ctypes.POINTER(pinyin_dict_t)
)
_lib_lvgl.py_lv_ime_pinyin_set_dict.restype = None


def ime_pinyin_set_dict(
    obj: obj_t,
    dict: pinyin_dict_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_ime_pinyin_set_dict.argtypes.obj
    )

    dict = _convert_to_ctype(
        dict, 
        _lib_lvgl.py_lv_ime_pinyin_set_dict.argtypes.dict
    )

    _lib_lvgl.py_lv_ime_pinyin_set_dict(obj, dict)


_lib_lvgl.py_lv_ime_pinyin_set_mode.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    mode=ime_pinyin_mode_t
)
_lib_lvgl.py_lv_ime_pinyin_set_mode.restype = None


def ime_pinyin_set_mode(
    obj: obj_t,
    mode: _type_ime_pinyin_mode_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_ime_pinyin_set_mode.argtypes.obj
    )

    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_ime_pinyin_set_mode.argtypes.mode
    )

    _lib_lvgl.py_lv_ime_pinyin_set_mode(obj, mode)


_lib_lvgl.py_lv_ime_pinyin_get_kb.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_ime_pinyin_get_kb.restype = _ctypes.POINTER(obj_t)


def ime_pinyin_get_kb(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_ime_pinyin_get_kb.argtypes.obj
    )

    res = _lib_lvgl.py_lv_ime_pinyin_get_kb(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_ime_pinyin_get_kb.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_ime_pinyin_get_kb.restype)
    )


_lib_lvgl.py_lv_ime_pinyin_get_cand_panel.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_ime_pinyin_get_cand_panel.restype = _ctypes.POINTER(obj_t)


def ime_pinyin_get_cand_panel(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_ime_pinyin_get_cand_panel.argtypes.obj
    )

    res = _lib_lvgl.py_lv_ime_pinyin_get_cand_panel(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_ime_pinyin_get_cand_panel.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_ime_pinyin_get_cand_panel.restype)
    )


_lib_lvgl.py_lv_ime_pinyin_get_dict.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_ime_pinyin_get_dict.restype = _ctypes.POINTER(pinyin_dict_t)


def ime_pinyin_get_dict(obj: obj_t) -> pinyin_dict_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_ime_pinyin_get_dict.argtypes.obj
    )

    res = _lib_lvgl.py_lv_ime_pinyin_get_dict(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_ime_pinyin_get_dict.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_ime_pinyin_get_dict.restype)
    )


_lib_lvgl.py_lv_file_explorer_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_create.restype = _ctypes.POINTER(obj_t)


def file_explorer_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_file_explorer_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_file_explorer_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_create.restype)
    )


_lib_lvgl.py_lv_file_explorer_set_quick_access_path.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    dir=file_explorer_dir_t,
    path=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_file_explorer_set_quick_access_path.restype = None


def file_explorer_set_quick_access_path(
    obj: obj_t,
    dir: _type_file_explorer_dir_t,
    path: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_set_quick_access_path.argtypes.obj
    )

    dir = _convert_to_ctype(
        dir, 
        _lib_lvgl.py_lv_file_explorer_set_quick_access_path.argtypes.dir
    )

    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_file_explorer_set_quick_access_path.argtypes.path
    )

    _lib_lvgl.py_lv_file_explorer_set_quick_access_path(obj, dir, path)


_lib_lvgl.py_lv_file_explorer_set_sort.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    sort=file_explorer_sort_t
)
_lib_lvgl.py_lv_file_explorer_set_sort.restype = None


def file_explorer_set_sort(
    obj: obj_t,
    sort: _type_file_explorer_sort_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_set_sort.argtypes.obj
    )

    sort = _convert_to_ctype(
        sort, 
        _lib_lvgl.py_lv_file_explorer_set_sort.argtypes.sort
    )

    _lib_lvgl.py_lv_file_explorer_set_sort(obj, sort)


_lib_lvgl.py_lv_file_explorer_get_selected_file_name.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_selected_file_name.restype = _ctypes.POINTER(char_t)


def file_explorer_get_selected_file_name(
    obj: obj_t
) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_selected_file_name.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_selected_file_name(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_selected_file_name.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_selected_file_name.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_current_path.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_current_path.restype = _ctypes.POINTER(char_t)


def file_explorer_get_current_path(obj: obj_t) -> char_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_current_path.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_current_path(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_current_path.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_current_path.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_header.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_header.restype = _ctypes.POINTER(obj_t)


def file_explorer_get_header(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_header.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_header(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_header.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_header.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_quick_access_area.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_quick_access_area.restype = _ctypes.POINTER(obj_t)


def file_explorer_get_quick_access_area(
    obj: obj_t
) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_quick_access_area.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_quick_access_area(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_quick_access_area.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_quick_access_area.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_path_label.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_path_label.restype = _ctypes.POINTER(obj_t)


def file_explorer_get_path_label(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_path_label.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_path_label(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_path_label.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_path_label.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_places_list.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_places_list.restype = _ctypes.POINTER(obj_t)


def file_explorer_get_places_list(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_places_list.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_places_list(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_places_list.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_places_list.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_device_list.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_device_list.restype = _ctypes.POINTER(obj_t)


def file_explorer_get_device_list(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_device_list.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_device_list(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_device_list.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_device_list.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_file_table.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_file_table.restype = _ctypes.POINTER(obj_t)


def file_explorer_get_file_table(obj: obj_t) -> obj_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_file_table.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_file_table(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_file_table.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_file_table.restype)
    )


_lib_lvgl.py_lv_file_explorer_get_sort.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_file_explorer_get_sort.restype = file_explorer_sort_t


def file_explorer_get_sort(obj: obj_t) -> file_explorer_sort_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_get_sort.argtypes.obj
    )

    res = _lib_lvgl.py_lv_file_explorer_get_sort(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_file_explorer_get_sort.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_file_explorer_get_sort.restype)
    )


_lib_lvgl.py_lv_file_explorer_open_dir.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    dir=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_file_explorer_open_dir.restype = None


def file_explorer_open_dir(
    obj: obj_t,
    dir: _type_char_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_file_explorer_open_dir.argtypes.obj
    )

    dir = _convert_to_ctype(
        dir, 
        _lib_lvgl.py_lv_file_explorer_open_dir.argtypes.dir
    )

    _lib_lvgl.py_lv_file_explorer_open_dir(obj, dir)


_lib_lvgl.py_lv_barcode_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_barcode_create.restype = _ctypes.POINTER(obj_t)


def barcode_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_barcode_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_barcode_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_barcode_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_barcode_create.restype)
    )


_lib_lvgl.py_lv_barcode_set_dark_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t
)
_lib_lvgl.py_lv_barcode_set_dark_color.restype = None


def barcode_set_dark_color(
    obj: obj_t,
    color: color_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_set_dark_color.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_barcode_set_dark_color.argtypes.color
    )

    _lib_lvgl.py_lv_barcode_set_dark_color(obj, color)


_lib_lvgl.py_lv_barcode_set_light_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t
)
_lib_lvgl.py_lv_barcode_set_light_color.restype = None


def barcode_set_light_color(
    obj: obj_t,
    color: color_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_set_light_color.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_barcode_set_light_color.argtypes.color
    )

    _lib_lvgl.py_lv_barcode_set_light_color(obj, color)


_lib_lvgl.py_lv_barcode_set_scale.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    scale=uint16_t
)
_lib_lvgl.py_lv_barcode_set_scale.restype = None


def barcode_set_scale(
    obj: obj_t,
    scale: _type_uint16_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_set_scale.argtypes.obj
    )

    scale = _convert_to_ctype(
        scale, 
        _lib_lvgl.py_lv_barcode_set_scale.argtypes.scale
    )

    _lib_lvgl.py_lv_barcode_set_scale(obj, scale)


_lib_lvgl.py_lv_barcode_update.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    data=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_barcode_update.restype = res_t


def barcode_update(
    obj: obj_t,
    data: _type_char_t
) -> res_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_update.argtypes.obj
    )

    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py_lv_barcode_update.argtypes.data
    )

    res = _lib_lvgl.py_lv_barcode_update(obj, data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_barcode_update.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_barcode_update.restype)
    )


_lib_lvgl.py_lv_barcode_get_dark_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_barcode_get_dark_color.restype = color_t


def barcode_get_dark_color(obj: obj_t) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_get_dark_color.argtypes.obj
    )

    res = _lib_lvgl.py_lv_barcode_get_dark_color(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_barcode_get_dark_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_barcode_get_dark_color.restype)
    )


_lib_lvgl.py_lv_barcode_get_light_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_barcode_get_light_color.restype = color_t


def barcode_get_light_color(obj: obj_t) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_get_light_color.argtypes.obj
    )

    res = _lib_lvgl.py_lv_barcode_get_light_color(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_barcode_get_light_color.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_barcode_get_light_color.restype)
    )


_lib_lvgl.py_lv_barcode_get_scale.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_barcode_get_scale.restype = uint16_t


def barcode_get_scale(obj: obj_t) -> uint16_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_barcode_get_scale.argtypes.obj
    )

    res = _lib_lvgl.py_lv_barcode_get_scale(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_barcode_get_scale.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_barcode_get_scale.restype)
    )


_lib_lvgl.py_lv_bmp_init.argtypes = __CArgList()
_lib_lvgl.py_lv_bmp_init.restype = None


def bmp_init() -> None:

    _lib_lvgl.py_lv_bmp_init()


_lib_lvgl.py_lv_png_init.argtypes = __CArgList()
_lib_lvgl.py_lv_png_init.restype = None


def png_init() -> None:

    _lib_lvgl.py_lv_png_init()


_lib_lvgl.py_gd_open_gif_file.argtypes = __CArgList(
    fname=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_gd_open_gif_file.restype = _ctypes.POINTER(gd_GIF)


def gd_open_gif_file(fname: _type_char_t) -> gd_GIF:
    fname = _convert_to_ctype(
        fname, 
        _lib_lvgl.py_gd_open_gif_file.argtypes.fname
    )

    res = _lib_lvgl.py_gd_open_gif_file(fname)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_gd_open_gif_file.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_gd_open_gif_file.restype)
    )


_lib_lvgl.py_gd_open_gif_data.argtypes = __CArgList(
    data=void_t
)
_lib_lvgl.py_gd_open_gif_data.restype = _ctypes.POINTER(gd_GIF)


def gd_open_gif_data(data: void_t) -> gd_GIF:
    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py_gd_open_gif_data.argtypes.data
    )

    res = _lib_lvgl.py_gd_open_gif_data(data)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_gd_open_gif_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_gd_open_gif_data.restype)
    )


_lib_lvgl.py_gd_render_frame.argtypes = __CArgList(
    gif=_ctypes.POINTER(gd_GIF),
    buffer=_ctypes.POINTER(uint8_t)
)
_lib_lvgl.py_gd_render_frame.restype = None


def gd_render_frame(
    gif: gd_GIF,
    buffer: _type_uint8_t
) -> None:
    gif = _convert_to_ctype(
        gif, 
        _lib_lvgl.py_gd_render_frame.argtypes.gif
    )

    buffer = _convert_to_ctype(
        buffer, 
        _lib_lvgl.py_gd_render_frame.argtypes.buffer
    )

    _lib_lvgl.py_gd_render_frame(gif, buffer)


_lib_lvgl.py_gd_get_frame.argtypes = __CArgList(
    gif=_ctypes.POINTER(gd_GIF)
)
_lib_lvgl.py_gd_get_frame.restype = int_t


def gd_get_frame(gif: gd_GIF) -> int_t:
    gif = _convert_to_ctype(
        gif, 
        _lib_lvgl.py_gd_get_frame.argtypes.gif
    )

    res = _lib_lvgl.py_gd_get_frame(gif)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_gd_get_frame.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_gd_get_frame.restype)
    )


_lib_lvgl.py_gd_rewind.argtypes = __CArgList(
    gif=_ctypes.POINTER(gd_GIF)
)
_lib_lvgl.py_gd_rewind.restype = None


def gd_rewind(gif: gd_GIF) -> None:
    gif = _convert_to_ctype(
        gif, 
        _lib_lvgl.py_gd_rewind.argtypes.gif
    )

    _lib_lvgl.py_gd_rewind(gif)


_lib_lvgl.py_gd_close_gif.argtypes = __CArgList(
    gif=_ctypes.POINTER(gd_GIF)
)
_lib_lvgl.py_gd_close_gif.restype = None


def gd_close_gif(gif: gd_GIF) -> None:
    gif = _convert_to_ctype(
        gif, 
        _lib_lvgl.py_gd_close_gif.argtypes.gif
    )

    _lib_lvgl.py_gd_close_gif(gif)


_lib_lvgl.py_lv_gif_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_gif_create.restype = _ctypes.POINTER(obj_t)


def gif_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_gif_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_gif_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_gif_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_gif_create.restype)
    )


_lib_lvgl.py_lv_gif_set_src.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    src=void_t
)
_lib_lvgl.py_lv_gif_set_src.restype = None


def gif_set_src(obj: obj_t, src: void_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_gif_set_src.argtypes.obj
    )

    src = _convert_to_ctype(
        src, 
        _lib_lvgl.py_lv_gif_set_src.argtypes.src
    )

    _lib_lvgl.py_lv_gif_set_src(obj, src)


_lib_lvgl.py_lv_gif_restart.argtypes = __CArgList(
    gif=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_gif_restart.restype = None


def gif_restart(gif: obj_t) -> None:
    gif = _convert_to_ctype(
        gif, 
        _lib_lvgl.py_lv_gif_restart.argtypes.gif
    )

    _lib_lvgl.py_lv_gif_restart(gif)


_lib_lvgl.py_lv_qrcode_create.argtypes = __CArgList(
    parent=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_qrcode_create.restype = _ctypes.POINTER(obj_t)


def qrcode_create(parent: obj_t) -> obj_t:
    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_qrcode_create.argtypes.parent
    )

    res = _lib_lvgl.py_lv_qrcode_create(parent)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_qrcode_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_qrcode_create.restype)
    )


_lib_lvgl.py_lv_qrcode_set_size.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    size=coord_t
)
_lib_lvgl.py_lv_qrcode_set_size.restype = None


def qrcode_set_size(obj: obj_t, size: coord_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_qrcode_set_size.argtypes.obj
    )

    size = _convert_to_ctype(
        size, 
        _lib_lvgl.py_lv_qrcode_set_size.argtypes.size
    )

    _lib_lvgl.py_lv_qrcode_set_size(obj, size)


_lib_lvgl.py_lv_qrcode_set_dark_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t
)
_lib_lvgl.py_lv_qrcode_set_dark_color.restype = None


def qrcode_set_dark_color(
    obj: obj_t,
    color: color_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_qrcode_set_dark_color.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_qrcode_set_dark_color.argtypes.color
    )

    _lib_lvgl.py_lv_qrcode_set_dark_color(obj, color)


_lib_lvgl.py_lv_qrcode_set_light_color.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    color=color_t
)
_lib_lvgl.py_lv_qrcode_set_light_color.restype = None


def qrcode_set_light_color(
    obj: obj_t,
    color: color_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_qrcode_set_light_color.argtypes.obj
    )

    color = _convert_to_ctype(
        color, 
        _lib_lvgl.py_lv_qrcode_set_light_color.argtypes.color
    )

    _lib_lvgl.py_lv_qrcode_set_light_color(obj, color)


_lib_lvgl.py_lv_qrcode_update.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    data=void_t,
    data_len=uint32_t
)
_lib_lvgl.py_lv_qrcode_update.restype = res_t


def qrcode_update(
    obj: obj_t,
    data: void_t,
    data_len: _type_uint32_t
) -> res_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_qrcode_update.argtypes.obj
    )

    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py_lv_qrcode_update.argtypes.data
    )

    data_len = _convert_to_ctype(
        data_len, 
        _lib_lvgl.py_lv_qrcode_update.argtypes.data_len
    )

    res = _lib_lvgl.py_lv_qrcode_update(obj, data, data_len)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_qrcode_update.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_qrcode_update.restype)
    )


_lib_lvgl.py_lv_split_jpeg_init.argtypes = __CArgList()
_lib_lvgl.py_lv_split_jpeg_init.restype = None


def split_jpeg_init() -> None:

    _lib_lvgl.py_lv_split_jpeg_init()


_lib_lvgl.py_lv_tiny_ttf_create_file.argtypes = __CArgList(
    path=_ctypes.POINTER(char_t),
    line_height=coord_t
)
_lib_lvgl.py_lv_tiny_ttf_create_file.restype = _ctypes.POINTER(font_t)


def tiny_ttf_create_file(
    path: _type_char_t,
    line_height: coord_t
) -> font_t:
    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_tiny_ttf_create_file.argtypes.path
    )

    line_height = _convert_to_ctype(
        line_height, 
        _lib_lvgl.py_lv_tiny_ttf_create_file.argtypes.line_height
    )

    res = _lib_lvgl.py_lv_tiny_ttf_create_file(path, line_height)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tiny_ttf_create_file.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tiny_ttf_create_file.restype)
    )


_lib_lvgl.py_lv_tiny_ttf_create_file_ex.argtypes = __CArgList(
    path=_ctypes.POINTER(char_t),
    line_height=coord_t,
    cache_size=size_t
)
_lib_lvgl.py_lv_tiny_ttf_create_file_ex.restype = _ctypes.POINTER(font_t)


def tiny_ttf_create_file_ex(
    path: _type_char_t,
    line_height: coord_t,
    cache_size: _type_size_t
) -> font_t:
    path = _convert_to_ctype(
        path, 
        _lib_lvgl.py_lv_tiny_ttf_create_file_ex.argtypes.path
    )

    line_height = _convert_to_ctype(
        line_height, 
        _lib_lvgl.py_lv_tiny_ttf_create_file_ex.argtypes.line_height
    )

    cache_size = _convert_to_ctype(
        cache_size, 
        _lib_lvgl.py_lv_tiny_ttf_create_file_ex.argtypes.cache_size
    )

    res = _lib_lvgl.py_lv_tiny_ttf_create_file_ex(path, line_height, cache_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tiny_ttf_create_file_ex.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tiny_ttf_create_file_ex.restype)
    )


_lib_lvgl.py_lv_tiny_ttf_create_data.argtypes = __CArgList(
    data=void_t,
    data_size=size_t,
    line_height=coord_t
)
_lib_lvgl.py_lv_tiny_ttf_create_data.restype = _ctypes.POINTER(font_t)


def tiny_ttf_create_data(
    data: void_t,
    data_size: _type_size_t,
    line_height: coord_t
) -> font_t:
    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py_lv_tiny_ttf_create_data.argtypes.data
    )

    data_size = _convert_to_ctype(
        data_size, 
        _lib_lvgl.py_lv_tiny_ttf_create_data.argtypes.data_size
    )

    line_height = _convert_to_ctype(
        line_height, 
        _lib_lvgl.py_lv_tiny_ttf_create_data.argtypes.line_height
    )

    res = _lib_lvgl.py_lv_tiny_ttf_create_data(data, data_size, line_height)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tiny_ttf_create_data.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tiny_ttf_create_data.restype)
    )


_lib_lvgl.py_lv_tiny_ttf_create_data_ex.argtypes = __CArgList(
    data=void_t,
    data_size=size_t,
    line_height=coord_t,
    cache_size=size_t
)
_lib_lvgl.py_lv_tiny_ttf_create_data_ex.restype = _ctypes.POINTER(font_t)


def tiny_ttf_create_data_ex(
    data: void_t,
    data_size: _type_size_t,
    line_height: coord_t,
    cache_size: _type_size_t
) -> font_t:
    data = _convert_to_ctype(
        data, 
        _lib_lvgl.py_lv_tiny_ttf_create_data_ex.argtypes.data
    )

    data_size = _convert_to_ctype(
        data_size, 
        _lib_lvgl.py_lv_tiny_ttf_create_data_ex.argtypes.data_size
    )

    line_height = _convert_to_ctype(
        line_height, 
        _lib_lvgl.py_lv_tiny_ttf_create_data_ex.argtypes.line_height
    )

    cache_size = _convert_to_ctype(
        cache_size, 
        _lib_lvgl.py_lv_tiny_ttf_create_data_ex.argtypes.cache_size
    )

    res = _lib_lvgl.py_lv_tiny_ttf_create_data_ex(data, data_size, line_height, cache_size)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_tiny_ttf_create_data_ex.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_tiny_ttf_create_data_ex.restype)
    )


_lib_lvgl.py_lv_tiny_ttf_set_size.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t),
    line_height=coord_t
)
_lib_lvgl.py_lv_tiny_ttf_set_size.restype = None


def tiny_ttf_set_size(
    font: font_t,
    line_height: coord_t
) -> None:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_tiny_ttf_set_size.argtypes.font
    )

    line_height = _convert_to_ctype(
        line_height, 
        _lib_lvgl.py_lv_tiny_ttf_set_size.argtypes.line_height
    )

    _lib_lvgl.py_lv_tiny_ttf_set_size(font, line_height)


_lib_lvgl.py_lv_tiny_ttf_destroy.argtypes = __CArgList(
    font=_ctypes.POINTER(font_t)
)
_lib_lvgl.py_lv_tiny_ttf_destroy.restype = None


def tiny_ttf_destroy(font: font_t) -> None:
    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_tiny_ttf_destroy.argtypes.font
    )

    _lib_lvgl.py_lv_tiny_ttf_destroy(font)


_lib_lvgl.py_lv_flex_init.argtypes = __CArgList()
_lib_lvgl.py_lv_flex_init.restype = None


def flex_init() -> None:

    _lib_lvgl.py_lv_flex_init()


_lib_lvgl.py_lv_obj_set_flex_flow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    flow=flex_flow_t
)
_lib_lvgl.py_lv_obj_set_flex_flow.restype = None


def obj_set_flex_flow(
    obj: obj_t,
    flow: _type_flex_flow_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_flex_flow.argtypes.obj
    )

    flow = _convert_to_ctype(
        flow, 
        _lib_lvgl.py_lv_obj_set_flex_flow.argtypes.flow
    )

    _lib_lvgl.py_lv_obj_set_flex_flow(obj, flow)


_lib_lvgl.py_lv_obj_set_flex_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    main_place=flex_align_t,
    cross_place=flex_align_t,
    track_cross_place=flex_align_t
)
_lib_lvgl.py_lv_obj_set_flex_align.restype = None


def obj_set_flex_align(
    obj: obj_t,
    main_place: _type_flex_align_t,
    cross_place: _type_flex_align_t,
    track_cross_place: _type_flex_align_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_flex_align.argtypes.obj
    )

    main_place = _convert_to_ctype(
        main_place, 
        _lib_lvgl.py_lv_obj_set_flex_align.argtypes.main_place
    )

    cross_place = _convert_to_ctype(
        cross_place, 
        _lib_lvgl.py_lv_obj_set_flex_align.argtypes.cross_place
    )

    track_cross_place = _convert_to_ctype(
        track_cross_place, 
        _lib_lvgl.py_lv_obj_set_flex_align.argtypes.track_cross_place
    )

    _lib_lvgl.py_lv_obj_set_flex_align(obj, main_place, cross_place, track_cross_place)


_lib_lvgl.py_lv_obj_set_flex_grow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    grow=uint8_t
)
_lib_lvgl.py_lv_obj_set_flex_grow.restype = None


def obj_set_flex_grow(
    obj: obj_t,
    grow: _type_uint8_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_flex_grow.argtypes.obj
    )

    grow = _convert_to_ctype(
        grow, 
        _lib_lvgl.py_lv_obj_set_flex_grow.argtypes.grow
    )

    _lib_lvgl.py_lv_obj_set_flex_grow(obj, grow)


_lib_lvgl.py_lv_style_set_flex_flow.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=flex_flow_t
)
_lib_lvgl.py_lv_style_set_flex_flow.restype = None


def style_set_flex_flow(
    style: style_t,
    value: _type_flex_flow_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_flex_flow.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_flex_flow.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_flex_flow(style, value)


_lib_lvgl.py_lv_style_set_flex_main_place.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=flex_align_t
)
_lib_lvgl.py_lv_style_set_flex_main_place.restype = None


def style_set_flex_main_place(
    style: style_t,
    value: _type_flex_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_flex_main_place.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_flex_main_place.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_flex_main_place(style, value)


_lib_lvgl.py_lv_style_set_flex_cross_place.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=flex_align_t
)
_lib_lvgl.py_lv_style_set_flex_cross_place.restype = None


def style_set_flex_cross_place(
    style: style_t,
    value: _type_flex_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_flex_cross_place.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_flex_cross_place.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_flex_cross_place(style, value)


_lib_lvgl.py_lv_style_set_flex_track_place.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=flex_align_t
)
_lib_lvgl.py_lv_style_set_flex_track_place.restype = None


def style_set_flex_track_place(
    style: style_t,
    value: _type_flex_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_flex_track_place.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_flex_track_place.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_flex_track_place(style, value)


_lib_lvgl.py_lv_style_set_flex_grow.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=uint8_t
)
_lib_lvgl.py_lv_style_set_flex_grow.restype = None


def style_set_flex_grow(
    style: style_t,
    value: _type_uint8_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_flex_grow.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_flex_grow.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_flex_grow(style, value)


_lib_lvgl.py_lv_obj_set_style_flex_flow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=flex_flow_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_flex_flow.restype = None


def obj_set_style_flex_flow(
    obj: obj_t,
    value: _type_flex_flow_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_flex_flow.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_flex_flow.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_flex_flow.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_flex_flow(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_flex_main_place.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=flex_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_flex_main_place.restype = None


def obj_set_style_flex_main_place(
    obj: obj_t,
    value: _type_flex_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_flex_main_place.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_flex_main_place.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_flex_main_place.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_flex_main_place(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_flex_cross_place.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=flex_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_flex_cross_place.restype = None


def obj_set_style_flex_cross_place(
    obj: obj_t,
    value: _type_flex_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_flex_cross_place.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_flex_cross_place.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_flex_cross_place.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_flex_cross_place(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_flex_track_place.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=flex_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_flex_track_place.restype = None


def obj_set_style_flex_track_place(
    obj: obj_t,
    value: _type_flex_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_flex_track_place.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_flex_track_place.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_flex_track_place.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_flex_track_place(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_flex_grow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=uint8_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_flex_grow.restype = None


def obj_set_style_flex_grow(
    obj: obj_t,
    value: _type_uint8_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_flex_grow.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_flex_grow.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_flex_grow.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_flex_grow(obj, value, selector)


_lib_lvgl.py_lv_obj_get_style_flex_flow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_flex_flow.restype = flex_flow_t


def obj_get_style_flex_flow(
    obj: obj_t,
    part: _type_uint32_t
) -> flex_flow_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_flex_flow.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_flex_flow.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_flex_flow(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_flex_flow.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_flex_flow.restype)
    )


_lib_lvgl.py_lv_obj_get_style_flex_main_place.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_flex_main_place.restype = flex_align_t


def obj_get_style_flex_main_place(
    obj: obj_t,
    part: _type_uint32_t
) -> flex_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_flex_main_place.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_flex_main_place.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_flex_main_place(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_flex_main_place.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_flex_main_place.restype)
    )


_lib_lvgl.py_lv_obj_get_style_flex_cross_place.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_flex_cross_place.restype = flex_align_t


def obj_get_style_flex_cross_place(
    obj: obj_t,
    part: _type_uint32_t
) -> flex_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_flex_cross_place.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_flex_cross_place.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_flex_cross_place(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_flex_cross_place.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_flex_cross_place.restype)
    )


_lib_lvgl.py_lv_obj_get_style_flex_track_place.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_flex_track_place.restype = flex_align_t


def obj_get_style_flex_track_place(
    obj: obj_t,
    part: _type_uint32_t
) -> flex_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_flex_track_place.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_flex_track_place.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_flex_track_place(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_flex_track_place.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_flex_track_place.restype)
    )


_lib_lvgl.py_lv_obj_get_style_flex_grow.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_flex_grow.restype = uint8_t


def obj_get_style_flex_grow(
    obj: obj_t,
    part: _type_uint32_t
) -> uint8_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_flex_grow.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_flex_grow.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_flex_grow(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_flex_grow.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_flex_grow.restype)
    )


_lib_lvgl.py_lv_grid_init.argtypes = __CArgList()
_lib_lvgl.py_lv_grid_init.restype = None


def grid_init() -> None:

    _lib_lvgl.py_lv_grid_init()


_lib_lvgl.py_lv_obj_set_grid_dsc_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    col_dsc=_ctypes.POINTER(coord_t),
    row_dsc=_ctypes.POINTER(coord_t)
)
_lib_lvgl.py_lv_obj_set_grid_dsc_array.restype = None


def obj_set_grid_dsc_array(
    obj: obj_t,
    col_dsc: List[coord_t],
    row_dsc: List[coord_t]
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_grid_dsc_array.argtypes.obj
    )

    col_dsc = _convert_to_ctype(
        col_dsc, 
        _lib_lvgl.py_lv_obj_set_grid_dsc_array.argtypes.col_dsc
    )

    row_dsc = _convert_to_ctype(
        row_dsc, 
        _lib_lvgl.py_lv_obj_set_grid_dsc_array.argtypes.row_dsc
    )

    _lib_lvgl.py_lv_obj_set_grid_dsc_array(obj, col_dsc, row_dsc)


_lib_lvgl.py_lv_obj_set_grid_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    column_align=grid_align_t,
    row_align=grid_align_t
)
_lib_lvgl.py_lv_obj_set_grid_align.restype = None


def obj_set_grid_align(
    obj: obj_t,
    column_align: _type_grid_align_t,
    row_align: _type_grid_align_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_grid_align.argtypes.obj
    )

    column_align = _convert_to_ctype(
        column_align, 
        _lib_lvgl.py_lv_obj_set_grid_align.argtypes.column_align
    )

    row_align = _convert_to_ctype(
        row_align, 
        _lib_lvgl.py_lv_obj_set_grid_align.argtypes.row_align
    )

    _lib_lvgl.py_lv_obj_set_grid_align(obj, column_align, row_align)


_lib_lvgl.py_lv_obj_set_grid_cell.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    column_align=grid_align_t,
    col_pos=coord_t,
    col_span=coord_t,
    row_align=grid_align_t,
    row_pos=coord_t,
    row_span=coord_t
)
_lib_lvgl.py_lv_obj_set_grid_cell.restype = None


def obj_set_grid_cell(
    obj: obj_t,
    column_align: _type_grid_align_t,
    col_pos: coord_t,
    col_span: coord_t,
    row_align: _type_grid_align_t,
    row_pos: coord_t,
    row_span: coord_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.obj
    )

    column_align = _convert_to_ctype(
        column_align, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.column_align
    )

    col_pos = _convert_to_ctype(
        col_pos, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.col_pos
    )

    col_span = _convert_to_ctype(
        col_span, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.col_span
    )

    row_align = _convert_to_ctype(
        row_align, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.row_align
    )

    row_pos = _convert_to_ctype(
        row_pos, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.row_pos
    )

    row_span = _convert_to_ctype(
        row_span, 
        _lib_lvgl.py_lv_obj_set_grid_cell.argtypes.row_span
    )

    _lib_lvgl.py_lv_obj_set_grid_cell(obj, column_align, col_pos, col_span, row_align, row_pos, row_span)


_lib_lvgl.py_lv_grid_fr.argtypes = __CArgList(
    x=uint8_t
)
_lib_lvgl.py_lv_grid_fr.restype = coord_t


def grid_fr(x: _type_uint8_t) -> coord_t:
    x = _convert_to_ctype(
        x, 
        _lib_lvgl.py_lv_grid_fr.argtypes.x
    )

    res = _lib_lvgl.py_lv_grid_fr(x)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_grid_fr.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_grid_fr.restype)
    )


_lib_lvgl.py_lv_style_set_grid_row_dsc_array.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(coord_t)
)
_lib_lvgl.py_lv_style_set_grid_row_dsc_array.restype = None


def style_set_grid_row_dsc_array(
    style: style_t,
    value: List[coord_t]
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_row_dsc_array.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_row_dsc_array.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_row_dsc_array(style, value)


_lib_lvgl.py_lv_style_set_grid_column_dsc_array.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=_ctypes.POINTER(coord_t)
)
_lib_lvgl.py_lv_style_set_grid_column_dsc_array.restype = None


def style_set_grid_column_dsc_array(
    style: style_t,
    value: List[coord_t]
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_column_dsc_array.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_column_dsc_array.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_column_dsc_array(style, value)


_lib_lvgl.py_lv_style_set_grid_row_align.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=grid_align_t
)
_lib_lvgl.py_lv_style_set_grid_row_align.restype = None


def style_set_grid_row_align(
    style: style_t,
    value: _type_grid_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_row_align.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_row_align.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_row_align(style, value)


_lib_lvgl.py_lv_style_set_grid_column_align.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=grid_align_t
)
_lib_lvgl.py_lv_style_set_grid_column_align.restype = None


def style_set_grid_column_align(
    style: style_t,
    value: _type_grid_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_column_align.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_column_align.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_column_align(style, value)


_lib_lvgl.py_lv_style_set_grid_cell_column_pos.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_grid_cell_column_pos.restype = None


def style_set_grid_cell_column_pos(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_cell_column_pos.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_cell_column_pos.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_cell_column_pos(style, value)


_lib_lvgl.py_lv_style_set_grid_cell_column_span.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_grid_cell_column_span.restype = None


def style_set_grid_cell_column_span(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_cell_column_span.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_cell_column_span.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_cell_column_span(style, value)


_lib_lvgl.py_lv_style_set_grid_cell_row_pos.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_grid_cell_row_pos.restype = None


def style_set_grid_cell_row_pos(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_cell_row_pos.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_cell_row_pos.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_cell_row_pos(style, value)


_lib_lvgl.py_lv_style_set_grid_cell_row_span.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=coord_t
)
_lib_lvgl.py_lv_style_set_grid_cell_row_span.restype = None


def style_set_grid_cell_row_span(
    style: style_t,
    value: coord_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_cell_row_span.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_cell_row_span.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_cell_row_span(style, value)


_lib_lvgl.py_lv_style_set_grid_cell_x_align.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=grid_align_t
)
_lib_lvgl.py_lv_style_set_grid_cell_x_align.restype = None


def style_set_grid_cell_x_align(
    style: style_t,
    value: _type_grid_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_cell_x_align.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_cell_x_align.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_cell_x_align(style, value)


_lib_lvgl.py_lv_style_set_grid_cell_y_align.argtypes = __CArgList(
    style=_ctypes.POINTER(style_t),
    value=grid_align_t
)
_lib_lvgl.py_lv_style_set_grid_cell_y_align.restype = None


def style_set_grid_cell_y_align(
    style: style_t,
    value: _type_grid_align_t
) -> None:
    style = _convert_to_ctype(
        style, 
        _lib_lvgl.py_lv_style_set_grid_cell_y_align.argtypes.style
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_style_set_grid_cell_y_align.argtypes.value
    )

    _lib_lvgl.py_lv_style_set_grid_cell_y_align(style, value)


_lib_lvgl.py_lv_obj_set_style_grid_row_dsc_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=_ctypes.POINTER(coord_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_row_dsc_array.restype = None


def obj_set_style_grid_row_dsc_array(
    obj: obj_t,
    value: List[coord_t],
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_row_dsc_array.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_row_dsc_array.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_row_dsc_array.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_row_dsc_array(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_column_dsc_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=_ctypes.POINTER(coord_t),
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_column_dsc_array.restype = None


def obj_set_style_grid_column_dsc_array(
    obj: obj_t,
    value: List[coord_t],
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_column_dsc_array.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_column_dsc_array.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_column_dsc_array.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_column_dsc_array(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_row_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=grid_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_row_align.restype = None


def obj_set_style_grid_row_align(
    obj: obj_t,
    value: _type_grid_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_row_align.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_row_align.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_row_align.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_row_align(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_column_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=grid_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_column_align.restype = None


def obj_set_style_grid_column_align(
    obj: obj_t,
    value: _type_grid_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_column_align.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_column_align.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_column_align.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_column_align(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_cell_column_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_cell_column_pos.restype = None


def obj_set_style_grid_cell_column_pos(
    obj: obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_column_pos.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_column_pos.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_column_pos.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_cell_column_pos(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_cell_column_span.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_cell_column_span.restype = None


def obj_set_style_grid_cell_column_span(
    obj: obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_column_span.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_column_span.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_column_span.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_cell_column_span(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_cell_row_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_cell_row_pos.restype = None


def obj_set_style_grid_cell_row_pos(
    obj: obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_row_pos.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_row_pos.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_row_pos.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_cell_row_pos(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_cell_row_span.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=coord_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_cell_row_span.restype = None


def obj_set_style_grid_cell_row_span(
    obj: obj_t,
    value: coord_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_row_span.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_row_span.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_row_span.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_cell_row_span(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_cell_x_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=grid_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_cell_x_align.restype = None


def obj_set_style_grid_cell_x_align(
    obj: obj_t,
    value: _type_grid_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_x_align.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_x_align.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_x_align.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_cell_x_align(obj, value, selector)


_lib_lvgl.py_lv_obj_set_style_grid_cell_y_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    value=grid_align_t,
    selector=style_selector_t
)
_lib_lvgl.py_lv_obj_set_style_grid_cell_y_align.restype = None


def obj_set_style_grid_cell_y_align(
    obj: obj_t,
    value: _type_grid_align_t,
    selector: style_selector_t
) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_y_align.argtypes.obj
    )

    value = _convert_to_ctype(
        value, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_y_align.argtypes.value
    )

    selector = _convert_to_ctype(
        selector, 
        _lib_lvgl.py_lv_obj_set_style_grid_cell_y_align.argtypes.selector
    )

    _lib_lvgl.py_lv_obj_set_style_grid_cell_y_align(obj, value, selector)


_lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array.restype = _ctypes.POINTER(coord_t)


def obj_get_style_grid_row_dsc_array(
    obj: obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_row_dsc_array.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array.restype = _ctypes.POINTER(coord_t)


def obj_get_style_grid_column_dsc_array(
    obj: obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_column_dsc_array.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_row_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_row_align.restype = grid_align_t


def obj_get_style_grid_row_align(
    obj: obj_t,
    part: _type_uint32_t
) -> grid_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_row_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_row_align.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_row_align(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_row_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_row_align.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_column_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_column_align.restype = grid_align_t


def obj_get_style_grid_column_align(
    obj: obj_t,
    part: _type_uint32_t
) -> grid_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_column_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_column_align.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_column_align(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_column_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_column_align.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos.restype = coord_t


def obj_get_style_grid_cell_column_pos(
    obj: obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_cell_column_pos.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_cell_column_span.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_cell_column_span.restype = coord_t


def obj_get_style_grid_cell_column_span(
    obj: obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_column_span.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_column_span.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_cell_column_span(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_cell_column_span.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_cell_column_span.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos.restype = coord_t


def obj_get_style_grid_cell_row_pos(
    obj: obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_cell_row_pos.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_cell_row_span.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_cell_row_span.restype = coord_t


def obj_get_style_grid_cell_row_span(
    obj: obj_t,
    part: _type_uint32_t
) -> coord_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_row_span.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_row_span.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_cell_row_span(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_cell_row_span.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_cell_row_span.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_cell_x_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_cell_x_align.restype = grid_align_t


def obj_get_style_grid_cell_x_align(
    obj: obj_t,
    part: _type_uint32_t
) -> grid_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_x_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_x_align.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_cell_x_align(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_cell_x_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_cell_x_align.restype)
    )


_lib_lvgl.py_lv_obj_get_style_grid_cell_y_align.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t),
    part=uint32_t
)
_lib_lvgl.py_lv_obj_get_style_grid_cell_y_align.restype = grid_align_t


def obj_get_style_grid_cell_y_align(
    obj: obj_t,
    part: _type_uint32_t
) -> grid_align_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_y_align.argtypes.obj
    )

    part = _convert_to_ctype(
        part, 
        _lib_lvgl.py_lv_obj_get_style_grid_cell_y_align.argtypes.part
    )

    res = _lib_lvgl.py_lv_obj_get_style_grid_cell_y_align(obj, part)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_style_grid_cell_y_align.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_style_grid_cell_y_align.restype)
    )


_lib_lvgl.py_lv_theme_get_from_obj.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_get_from_obj.restype = _ctypes.POINTER(theme_t)


def theme_get_from_obj(obj: obj_t) -> theme_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_get_from_obj.argtypes.obj
    )

    res = _lib_lvgl.py_lv_theme_get_from_obj(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_get_from_obj.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_get_from_obj.restype)
    )


_lib_lvgl.py_lv_theme_apply.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_apply.restype = None


def theme_apply(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_apply.argtypes.obj
    )

    _lib_lvgl.py_lv_theme_apply(obj)


_lib_lvgl.py_lv_theme_set_parent.argtypes = __CArgList(
    new_theme=_ctypes.POINTER(theme_t),
    parent=_ctypes.POINTER(theme_t)
)
_lib_lvgl.py_lv_theme_set_parent.restype = None


def theme_set_parent(
    new_theme: theme_t,
    parent: theme_t
) -> None:
    new_theme = _convert_to_ctype(
        new_theme, 
        _lib_lvgl.py_lv_theme_set_parent.argtypes.new_theme
    )

    parent = _convert_to_ctype(
        parent, 
        _lib_lvgl.py_lv_theme_set_parent.argtypes.parent
    )

    _lib_lvgl.py_lv_theme_set_parent(new_theme, parent)


_lib_lvgl.py_lv_theme_set_apply_cb.argtypes = __CArgList(
    theme=_ctypes.POINTER(theme_t),
    apply_cb=theme_apply_cb_t
)
_lib_lvgl.py_lv_theme_set_apply_cb.restype = None


_theme_callback_storage = {}


def _theme_weakref_callback(ref):
    if ref in _theme_callback_storage:
        del _theme_callback_storage[ref]


def theme_set_apply_cb(
    theme: theme_t,
    apply_cb: theme_apply_cb_t
) -> None:
    theme = _convert_to_ctype(
        theme, 
        _lib_lvgl.py_lv_theme_set_apply_cb.argtypes.theme
    )

    if inspect.ismethod(apply_cb):
        # This has to be done this way because WeakMethod is not hashable so 
        # it cannot be stored in a dictionary aand the __hash__ method is read 
        # only so it can only be added upon class creation. So we dynamically
        # construct the class pointing __hash__ to the methods __hash__  
        weakmethod = type(
            'weakmethod', 
            (weakref.WeakMethod,), 
            {'__hash__': apply_cb.__hash__}
        )
        ref = weakmethod(apply_cb, _theme_weakref_callback)
    elif inspect.isfunction(apply_cb):
        ref = weakref.ref(apply_cb, _theme_weakref_callback)
    else:
        raise TypeError

    if ref not in _theme_callback_storage:
        apply_cb = theme_apply_cb_t(apply_cb)
        _theme_callback_storage[ref] = apply_cb
    else:
        apply_cb = _theme_callback_storage[ref]

    _lib_lvgl.py_lv_theme_set_apply_cb(theme, apply_cb)


_lib_lvgl.py_lv_theme_get_font_small.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_get_font_small.restype = _ctypes.POINTER(font_t)


def theme_get_font_small(obj: obj_t) -> font_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_get_font_small.argtypes.obj
    )

    res = _lib_lvgl.py_lv_theme_get_font_small(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_get_font_small.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_get_font_small.restype)
    )


_lib_lvgl.py_lv_theme_get_font_normal.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_get_font_normal.restype = _ctypes.POINTER(font_t)


def theme_get_font_normal(obj: obj_t) -> font_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_get_font_normal.argtypes.obj
    )

    res = _lib_lvgl.py_lv_theme_get_font_normal(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_get_font_normal.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_get_font_normal.restype)
    )


_lib_lvgl.py_lv_theme_get_font_large.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_get_font_large.restype = _ctypes.POINTER(font_t)


def theme_get_font_large(obj: obj_t) -> font_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_get_font_large.argtypes.obj
    )

    res = _lib_lvgl.py_lv_theme_get_font_large(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_get_font_large.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_get_font_large.restype)
    )


_lib_lvgl.py_lv_theme_get_color_primary.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_get_color_primary.restype = color_t


def theme_get_color_primary(obj: obj_t) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_get_color_primary.argtypes.obj
    )

    res = _lib_lvgl.py_lv_theme_get_color_primary(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_get_color_primary.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_get_color_primary.restype)
    )


_lib_lvgl.py_lv_theme_get_color_secondary.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_theme_get_color_secondary.restype = color_t


def theme_get_color_secondary(obj: obj_t) -> color_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_theme_get_color_secondary.argtypes.obj
    )

    res = _lib_lvgl.py_lv_theme_get_color_secondary(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_get_color_secondary.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_get_color_secondary.restype)
    )


_lib_lvgl.py_lv_theme_default_init.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    color_primary=color_t,
    color_secondary=color_t,
    dark=bool_t,
    font=_ctypes.POINTER(font_t)
)
_lib_lvgl.py_lv_theme_default_init.restype = _ctypes.POINTER(theme_t)


def theme_default_init(
    disp: disp_t,
    color_primary: color_t,
    color_secondary: color_t,
    dark: _type_bool_t,
    font: font_t
) -> theme_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_theme_default_init.argtypes.disp
    )

    color_primary = _convert_to_ctype(
        color_primary, 
        _lib_lvgl.py_lv_theme_default_init.argtypes.color_primary
    )

    color_secondary = _convert_to_ctype(
        color_secondary, 
        _lib_lvgl.py_lv_theme_default_init.argtypes.color_secondary
    )

    dark = _convert_to_ctype(
        dark, 
        _lib_lvgl.py_lv_theme_default_init.argtypes.dark
    )

    font = _convert_to_ctype(
        font, 
        _lib_lvgl.py_lv_theme_default_init.argtypes.font
    )

    res = _lib_lvgl.py_lv_theme_default_init(disp, color_primary, color_secondary, dark, font)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_default_init.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_default_init.restype)
    )


_lib_lvgl.py_lv_theme_default_get.argtypes = __CArgList()
_lib_lvgl.py_lv_theme_default_get.restype = _ctypes.POINTER(theme_t)


def theme_default_get() -> theme_t:

    res = _lib_lvgl.py_lv_theme_default_get()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_default_get.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_default_get.restype)
    )


_lib_lvgl.py_lv_theme_default_is_inited.argtypes = __CArgList()
_lib_lvgl.py_lv_theme_default_is_inited.restype = bool_t


def theme_default_is_inited() -> bool_t:

    res = _lib_lvgl.py_lv_theme_default_is_inited()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_default_is_inited.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_default_is_inited.restype)
    )


_lib_lvgl.py_lv_theme_basic_init.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_theme_basic_init.restype = _ctypes.POINTER(theme_t)


def theme_basic_init(disp: disp_t) -> theme_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_theme_basic_init.argtypes.disp
    )

    res = _lib_lvgl.py_lv_theme_basic_init(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_basic_init.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_basic_init.restype)
    )


_lib_lvgl.py_lv_theme_basic_is_inited.argtypes = __CArgList()
_lib_lvgl.py_lv_theme_basic_is_inited.restype = bool_t


def theme_basic_is_inited() -> bool_t:

    res = _lib_lvgl.py_lv_theme_basic_is_inited()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_theme_basic_is_inited.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_theme_basic_is_inited.restype)
    )


_lib_lvgl.py_lv_task_handler.argtypes = __CArgList()
_lib_lvgl.py_lv_task_handler.restype = uint32_t


def task_handler() -> uint32_t:

    res = _lib_lvgl.py_lv_task_handler()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_task_handler.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_task_handler.restype)
    )


_lib_lvgl.py_lv_obj_move_foreground.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_move_foreground.restype = None


def obj_move_foreground(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_move_foreground.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_move_foreground(obj)


_lib_lvgl.py_lv_obj_move_background.argtypes = __CArgList(
    obj=_ctypes.POINTER(obj_t)
)
_lib_lvgl.py_lv_obj_move_background.restype = None


def obj_move_background(obj: obj_t) -> None:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_move_background.argtypes.obj
    )

    _lib_lvgl.py_lv_obj_move_background(obj)


_lib_lvgl.py_lv_obj_get_child_id.argtypes = __CArgList(
    obj=_ctypes.POINTER(_obj_t)
)
_lib_lvgl.py_lv_obj_get_child_id.restype = uint32_t


def obj_get_child_id(obj: _obj_t) -> uint32_t:
    obj = _convert_to_ctype(
        obj, 
        _lib_lvgl.py_lv_obj_get_child_id.argtypes.obj
    )

    res = _lib_lvgl.py_lv_obj_get_child_id(obj)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_obj_get_child_id.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_obj_get_child_id.restype)
    )


_lib_lvgl.py_lv_sdl_window_create.argtypes = __CArgList(
    hor_res=coord_t,
    ver_res=coord_t
)
_lib_lvgl.py_lv_sdl_window_create.restype = _ctypes.POINTER(disp_t)


def sdl_window_create(
    hor_res: coord_t,
    ver_res: coord_t
) -> disp_t:
    hor_res = _convert_to_ctype(
        hor_res, 
        _lib_lvgl.py_lv_sdl_window_create.argtypes.hor_res
    )

    ver_res = _convert_to_ctype(
        ver_res, 
        _lib_lvgl.py_lv_sdl_window_create.argtypes.ver_res
    )

    res = _lib_lvgl.py_lv_sdl_window_create(hor_res, ver_res)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_sdl_window_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_sdl_window_create.restype)
    )


_lib_lvgl.py_lv_sdl_window_set_zoom.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    zoom=uint8_t
)
_lib_lvgl.py_lv_sdl_window_set_zoom.restype = None


def sdl_window_set_zoom(
    disp: disp_t,
    zoom: _type_uint8_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_sdl_window_set_zoom.argtypes.disp
    )

    zoom = _convert_to_ctype(
        zoom, 
        _lib_lvgl.py_lv_sdl_window_set_zoom.argtypes.zoom
    )

    _lib_lvgl.py_lv_sdl_window_set_zoom(disp, zoom)


_lib_lvgl.py_lv_sdl_window_get_zoom.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t)
)
_lib_lvgl.py_lv_sdl_window_get_zoom.restype = uint8_t


def sdl_window_get_zoom(disp: disp_t) -> uint8_t:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_sdl_window_get_zoom.argtypes.disp
    )

    res = _lib_lvgl.py_lv_sdl_window_get_zoom(disp)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_sdl_window_get_zoom.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_sdl_window_get_zoom.restype)
    )


_lib_lvgl.py__lv_sdl_get_disp_from_win_id.argtypes = __CArgList(
    win_id=uint32_t
)
_lib_lvgl.py__lv_sdl_get_disp_from_win_id.restype = _ctypes.POINTER(disp_t)


def _sdl_get_disp_from_win_id(
    win_id: _type_uint32_t
) -> disp_t:
    win_id = _convert_to_ctype(
        win_id, 
        _lib_lvgl.py__lv_sdl_get_disp_from_win_id.argtypes.win_id
    )

    res = _lib_lvgl.py__lv_sdl_get_disp_from_win_id(win_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_sdl_get_disp_from_win_id.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_sdl_get_disp_from_win_id.restype)
    )


_lib_lvgl.py_lv_sdl_window_set_title.argtypes = __CArgList(
    disp=_ctypes.POINTER(disp_t),
    title=_ctypes.POINTER(char_t)
)
_lib_lvgl.py_lv_sdl_window_set_title.restype = None


def sdl_window_set_title(
    disp: disp_t,
    title: _type_char_t
) -> None:
    disp = _convert_to_ctype(
        disp, 
        _lib_lvgl.py_lv_sdl_window_set_title.argtypes.disp
    )

    title = _convert_to_ctype(
        title, 
        _lib_lvgl.py_lv_sdl_window_set_title.argtypes.title
    )

    _lib_lvgl.py_lv_sdl_window_set_title(disp, title)


_lib_lvgl.py_lv_sdl_quit.argtypes = __CArgList()
_lib_lvgl.py_lv_sdl_quit.restype = None


def sdl_quit() -> None:

    _lib_lvgl.py_lv_sdl_quit()


_lib_lvgl.py_lv_sdl_mouse_create.argtypes = __CArgList()
_lib_lvgl.py_lv_sdl_mouse_create.restype = _ctypes.POINTER(indev_t)


def sdl_mouse_create() -> indev_t:

    res = _lib_lvgl.py_lv_sdl_mouse_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_sdl_mouse_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_sdl_mouse_create.restype)
    )


_lib_lvgl.py_lv_sdl_mousewheel_create.argtypes = __CArgList()
_lib_lvgl.py_lv_sdl_mousewheel_create.restype = _ctypes.POINTER(indev_t)


def sdl_mousewheel_create() -> indev_t:

    res = _lib_lvgl.py_lv_sdl_mousewheel_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_sdl_mousewheel_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_sdl_mousewheel_create.restype)
    )


_lib_lvgl.py_lv_sdl_keyboard_create.argtypes = __CArgList()
_lib_lvgl.py_lv_sdl_keyboard_create.restype = _ctypes.POINTER(indev_t)


def sdl_keyboard_create() -> indev_t:

    res = _lib_lvgl.py_lv_sdl_keyboard_create()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_sdl_keyboard_create.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_sdl_keyboard_create.restype)
    )


_lib_lvgl.py_lv_version_major.argtypes = __CArgList()
_lib_lvgl.py_lv_version_major.restype = int_t


def version_major() -> int_t:

    res = _lib_lvgl.py_lv_version_major()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_version_major.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_version_major.restype)
    )


_lib_lvgl.py_lv_version_minor.argtypes = __CArgList()
_lib_lvgl.py_lv_version_minor.restype = int_t


def version_minor() -> int_t:

    res = _lib_lvgl.py_lv_version_minor()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_version_minor.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_version_minor.restype)
    )


_lib_lvgl.py_lv_version_patch.argtypes = __CArgList()
_lib_lvgl.py_lv_version_patch.restype = int_t


def version_patch() -> int_t:

    res = _lib_lvgl.py_lv_version_patch()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_version_patch.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_version_patch.restype)
    )


_lib_lvgl.py_lv_version_info.argtypes = __CArgList()
_lib_lvgl.py_lv_version_info.restype = _ctypes.POINTER(char_t)


def version_info() -> char_t:

    res = _lib_lvgl.py_lv_version_info()
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py_lv_version_info.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py_lv_version_info.restype)
    )


_lib_lvgl.py_lv_demo_benchmark.argtypes = __CArgList(
    mode=demo_benchmark_mode_t
)
_lib_lvgl.py_lv_demo_benchmark.restype = None


def demo_benchmark(
    mode: _type_demo_benchmark_mode_t
) -> None:
    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_demo_benchmark.argtypes.mode
    )

    _lib_lvgl.py_lv_demo_benchmark(mode)


_lib_lvgl.py_lv_demo_benchmark_run_scene.argtypes = __CArgList(
    mode=demo_benchmark_mode_t,
    scene_no=uint16_t
)
_lib_lvgl.py_lv_demo_benchmark_run_scene.restype = None


def demo_benchmark_run_scene(
    mode: _type_demo_benchmark_mode_t,
    scene_no: _type_uint16_t
) -> None:
    mode = _convert_to_ctype(
        mode, 
        _lib_lvgl.py_lv_demo_benchmark_run_scene.argtypes.mode
    )

    scene_no = _convert_to_ctype(
        scene_no, 
        _lib_lvgl.py_lv_demo_benchmark_run_scene.argtypes.scene_no
    )

    _lib_lvgl.py_lv_demo_benchmark_run_scene(mode, scene_no)


_lib_lvgl.py_lv_demo_music.argtypes = __CArgList()
_lib_lvgl.py_lv_demo_music.restype = None


def demo_music() -> None:

    _lib_lvgl.py_lv_demo_music()


_lib_lvgl.py__lv_demo_music_get_title.argtypes = __CArgList(
    track_id=uint32_t
)
_lib_lvgl.py__lv_demo_music_get_title.restype = _ctypes.POINTER(char_t)


def _demo_music_get_title(
    track_id: _type_uint32_t
) -> char_t:
    track_id = _convert_to_ctype(
        track_id, 
        _lib_lvgl.py__lv_demo_music_get_title.argtypes.track_id
    )

    res = _lib_lvgl.py__lv_demo_music_get_title(track_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_demo_music_get_title.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_demo_music_get_title.restype)
    )


_lib_lvgl.py__lv_demo_music_get_artist.argtypes = __CArgList(
    track_id=uint32_t
)
_lib_lvgl.py__lv_demo_music_get_artist.restype = _ctypes.POINTER(char_t)


def _demo_music_get_artist(
    track_id: _type_uint32_t
) -> char_t:
    track_id = _convert_to_ctype(
        track_id, 
        _lib_lvgl.py__lv_demo_music_get_artist.argtypes.track_id
    )

    res = _lib_lvgl.py__lv_demo_music_get_artist(track_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_demo_music_get_artist.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_demo_music_get_artist.restype)
    )


_lib_lvgl.py__lv_demo_music_get_genre.argtypes = __CArgList(
    track_id=uint32_t
)
_lib_lvgl.py__lv_demo_music_get_genre.restype = _ctypes.POINTER(char_t)


def _demo_music_get_genre(
    track_id: _type_uint32_t
) -> char_t:
    track_id = _convert_to_ctype(
        track_id, 
        _lib_lvgl.py__lv_demo_music_get_genre.argtypes.track_id
    )

    res = _lib_lvgl.py__lv_demo_music_get_genre(track_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_demo_music_get_genre.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_demo_music_get_genre.restype)
    )


_lib_lvgl.py__lv_demo_music_get_track_length.argtypes = __CArgList(
    track_id=uint32_t
)
_lib_lvgl.py__lv_demo_music_get_track_length.restype = uint32_t


def _demo_music_get_track_length(
    track_id: _type_uint32_t
) -> uint32_t:
    track_id = _convert_to_ctype(
        track_id, 
        _lib_lvgl.py__lv_demo_music_get_track_length.argtypes.track_id
    )

    res = _lib_lvgl.py__lv_demo_music_get_track_length(track_id)
    return _convert_to_py_type(
        res, 
        _strip_pointer(_lib_lvgl.py__lv_demo_music_get_track_length.restype), 
        pointer_count=_pointer_count(_lib_lvgl.py__lv_demo_music_get_track_length.restype)
    )


_lib_lvgl.py_lv_demo_stress.argtypes = __CArgList()
_lib_lvgl.py_lv_demo_stress.restype = None


def demo_stress() -> None:

    _lib_lvgl.py_lv_demo_stress()


_lib_lvgl.py_lv_demo_widgets.argtypes = __CArgList()
_lib_lvgl.py_lv_demo_widgets.restype = None


def demo_widgets() -> None:

    _lib_lvgl.py_lv_demo_widgets()


_lib_lvgl.py_lv_demo_flex_layout.argtypes = __CArgList()
_lib_lvgl.py_lv_demo_flex_layout.restype = None


def demo_flex_layout() -> None:

    _lib_lvgl.py_lv_demo_flex_layout()


_lib_lvgl.py_lv_demo_transform.argtypes = __CArgList()
_lib_lvgl.py_lv_demo_transform.restype = None


def demo_transform() -> None:

    _lib_lvgl.py_lv_demo_transform()
  # NOQA
# ************************************************

setattr(mem_monitor_t, '__SIZE__', _ctypes.sizeof(mem_monitor_t))
setattr(timer_t, '__SIZE__', _ctypes.sizeof(timer_t))
setattr(sqrt_res_t, '__SIZE__', _ctypes.sizeof(sqrt_res_t))
setattr(anim_bezier3_para_t, '__SIZE__', _ctypes.sizeof(anim_bezier3_para_t))
setattr(anim_t, '__SIZE__', _ctypes.sizeof(anim_t))
setattr(anim_timeline_dsc_t, '__SIZE__', _ctypes.sizeof(anim_timeline_dsc_t))
setattr(anim_timeline_t, '__SIZE__', _ctypes.sizeof(anim_timeline_t))
setattr(point_t, '__SIZE__', _ctypes.sizeof(point_t))
setattr(area_t, '__SIZE__', _ctypes.sizeof(area_t))
setattr(font_glyph_dsc_t, '__SIZE__', _ctypes.sizeof(font_glyph_dsc_t))
setattr(font_t, '__SIZE__', _ctypes.sizeof(font_t))
setattr(color_t, '__SIZE__', _ctypes.sizeof(color_t))
setattr(color16_t, '__SIZE__', _ctypes.sizeof(color16_t))
setattr(color32_t, '__SIZE__', _ctypes.sizeof(color32_t))
setattr(color_hsv_t, '__SIZE__', _ctypes.sizeof(color_hsv_t))
setattr(color_filter_dsc_t, '__SIZE__', _ctypes.sizeof(color_filter_dsc_t))
setattr(gradient_stop_t, '__SIZE__', _ctypes.sizeof(gradient_stop_t))
setattr(grad_dsc_t, '__SIZE__', _ctypes.sizeof(grad_dsc_t))
setattr(style_value_t, '__SIZE__', _ctypes.sizeof(style_value_t))
setattr(style_transition_dsc_t, '__SIZE__', _ctypes.sizeof(style_transition_dsc_t))
setattr(style_const_prop_t, '__SIZE__', _ctypes.sizeof(style_const_prop_t))
setattr(style_t, '__SIZE__', _ctypes.sizeof(style_t))
setattr(event_dsc_t, '__SIZE__', _ctypes.sizeof(event_dsc_t))
setattr(event_list_t, '__SIZE__', _ctypes.sizeof(event_list_t))
setattr(event_t, '__SIZE__', _ctypes.sizeof(event_t))
setattr(img_header_t, '__SIZE__', _ctypes.sizeof(img_header_t))
setattr(img_dsc_t, '__SIZE__', _ctypes.sizeof(img_dsc_t))
setattr(fs_drv_t, '__SIZE__', _ctypes.sizeof(fs_drv_t))
setattr(fs_file_cache_t, '__SIZE__', _ctypes.sizeof(fs_file_cache_t))
setattr(fs_file_t, '__SIZE__', _ctypes.sizeof(fs_file_t))
setattr(fs_dir_t, '__SIZE__', _ctypes.sizeof(fs_dir_t))
setattr(img_decoder_t, '__SIZE__', _ctypes.sizeof(img_decoder_t))
setattr(img_decoder_dsc_t, '__SIZE__', _ctypes.sizeof(img_decoder_dsc_t))
setattr(_img_cache_entry_t, '__SIZE__', _ctypes.sizeof(_img_cache_entry_t))
setattr(img_cache_manager_t, '__SIZE__', _ctypes.sizeof(img_cache_manager_t))
setattr(draw_task_t, '__SIZE__', _ctypes.sizeof(draw_task_t))
setattr(draw_mask_t, '__SIZE__', _ctypes.sizeof(draw_mask_t))
setattr(draw_unit_t, '__SIZE__', _ctypes.sizeof(draw_unit_t))
setattr(layer_t, '__SIZE__', _ctypes.sizeof(layer_t))
setattr(draw_dsc_base_t, '__SIZE__', _ctypes.sizeof(draw_dsc_base_t))
setattr(grad_t, '__SIZE__', _ctypes.sizeof(grad_t))
setattr(draw_rect_dsc_t, '__SIZE__', _ctypes.sizeof(draw_rect_dsc_t))
setattr(draw_fill_dsc_t, '__SIZE__', _ctypes.sizeof(draw_fill_dsc_t))
setattr(draw_bg_img_dsc_t, '__SIZE__', _ctypes.sizeof(draw_bg_img_dsc_t))
setattr(draw_border_dsc_t, '__SIZE__', _ctypes.sizeof(draw_border_dsc_t))
setattr(draw_box_shadow_dsc_t, '__SIZE__', _ctypes.sizeof(draw_box_shadow_dsc_t))
setattr(draw_label_hint_t, '__SIZE__', _ctypes.sizeof(draw_label_hint_t))
setattr(draw_label_dsc_t, '__SIZE__', _ctypes.sizeof(draw_label_dsc_t))
setattr(draw_glyph_dsc_t, '__SIZE__', _ctypes.sizeof(draw_glyph_dsc_t))
setattr(draw_img_sup_t, '__SIZE__', _ctypes.sizeof(draw_img_sup_t))
setattr(draw_img_dsc_t, '__SIZE__', _ctypes.sizeof(draw_img_dsc_t))
setattr(draw_arc_dsc_t, '__SIZE__', _ctypes.sizeof(draw_arc_dsc_t))
setattr(draw_line_dsc_t, '__SIZE__', _ctypes.sizeof(draw_line_dsc_t))
setattr(draw_triangle_dsc_t, '__SIZE__', _ctypes.sizeof(draw_triangle_dsc_t))
setattr(draw_mask_rect_dsc_t, '__SIZE__', _ctypes.sizeof(draw_mask_rect_dsc_t))
setattr(layout_dsc_t, '__SIZE__', _ctypes.sizeof(layout_dsc_t))
setattr(_obj_style_t, '__SIZE__', _ctypes.sizeof(_obj_style_t))
setattr(_obj_style_transition_dsc_t, '__SIZE__', _ctypes.sizeof(_obj_style_transition_dsc_t))
setattr(obj_class_t, '__SIZE__', _ctypes.sizeof(obj_class_t))
setattr(ll_t, '__SIZE__', _ctypes.sizeof(ll_t))
setattr(group_t, '__SIZE__', _ctypes.sizeof(group_t))
setattr(indev_data_t, '__SIZE__', _ctypes.sizeof(indev_data_t))
setattr(hit_test_info_t, '__SIZE__', _ctypes.sizeof(hit_test_info_t))
setattr(cover_check_info_t, '__SIZE__', _ctypes.sizeof(cover_check_info_t))
setattr(_obj_spec_attr_t, '__SIZE__', _ctypes.sizeof(_obj_spec_attr_t))
setattr(obj_t, '__SIZE__', _ctypes.sizeof(obj_t))
setattr(font_fmt_txt_glyph_dsc_t, '__SIZE__', _ctypes.sizeof(font_fmt_txt_glyph_dsc_t))
setattr(font_fmt_txt_cmap_t, '__SIZE__', _ctypes.sizeof(font_fmt_txt_cmap_t))
setattr(font_fmt_txt_kern_pair_t, '__SIZE__', _ctypes.sizeof(font_fmt_txt_kern_pair_t))
setattr(font_fmt_txt_kern_classes_t, '__SIZE__', _ctypes.sizeof(font_fmt_txt_kern_classes_t))
setattr(font_fmt_txt_glyph_cache_t, '__SIZE__', _ctypes.sizeof(font_fmt_txt_glyph_cache_t))
setattr(font_fmt_txt_dsc_t, '__SIZE__', _ctypes.sizeof(font_fmt_txt_dsc_t))
setattr(img_t, '__SIZE__', _ctypes.sizeof(img_t))
setattr(animimg_t, '__SIZE__', _ctypes.sizeof(animimg_t))
setattr(arc_t, '__SIZE__', _ctypes.sizeof(arc_t))
setattr(label_t, '__SIZE__', _ctypes.sizeof(label_t))
setattr(_bar_anim_t, '__SIZE__', _ctypes.sizeof(_bar_anim_t))
setattr(bar_t, '__SIZE__', _ctypes.sizeof(bar_t))
setattr(btn_t, '__SIZE__', _ctypes.sizeof(btn_t))
setattr(btnmatrix_t, '__SIZE__', _ctypes.sizeof(btnmatrix_t))
setattr(calendar_date_t, '__SIZE__', _ctypes.sizeof(calendar_date_t))
setattr(calendar_t, '__SIZE__', _ctypes.sizeof(calendar_t))
setattr(canvas_t, '__SIZE__', _ctypes.sizeof(canvas_t))
setattr(chart_series_t, '__SIZE__', _ctypes.sizeof(chart_series_t))
setattr(chart_cursor_t, '__SIZE__', _ctypes.sizeof(chart_cursor_t))
setattr(chart_tick_dsc_t, '__SIZE__', _ctypes.sizeof(chart_tick_dsc_t))
setattr(chart_t, '__SIZE__', _ctypes.sizeof(chart_t))
setattr(checkbox_t, '__SIZE__', _ctypes.sizeof(checkbox_t))
setattr(dropdown_t, '__SIZE__', _ctypes.sizeof(dropdown_t))
setattr(dropdown_list_t, '__SIZE__', _ctypes.sizeof(dropdown_list_t))
setattr(imgbtn_src_info_t, '__SIZE__', _ctypes.sizeof(imgbtn_src_info_t))
setattr(imgbtn_t, '__SIZE__', _ctypes.sizeof(imgbtn_t))
setattr(keyboard_t, '__SIZE__', _ctypes.sizeof(keyboard_t))
setattr(led_t, '__SIZE__', _ctypes.sizeof(led_t))
setattr(line_t, '__SIZE__', _ctypes.sizeof(line_t))
setattr(menu_load_page_event_data_t, '__SIZE__', _ctypes.sizeof(menu_load_page_event_data_t))
setattr(menu_history_t, '__SIZE__', _ctypes.sizeof(menu_history_t))
setattr(menu_t, '__SIZE__', _ctypes.sizeof(menu_t))
setattr(menu_page_t, '__SIZE__', _ctypes.sizeof(menu_page_t))
setattr(meter_indicator_t, '__SIZE__', _ctypes.sizeof(meter_indicator_t))
setattr(meter_t, '__SIZE__', _ctypes.sizeof(meter_t))
setattr(msgbox_t, '__SIZE__', _ctypes.sizeof(msgbox_t))
setattr(roller_t, '__SIZE__', _ctypes.sizeof(roller_t))
setattr(slider_t, '__SIZE__', _ctypes.sizeof(slider_t))
setattr(span_t, '__SIZE__', _ctypes.sizeof(span_t))
setattr(spangroup_t, '__SIZE__', _ctypes.sizeof(spangroup_t))
setattr(textarea_t, '__SIZE__', _ctypes.sizeof(textarea_t))
setattr(spinbox_t, '__SIZE__', _ctypes.sizeof(spinbox_t))
setattr(switch_t, '__SIZE__', _ctypes.sizeof(switch_t))
setattr(table_t, '__SIZE__', _ctypes.sizeof(table_t))
setattr(tabview_t, '__SIZE__', _ctypes.sizeof(tabview_t))
setattr(tileview_t, '__SIZE__', _ctypes.sizeof(tileview_t))
setattr(tileview_tile_t, '__SIZE__', _ctypes.sizeof(tileview_tile_t))
setattr(win_t, '__SIZE__', _ctypes.sizeof(win_t))
setattr(msg_t, '__SIZE__', _ctypes.sizeof(msg_t))
setattr(pinyin_dict_t, '__SIZE__', _ctypes.sizeof(pinyin_dict_t))
setattr(ime_pinyin_k9_py_str_t, '__SIZE__', _ctypes.sizeof(ime_pinyin_k9_py_str_t))
setattr(ime_pinyin_t, '__SIZE__', _ctypes.sizeof(ime_pinyin_t))
setattr(file_explorer_t, '__SIZE__', _ctypes.sizeof(file_explorer_t))
setattr(barcode_t, '__SIZE__', _ctypes.sizeof(barcode_t))
setattr(gd_Palette, '__SIZE__', _ctypes.sizeof(gd_Palette))
setattr(gd_GCE, '__SIZE__', _ctypes.sizeof(gd_GCE))
setattr(gd_GIF, '__SIZE__', _ctypes.sizeof(gd_GIF))
setattr(gif_t, '__SIZE__', _ctypes.sizeof(gif_t))
setattr(qrcode_t, '__SIZE__', _ctypes.sizeof(qrcode_t))
setattr(theme_t, '__SIZE__', _ctypes.sizeof(theme_t))
setattr(_disp_t, '__SIZE__', _ctypes.sizeof(_disp_t))
setattr(_indev_t, '__SIZE__', _ctypes.sizeof(_indev_t))  # NOQA

# ************************************************


SYMBOL_PLUS = b"\xEF\x81\xA7"


def STYLE_CONST_BORDER_COLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_BORDER_COLOR,
        'value': {'color': val}
    }


SPAN_SNIPPET_STACK_SIZE = 64
SYMBOL_VOLUME_MID = b"\xEF\x80\xA7"


def OPA_MIX3(a1, a2, a3):
    return (int32_t(a1).value * a2 * a3) >> 16


def STYLE_CONST_ARC_ROUNDED(val):
    return {
        'prop_ptr': _style_const_prop_id_ARC_ROUNDED,
        'value': {'num': int32_t(val)}
    }


SYMBOL_DOWNLOAD = b"\xEF\x80\x99"
SYMBOL_EDIT = b"\xEF\x8C\x84"


def STYLE_CONST_HEIGHT(val):
    return {
        'prop_ptr': _style_const_prop_id_HEIGHT,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_TEXT_LETTER_SPACE(val):
    return {
        'prop_ptr': _style_const_prop_id_TEXT_LETTER_SPACE,
        'value': {'num': int32_t(val)}
    }


DRAW_SW_LAYER_SIMPLE_BUF_SIZE = 64 * 1024


def _DPX_CALC(dpi, n):
    if n == 0:
        return 0
    return MAX(((dpi * n + 80) / 160), 1)


OBJ_FLAG_SNAPABLE = OBJ_FLAG_SNAPPABLE


SYMBOL_TINT = b"\xEF\x81\x83"
STYLE_CONST_PROPS_END = {
    'prop_ptr': style_const_prop_id_inv,
    'value': {'num': 0}
}


DISP_ROT_MAX_BUF = 1920 * 1080 * 4


def ANIM_SET_EASE_IN_CUBIC(a):
    return _PARA(a, 0.32, 0, 0.67, 0)


SYMBOL_CALL = b"\xEF\x82\x95"
SYMBOL_EYE_OPEN = b"\xEF\x81\xAE"


def SMAX_OF(t):
    return ((0x1 << ((_ctypes.sizeof(t) * 8) - 1)) - 1) | (
                0x7 << ((_ctypes.sizeof(t) * 8) - 4))


def COORD_IS_SPEC(x):
    return _COORD_TYPE(x) == _COORD_TYPE_SPEC


LONG_MAX = 9223372036854775807


def CANVAS_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h):
    return IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h)


SEEK_END = 2
SHRT_MIN = -32768


def STYLE_CONST_GRID_ROW_DSC_ARRAY(val):
    return {
        'prop_ptr': STYLE_GRID_ROW_DSC_ARRAY,
        'value': {'ptr': _ctypes.cast(_ctypes.pointer(val), void_t)}
    }


GRADIENT_MAX_STOPS = 32


def STYLE_CONST_OUTLINE_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_OUTLINE_WIDTH,
        'value': {'num': int32_t(val)}
    }


STYLE_PROP_FLAG_TRANSFORM = 1 << 5


def ANIM_SET_EASE_IN_OUT_BACK(a):
    return _PARA(a, 0.68, - 0.6, 0.32, 1.6)


BIDI_BASE_DIR_DEF = BASE_DIR_AUTO


def _LL_READ(list, i):
    i = _ll_get_head(list)

    while i is not None:
        i = _ll_get_next(list, i)


def _CONCAT(x, y):
    return x + y


def STYLE_CONST_BG_IMG_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_IMG_OPA,
        'value': {'num': int32_t(val)}
    }


def IS_SIGNED(t):
    return t(-1).value < t(0).value


SYMBOL_GPS = b"\xEF\x84\xA4"


def STYLE_CONST_BG_GRAD(val):
    return {'prop_ptr': _style_const_prop_id_BG_GRAD, 'value': {'ptr': val}}


USHRT_MAX = 65535
STYLE_SENTINEL_VALUE = 0xAABBCCDD

SYMBOL_SETTINGS = b"\xEF\x80\x93"


def ANIM_SET_EASE_OUT_CUBIC(a):
    return _PARA(a, 0.33, 1, 0.68, 1)


def STYLE_CONST_MAX_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_MAX_WIDTH,
        'value': {'num': int32_t(val)}
    }


STYLE_PROP_META_INITIAL = 0x4000


def STYLE_CONST_ANIM_TIME(val):
    return {
        'prop_ptr': _style_const_prop_id_ANIM_TIME,
        'value': {'num': int32_t(val)}
    }


def ANIM_SET_EASE_IN_OUT_CUBIC(a):
    return _PARA(a, 0.65, 0, 0.35, 1)


SYMBOL_PLAY = b"\xEF\x81\x8B"
SPINBOX_MAX_DIGIT_COUNT = 10


def UDIV255(x):
    return (x * 0x8081) >> 0x17


SYMBOL_BATTERY_EMPTY = b"\xEF\x89\x84"
LABEL_DOT_NUM = 3


def STYLE_CONST_BORDER_POST(val):
    return {
        'prop_ptr': _style_const_prop_id_BORDER_POST,
        'value': {'num': int32_t(val)}
    }


SYMBOL_UP = b"\xEF\x81\xB7"
TXT_BREAK_CHARS = b" ,.;:-_)]}"


def STYLE_CONST_TRANSFORM_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSFORM_WIDTH,
        'value': {'num': int32_t(val)}
    }


SYMBOL_EJECT = b"\xEF\x81\x92"


def STYLE_CONST_ANIM(val):
    return {'prop_ptr': _style_const_prop_id_ANIM, 'value': {'ptr': val}}


SYMBOL_BELL = b"\xEF\x83\xB3"

SYMBOL_WARNING = b"\xEF\x81\xB1"


def STYLE_CONST_BG_DITHER_MODE(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_DITHER_MODE,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_SHADOW_SPREAD(val):
    return {
        'prop_ptr': _style_const_prop_id_SHADOW_SPREAD,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_MARGIN_BOTTOM(val):
    return {
        'prop_ptr': _style_const_prop_id_MARGIN_BOTTOM,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_TEXT_FONT(val):
    return {'prop_ptr': _style_const_prop_id_TEXT_FONT, 'value': {'ptr': val}}


def MAX3(a, b, c):
    return MAX(MAX(a, b), c)


def STYLE_CONST_SHADOW_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_SHADOW_OPA,
        'value': {'num': int32_t(val)}
    }


def CANVAS_BUF_SIZE_INDEXED_8BIT(w, h):
    return IMG_BUF_SIZE_INDEXED_8BIT(w, h)


SYMBOL_USB = b"\xEF\x8a\x87"


def STYLE_CONST_PAD_ROW(val):
    return {
        'prop_ptr': _style_const_prop_id_PAD_ROW,
        'value': {'num': int32_t(val)}
    }


SYMBOL_FILE = b"\xEF\x85\x9B"
LED_BRIGHT_MAX = 255

GRID_TEMPLATE_LAST = COORD_MAX
SYMBOL_DUMMY = b"\xEF\xA3\xBF"


def STYLE_CONST_PAD_COLUMN(val):
    return {
        'prop_ptr': _style_const_prop_id_PAD_COLUMN,
        'value': {'num': int32_t(val)}
    }


def _CONCAT3(x, y, z):
    return x + y + z


_COORD_TYPE_SHIFT = 29
_ZOOM_INV_UPSCALE = 5


def STYLE_CONST_BORDER_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_BORDER_WIDTH,
        'value': {'num': int32_t(val)}
    }


def DPX(n):
    return _DPX_CALC(disp_get_dpi(None), n)


def STYLE_CONST_GRID_Y_ALIGN(val):
    return {'prop_ptr': STYLE_GRID_Y_ALIGN, 'value': {'num': grid_align_t(val)}}


def STYLE_CONST_MARGIN_TOP(val):
    return {
        'prop_ptr': _style_const_prop_id_MARGIN_TOP,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_TRANSITION(val):
    return {'prop_ptr': _style_const_prop_id_TRANSITION, 'value': {'ptr': val}}


def STYLE_CONST_BG_COLOR(val):
    return {'prop_ptr': _style_const_prop_id_BG_COLOR, 'value': {'color': val}}


def STYLE_CONST_BG_IMG_RECOLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_IMG_RECOLOR,
        'value': {'color': val}
    }


def CANVAS_BUF_SIZE_TRUE_COLOR(w, h):
    return IMG_BUF_SIZE_TRUE_COLOR(w, h)


def STYLE_CONST_LINE_COLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_LINE_COLOR,
        'value': {'color': val}
    }


SYMBOL_PASTE = b"\xEF\x83\xAA"
STYLE_PROP_FLAG_PARENT_LAYOUT_UPDATE = 1 << 3


def IMG_BUF_SIZE_ALPHA_4BIT(w, h):
    return ((w + 1) // 2) * h


OPA_MIN = 2
BEZIER_VAL_SHIFT = 10


def CANVAS_BUF_SIZE_INDEXED_2BIT(w, h):
    return IMG_BUF_SIZE_INDEXED_2BIT(w, h)


def STYLE_CONST_TRANSFORM_PIVOT_X(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSFORM_PIVOT_X,
        'value': {'num': int32_t(val)}
    }


def BEZIER_VAL_FLOAT(f):
    return int32_t(f * BEZIER_VAL_MAX)


COORD_MIN = -COORD_MAX

SYMBOL_REFRESH = b"\xEF\x80\xA1"


def COLOR_FORMAT_IS_INDEXED(cf):
    return COLOR_FORMAT_I1 <= cf <= COLOR_FORMAT_I8


SYMBOL_POWER = b"\xEF\x80\x91"


def CANVAS_BUF_SIZE_ALPHA_4BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_4BIT(w, h)


KEYBOARD_CTRL_BTN_FLAGS = BTNMATRIX_CTRL_NO_REPEAT | BTNMATRIX_CTRL_CLICK_TRIG | BTNMATRIX_CTRL_CHECKED
SYMBOL_OK = b"\xEF\x80\x8C"


def HOR_RES():
    return disp_get_hor_res(disp_get_default())


CALENDAR_DEFAULT_MONTH_NAMES = (
"January", "February", "March", "April", "May", "June", "July", "August",
"September", "October", "November", "December")


def STYLE_CONST_LAYOUT(val):
    return {
        'prop_ptr': _style_const_prop_id_LAYOUT,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_BG_IMG_TILED(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_IMG_TILED,
        'value': {'num': int32_t(val)}
    }


def _COORD_TYPE(x):
    return x & _COORD_TYPE_MASK



def STYLE_CONST_ALIGN(val):
    return {
        'prop_ptr': _style_const_prop_id_ALIGN,
        'value': {'num': int32_t(val)}
    }


IMGFONT_USE_IMG_CACHE_HEADER = 0
USE_LINE = 1
DRAW_SW_SHADOW_CACHE_SIZE = 1024


def CANVAS_BUF_SIZE_ALPHA_2BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_2BIT(w, h)


STYLE_PROP_FLAG_INHERITABLE = 1 << 0


def STYLE_CONST_IMG_RECOLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_IMG_RECOLOR,
        'value': {'color': val}
    }


def STYLE_CONST_GRID_COLUMN_ALIGN(val):
    return {
        'prop_ptr': STYLE_GRID_COLUMN_ALIGN,
        'value': {'num': grid_align_t(val)}
    }


UCHAR_MAX = 255

SYMBOL_PAUSE = b"\xEF\x81\x8C"


def STYLE_CONST_FLEX_CROSS_PLACE(val):
    return {
        'prop_ptr': STYLE_FLEX_CROSS_PLACE,
        'value': {'num': flex_flow_t(val)}
    }


SYMBOL_DIRECTORY = b"\xEF\x81\xBB"
LAYER_MAX_MEMORY_USAGE = 1024

SYMBOL_LEFT = b"\xEF\x81\x93"


def CANVAS_BUF_SIZE_ALPHA_8BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_8BIT(w, h)


def STYLE_CONST_GRID_ROW_ALIGN(val):
    return {
        'prop_ptr': STYLE_GRID_ROW_ALIGN,
        'value': {'num': grid_align_t(val)}
    }


def STYLE_CONST_GRID_CELL_COLUMN_SPAN(val):
    return {
        'prop_ptr': STYLE_GRID_CELL_COLUMN_SPAN,
        'value': {'num': coord_t(val)}
    }


SYMBOL_BULLET = b"\xE2\x80\xA2"
INDEV_STATE_REL = INDEV_STATE_RELEASED


def IMG_BUF_SIZE_INDEXED_4BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_4BIT(w, h) + 4 * 16



def STYLE_CONST_SHADOW_COLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_SHADOW_COLOR,
        'value': {'color': val}
    }


DRAW_SW_DRAW_UNIT_CNT = 1

OS_CUSTOM = 255
spinbox_set_pos = spinbox_set_cursor_pos
STYLE_PROP_META_INHERIT = 0x8000


def _PARA(a, x1, y1, x2, y2):
    a.parameter.bezier3 = _anim_bezier3_para_t(
        BEZIER_VAL_FLOAT(x1),
        BEZIER_VAL_FLOAT(y1),
        BEZIER_VAL_FLOAT(x2),
        BEZIER_VAL_FLOAT(y2)
        )
    return a


LABEL_TEXT_SELECTION = 1


def ANIM_SET_EASE_OUT_CIRC(a):
    return _PARA(a, 0, 0.55, 0.45, 1)


def STYLE_CONST_IMG_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_IMG_OPA,
        'value': {'num': int32_t(val)}
    }


def ANIM_SET_EASE_IN_OUT_SINE(a):
    return _PARA(a, 0.37, 0, 0.63, 1)


def UMAX_OF(t):
    return ((0x1 << ((_ctypes.sizeof(t) * 8) - 1)) - 1) | (
                0xF << ((_ctypes.sizeof(t) * 8) - 4))


SHRT_MAX = 32767
LONG_MIN = -9223372036854775808
SYMBOL_UPLOAD = b"\xEF\x82\x93"


def STYLE_CONST_OUTLINE_COLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_OUTLINE_COLOR,
        'value': {'color': val}
    }


SYMBOL_BARS = b"\xEF\x83\x89"

DRAW_LABEL_NO_TXT_SEL = 0xFFFF
CHAR_MAX = 127
OPA_MAX = 253
TEXTAREA_CURSOR_LAST = 0x7FFF


def OPA_MIX2(a1, a2):
    return (int32_t(a1).value * a2) >> 8


SYMBOL_VIDEO = b"\xEF\x80\x88"


def STYLE_CONST_BG_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_OPA,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_TEXT_COLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_TEXT_COLOR,
        'value': {'color': val}
    }


def STYLE_CONST_TRANSFORM_ZOOM(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSFORM_ZOOM,
        'value': {'num': int32_t(val)}
    }


SYMBOL_VOLUME_MAX = b"\xEF\x80\xA8"


def STYLE_CONST_ARC_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_ARC_WIDTH,
        'value': {'num': int32_t(val)}
    }


def ANIM_SET_EASE_OUT_EXPO(a):
    return _PARA(a, 0.16, 1, 0.3, 1)


SCHAR_MAX = 127

IMGFONT_PATH_MAX_LEN = 64


def STYLE_CONST_MIN_HEIGHT(val):
    return {
        'prop_ptr': _style_const_prop_id_MIN_HEIGHT,
        'value': {'num': int32_t(val)}
    }


STYLE_PROP_META_MASK = STYLE_PROP_META_INHERIT | STYLE_PROP_META_INITIAL


def STYLE_CONST_SHADOW_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_SHADOW_WIDTH,
        'value': {'num': int32_t(val)}
    }


USE_CALENDAR_HEADER_ARROW = 1


def STYLE_CONST_RADIUS(val):
    return {
        'prop_ptr': _style_const_prop_id_RADIUS,
        'value': {'num': int32_t(val)}
    }


def IMG_BUF_SIZE_ALPHA_2BIT(w, h):
    return ((w + 3) // 4) * h


IME_PINYIN_K9_CAND_TEXT_NUM = 3


def STYLE_CONST_TRANSLATE_X(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSLATE_X,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_TEXT_ALIGN(val):
    return {
        'prop_ptr': _style_const_prop_id_TEXT_ALIGN,
        'value': {'num': int32_t(val)}
    }


def ANIM_SET_EASE_IN_QUINT(a):
    return _PARA(a, 0.64, 0, 0.78, 0)


SYMBOL_RIGHT = b"\xEF\x81\x94"
LED_BRIGHT_MIN = 80
SYMBOL_BATTERY_1 = b"\xEF\x89\x83"


def STYLE_CONST_TRANSFORM_ANGLE(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSFORM_ANGLE,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_TEXT_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_TEXT_OPA,
        'value': {'num': int32_t(val)}
    }


SYMBOL_SHUFFLE = b"\xEF\x81\xB4"

STYLE_PROP_FLAG_NONE = 0
TXT_ENC_UTF8 = 1
INDEV_STATE_PR = INDEV_STATE_PRESSED


def STYLE_CONST_BG_IMG_SRC(val):
    return {'prop_ptr': _style_const_prop_id_BG_IMG_SRC, 'value': {'ptr': val}}


FILE_EXPLORER_PATH_MAX_LEN = 128
SYMBOL_LOOP = b"\xEF\x81\xB9"


def STYLE_CONST_TRANSFORM_HEIGHT(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSFORM_HEIGHT,
        'value': {'num': int32_t(val)}
    }


SIZE_CONTENT = COORD_SET_SPEC(2001)

SEEK_SET = 0

IMGFONT_BPP = 9
LABEL_WAIT_CHAR_COUNT = 3


def ANIM_SET_EASE_IN_BACK(a):
    return _PARA(a, 0.36, 0, 0.66, -0.56)


IMG_ZOOM_NONE = ZOOM_NONE
SYMBOL_LIST = b"\xEF\x80\x8B"

FONT_MONTSERRAT_46 = 1
SYMBOL_EYE_CLOSE = b"\xEF\x81\xB0"


def STYLE_CONST_PAD_TOP(val):
    return {
        'prop_ptr': _style_const_prop_id_PAD_TOP,
        'value': {'num': int32_t(val)}
    }


_COLOR_NATIVE_WITH_ALPHA_SIZE = 4
LVGL_VERSION_INFO = b"dev"

SYMBOL_SD_CARD = b"\xEF\x9F\x82"
FILENAME_MAX = 1024
_SWITCH_KNOB_EXT_AREA_CORRECTION = 2


def CANVAS_BUF_SIZE_ALPHA_1BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_1BIT(w, h)


def PCT(x):
    if x < 0:
        return COORD_SET_SPEC(1000 - x)
    return COORD_SET_SPEC(x)


def STYLE_CONST_ARC_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_ARC_OPA,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_LINE_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_LINE_OPA,
        'value': {'num': int32_t(val)}
    }


def CANVAS_BUF_SIZE_INDEXED_1BIT(w, h):
    return IMG_BUF_SIZE_INDEXED_1BIT(w, h)


def CLAMP(min, val, max):
    return MAX(min, MIN(val, max))


def STYLE_CONST_ARC_IMG_SRC(val):
    return {'prop_ptr': _style_const_prop_id_ARC_IMG_SRC, 'value': {'ptr': val}}


def STYLE_CONST_PAD_RIGHT(val):
    return {
        'prop_ptr': _style_const_prop_id_PAD_RIGHT,
        'value': {'num': int32_t(val)}
    }


SYMBOL_CLOSE = b"\xEF\x80\x8D"
SYMBOL_BATTERY_FULL = b"\xEF\x89\x80"


def ANIM_SET_EASE_IN_OUT_QUAD(a):
    return _PARA(a, 0.45, 0, 0.55, 1)


ZOOM_NONE = 256
ULONG_MAX = 18446744073709551615


def STYLE_CONST_LINE_ROUNDED(val):
    return {
        'prop_ptr': _style_const_prop_id_LINE_ROUNDED,
        'value': {'num': int32_t(val)}
    }


SEEK_CUR = 1
_FLEX_REVERSE = 1 << 3


def _LL_READ_BACK(list, i):
    i = _ll_get_tail(list)

    while i is not None:
        i = _ll_get_prev(list, i)


LABEL_POS_LAST = 0xFFFF
LABEL_TEXT_SELECTION_OFF = DRAW_LABEL_NO_TXT_SEL


def VERSION_CHECK(x, y, z):
    return (
        x == LVGL_VERSION_MAJOR and
        (
            y < LVGL_VERSION_MINOR or
            (y == LVGL_VERSION_MINOR and z <= LVGL_VERSION_PATCH)
        )
    )


COORD_MAX = (1 << _COORD_TYPE_SHIFT) - 1


def kill_dependency(y):
    return y


def STYLE_CONST_X(val):
    return {'prop_ptr': _style_const_prop_id_X, 'value': {'num': int32_t(val)}}


def IMG_BUF_SIZE_INDEXED_2BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_2BIT(w, h) + 4 * 4



def ANIM_SET_EASE_IN_EXPO(a):
    return _PARA(a, 0.7, 0, 0.84, 0)


CALENDAR_DEFAULT_DAY_NAMES = ("Su", "Mo", "Tu", "We", "Th", "Fr", "Sa")
STYLE_PROP_FLAG_EXT_DRAW_UPDATE = 1 << 1


def ANIM_SET_EASE_IN_OUT_QUINT(a):
    return _PARA(a, 0.83, 0, 0.17, 1)


COLOR_CHROMA_KEY = color_hex(0x00ff00)


def STYLE_CONST_CLIP_CORNER(val):
    return {
        'prop_ptr': _style_const_prop_id_CLIP_CORNER,
        'value': {'num': int32_t(val)}
    }


BTNMATRIX_BTN_NONE = 0xFFFF


def CONCAT(x, y):
    return _CONCAT(x, y)


LVGL_VERSION_MAJOR = 9
INT_MIN = -2147483648


def STYLE_CONST_BORDER_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_BORDER_OPA,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_GRID_X_ALIGN(val):
    return {'prop_ptr': STYLE_GRID_X_ALIGN, 'value': {'num': grid_align_t(val)}}


def CANVAS_BUF_SIZE_INDEXED_4BIT(w, h):
    return IMG_BUF_SIZE_INDEXED_4BIT(w, h)


CHART_POINT_NONE = INT32_MAX


def VER_RES():
    return disp_get_ver_res(disp_get_default())


def MAX4(a, b, c, d):
    return MAX(MAX(a, b), MAX(c, d))


def STYLE_CONST_TRANSFORM_PIVOT_Y(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSFORM_PIVOT_Y,
        'value': {'num': int32_t(val)}
    }


_FLEX_COLUMN = 1 << 0
GRID_CONTENT = COORD_MAX - 101

DROPDOWN_POS_LAST = 0xFFFF


def IMG_BUF_SIZE_TRUE_COLOR_CHROMA_KEYED(w, h):
    return (COLOR_DEPTH // 8) * w * h


def STYLE_CONST_BG_IMG_RECOLOR_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_IMG_RECOLOR_OPA,
        'value': {'num': int32_t(val)}
    }


RAND_MAX = 32767
COLOR_SIZE = COLOR_DEPTH


def IMG_BUF_SIZE_ALPHA_8BIT(w, h):
    return w * h


def IMG_BUF_SIZE_ALPHA_1BIT(w, h):
    return ((w + 7) // 8) * h


SYMBOL_MINUS = b"\xEF\x81\xA8"


def STYLE_CONST_MIN_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_MIN_WIDTH,
        'value': {'num': int32_t(val)}
    }


FS_MAX_PATH_LENGTH = 256

SYMBOL_KEYBOARD = b"\xEF\x84\x9C"


def COORD_IS_PCT(x):
    return COORD_IS_SPEC(x) and _COORD_PLAIN(x) <= 2000


_COORD_TYPE_PX_NEG = 3 << _COORD_TYPE_SHIFT


def ANIM_SET_EASE_IN_QUART(a):
    return _PARA(a, 0.5, 0, 0.75, 0)


NO_TIMER_READY = 0xFFFFFFFF
NO_TASK_READY = NO_TIMER_READY


def STYLE_CONST_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_WIDTH,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_BG_GRAD_COLOR(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_GRAD_COLOR,
        'value': {'color': val}
    }


BIDI_RLO = b"\xE2\x80\xAE"
STYLE_PROP_FLAG_LAYOUT_UPDATE = 1 << 2
SYMBOL_SAVE = b"\xEF\x83\x87"

FS_MAX_FN_LENGTH = 64

SYMBOL_AUDIO = b"\xEF\x80\x81"
LVGL_VERSION_MINOR = 0


def IMG_BUF_SIZE_INDEXED_1BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_1BIT(w, h) + 4 * 2


TXT_LINE_BREAK_LONG_PRE_MIN_LEN = 3


def STYLE_CONST_LINE_DASH_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_LINE_DASH_WIDTH,
        'value': {'num': int32_t(val)}
    }


SYMBOL_NEW_LINE = b"\xEF\xA2\xA2"
SYMBOL_CUT = b"\xEF\x83\x84"


def ANIM_SET_EASE_OUT_BACK(a):
    return _PARA(a, 0.34, 1.56, 0.64, 1)


def STYLE_CONST_BORDER_SIDE(val):
    return {
        'prop_ptr': _style_const_prop_id_BORDER_SIDE,
        'value': {'num': int32_t(val)}
    }


def MIN(a, b):
    if a < b:
        return a
    return b


def ANIM_SET_EASE_OUT_QUINT(a):
    return _PARA(a, 0.22, 1, 0.36, 1)


STYLE_PROP_FLAG_ALL = 0x3F


def STYLE_CONST_TEXT_LINE_SPACE(val):
    return {
        'prop_ptr': _style_const_prop_id_TEXT_LINE_SPACE,
        'value': {'num': int32_t(val)}
    }


_FLEX_WRAP = 1 << 2
TXT_LINE_BREAK_LONG_LEN = 0


def STYLE_CONST_BG_MAIN_STOP(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_MAIN_STOP,
        'value': {'num': int32_t(val)}
    }


SYMBOL_IMAGE = b"\xEF\x80\xBE"
CHAR_MIN = -128
_COORD_TYPE_SPEC = 1 << _COORD_TYPE_SHIFT
DPI_DEF = 130
TABLE_CELL_NONE = 0XFFFF


def STYLE_CONST_Y(val):
    return {'prop_ptr': _style_const_prop_id_Y, 'value': {'num': int32_t(val)}}


TXT_ENC = TXT_ENC_UTF8


def MAX(a, b):
    if a > b:
        return a
    return b


def CONCAT3(x, y, z):
    return _CONCAT3(x, y, z)


RADIUS_CIRCLE = 0x7FFF


def STYLE_CONST_TRANSLATE_Y(val):
    return {
        'prop_ptr': _style_const_prop_id_TRANSLATE_Y,
        'value': {'num': int32_t(val)}
    }


SYMBOL_WIFI = b"\xEF\x87\xAB"
SYMBOL_DRIVE = b"\xEF\x80\x9C"
COLOR_DEPTH = 32
SYMBOL_ENVELOPE = b"\xEF\x83\xA0"


def ANIM_SET_EASE_IN_QUAD(a):
    return _PARA(a, 0.11, 0, 0.5, 0)


def STYLE_CONST_BLEND_MODE(val):
    return {
        'prop_ptr': _style_const_prop_id_BLEND_MODE,
        'value': {'num': int32_t(val)}
    }


LVGL_VERSION_PATCH = 0


def STYLE_CONST_MARGIN_LEFT(val):
    return {
        'prop_ptr': _style_const_prop_id_MARGIN_LEFT,
        'value': {'num': int32_t(val)}
    }


def IMG_BUF_SIZE_INDEXED_8BIT(w, h):
    return IMG_BUF_SIZE_ALPHA_8BIT(w, h) + 4 * 256


def STYLE_CONST_ANIM_SPEED(val):
    return {
        'prop_ptr': _style_const_prop_id_ANIM_SPEED,
        'value': {'num': int32_t(val)}
    }


SYMBOL_PREV = b"\xEF\x81\x88"


def STYLE_CONST_GRID_COLUMN_DSC_ARRAY(val):
    return {
        'prop_ptr': STYLE_GRID_COLUMN_DSC_ARRAY,
        'value': {'ptr': _ctypes.cast(_ctypes.pointer(val), void_t)}
    }


_COORD_TYPE_PX = 0 << _COORD_TYPE_SHIFT


def COORD_GET_PCT(x):
    if _COORD_PLAIN(x) > 1000:
        return 1000 - _COORD_PLAIN(x)
    return _COORD_PLAIN(x)


BIDI_LRO = b"\xE2\x80\xAD"


def ANIM_SET_EASE_IN_SINE(a):
    return _PARA(a, 0.12, 0, 0.39, 0)


def GRID_FR(x):
    return COORD_MAX - 100 + x


def STYLE_CONST_BG_GRAD_DIR(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_GRAD_DIR,
        'value': {'num': int32_t(val)}
    }


def IMG_BUF_SIZE_TRUE_COLOR(w, h):
    return (COLOR_DEPTH // 8) * w * h


def STYLE_CONST_SHADOW_OFS_Y(val):
    return {
        'prop_ptr': _style_const_prop_id_SHADOW_OFS_Y,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_ARC_COLOR(val):
    return {'prop_ptr': _style_const_prop_id_ARC_COLOR, 'value': {'color': val}}


SYMBOL_TRASH = b"\xEF\x8B\xAD"


def STYLE_CONST_SHADOW_OFS_X(val):
    return {
        'prop_ptr': _style_const_prop_id_SHADOW_OFS_X,
        'value': {'num': int32_t(val)}
    }


def COORD_SET_SPEC(x):
    return x | _COORD_TYPE_SPEC


def STYLE_CONST_GRID_CELL_ROW_POS(val):
    return {'prop_ptr': STYLE_GRID_CELL_ROW_POS, 'value': {'num': coord_t(val)}}


SYMBOL_COPY = b"\xEF\x83\x85"


def STYLE_CONST_LINE_DASH_GAP(val):
    return {
        'prop_ptr': _style_const_prop_id_LINE_DASH_GAP,
        'value': {'num': int32_t(val)}
    }


INT_MAX = 2147483647
SYMBOL_BLUETOOTH = b"\xEF\x8a\x93"
TRIGO_SHIFT = 15
OBJ_FLAG_FLEX_IN_NEW_TRACK = OBJ_FLAG_LAYOUT_1


def ANIM_SET_EASE_IN_OUT_CIRC(a):
    return _PARA(a, 0.85, 0, 0.15, 1)


FONT_DEFAULT = font_montserrat_14
IME_PINYIN_K9_MAX_INPUT = 7
TEXTAREA_DEF_PWD_SHOW_TIME = 1500

THEME_DEFAULT_TRANSITION_TIME = 80

def STYLE_CONST_GRID_CELL_COLUMN_POS(val):
    return {
        'prop_ptr': STYLE_GRID_CELL_COLUMN_POS,
        'value': {'num': coord_t(val)}
    }


SCHAR_MIN = -128


def STYLE_CONST_BASE_DIR(val):
    return {
        'prop_ptr': _style_const_prop_id_BASE_DIR,
        'value': {'num': int32_t(val)}
    }


def ANIM_SET_EASE_IN_OUT_QUART(a):
    return _PARA(a, 0.76, 0, 0.24, 1)


def ANIM_SET_EASE_OUT_QUAD(a):
    return _PARA(a, 0.5, 1, 0.89, 1)


SYMBOL_BATTERY_3 = b"\xEF\x89\x81"


def MAX_OF(t):
    if IS_SIGNED(t):
        return SMAX_OF(t)

    return UMAX_OF(t)


def ANIM_SET_EASE_IN_CIRC(a):
    return _PARA(a, 0.55, 0, 1, 0.45)


def STYLE_CONST_COLOR_FILTER_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_COLOR_FILTER_OPA,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_OUTLINE_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_OUTLINE_OPA,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_FLEX_FLOW(val):
    return {'prop_ptr': STYLE_FLEX_FLOW, 'value': {'num': flex_flow_t(val)}}


TRIGO_SIN_MAX = 32768
IME_PINYIN_CAND_TEXT_NUM = 6

UINT_MAX = 4294967295


def MIN3(a, b, c):
    return MIN(MIN(a, b), c)


def STYLE_CONST_MARGIN_RIGHT(val):
    return {
        'prop_ptr': _style_const_prop_id_MARGIN_RIGHT,
        'value': {'num': int32_t(val)}
    }


BEZIER_VAL_MAX = 1 << BEZIER_VAL_SHIFT
FOPEN_MAX = 20


def IMG_BUF_SIZE_TRUE_COLOR_ALPHA(w, h):
    return _COLOR_NATIVE_WITH_ALPHA_SIZE * w * h


def COORD_IS_PX(x):
    return _COORD_TYPE(x) == _COORD_TYPE_PX or _COORD_TYPE(
        x
        ) == _COORD_TYPE_PX_NEG


def STYLE_CONST_IMG_RECOLOR_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_IMG_RECOLOR_OPA,
        'value': {'num': int32_t(val)}
    }


def COLOR_MAKE(r8, g8, b8):
    return b8, g8, r8


STYLE_PROP_FLAG_LAYER_UPDATE = 1 << 4


def _COORD_PLAIN(x):
    return x & ~_COORD_TYPE_MASK


def STYLE_CONST_FLEX_MAIN_PLACE(val):
    return {
        'prop_ptr': STYLE_FLEX_MAIN_PLACE,
        'value': {'num': flex_flow_t(val)}
    }


def STYLE_CONST_OUTLINE_PAD(val):
    return {
        'prop_ptr': _style_const_prop_id_OUTLINE_PAD,
        'value': {'num': int32_t(val)}
    }


SYMBOL_NEXT = b"\xEF\x81\x91"


def ANIM_SET_EASE_OUT_QUART(a):
    return _PARA(a, 0.25, 1, 0.5, 1)


def STYLE_CONST_PAD_BOTTOM(val):
    return {
        'prop_ptr': _style_const_prop_id_PAD_BOTTOM,
        'value': {'num': int32_t(val)}
    }


SYMBOL_DOWN = b"\xEF\x81\xB8"
TXT_LINE_BREAK_LONG_POST_MIN_LEN = 3
SYMBOL_HOME = b"\xEF\x80\x95"
SYMBOL_BACKSPACE = b"\xEF\x95\x9A"


def ANIM_SET_EASE_IN_OUT_EXPO(a):
    return _PARA(a, 0.87, 0, 0.13, 1)


def MIN4(a, b, c, d):
    return MIN(MIN(a, b), MIN(c, d))


_INTEGRAL_MAX_BITS = 64


def STYLE_CONST_GRID_CELL_ROW_SPAN(val):
    return {'prop_ptr': STYLE_GRID_CELL_ROWSPAN, 'value': {'num': coord_t(val)}}


ANIM_PLAYTIME_INFINITE = 0xFFFFFFFF


def STYLE_CONST_LINE_WIDTH(val):
    return {
        'prop_ptr': _style_const_prop_id_LINE_WIDTH,
        'value': {'num': int32_t(val)}
    }


SYMBOL_MUTE = b"\xEF\x80\xA6"
_COORD_TYPE_MASK = 3 << _COORD_TYPE_SHIFT


def STYLE_CONST_BG_GRAD_STOP(val):
    return {
        'prop_ptr': _style_const_prop_id_BG_GRAD_STOP,
        'value': {'num': int32_t(val)}
    }


SYMBOL_STOP = b"\xEF\x81\x8D"
SYMBOL_CHARGE = b"\xEF\x83\xA7"
CALENDAR_WEEK_STARTS_MONDAY = 0


def ABS(x):
    if x > 0:
        return x
    return -x


def STYLE_CONST_MAX_HEIGHT(val):
    return {
        'prop_ptr': _style_const_prop_id_MAX_HEIGHT,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_COLOR_FILTER_DSC(val):
    return {
        'prop_ptr': _style_const_prop_id_COLOR_FILTER_DSC,
        'value': {'ptr': val}
    }


def STYLE_PROP_ID_MASK(prop):
    return style_prop_t(prop & ~STYLE_PROP_META_MASK)


def STYLE_CONST_OPA(val):
    return {
        'prop_ptr': _style_const_prop_id_OPA,
        'value': {'num': int32_t(val)}
    }


def CANVAS_BUF_SIZE_TRUE_COLOR_ALPHA(w, h):
    return IMG_BUF_SIZE_TRUE_COLOR_ALPHA(w, h)


def STYLE_CONST_PAD_LEFT(val):
    return {
        'prop_ptr': _style_const_prop_id_PAD_LEFT,
        'value': {'num': int32_t(val)}
    }


def STYLE_CONST_FLEX_TRACK_PLACE(val):
    return {
        'prop_ptr': STYLE_FLEX_TRACK_PLACE,
        'value': {'num': flex_flow_t(val)}
    }


def ANIM_SET_EASE_OUT_SINE(a):
    return _PARA(a, 0.61, 1, 0.88, 1)


SYMBOL_BATTERY_2 = b"\xEF\x89\x82"


def STYLE_CONST_TEXT_DECOR(val):
    return {
        'prop_ptr': _style_const_prop_id_TEXT_DECOR,
        'value': {'num': int32_t(val)}
    }


ANIM_REPEAT_INFINITE = 0xFFFF



